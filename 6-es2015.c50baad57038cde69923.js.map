{"version":3,"sources":["webpack:///src/app/core/guards/auth.guard.ts","webpack:///src/app/core/guards/admin.guard.ts","webpack:///src/app/modules/admin/admin-home/admin-home.component.ts","webpack:///src/app/modules/admin/admin-home/admin-home.component.html","webpack:///src/app/modules/admin/admin.component.ts","webpack:///src/app/modules/admin/admin.component.html","webpack:///src/app/core/services/notification.service.ts","webpack:///src/app/modules/admin/background-management/background-management.component.html","webpack:///src/app/modules/admin/background-management/background-management.component.ts","webpack:///src/app/modules/admin/bg-bulk-upload/bg-bulk-upload.component.html","webpack:///src/app/modules/admin/bg-bulk-upload/bg-bulk-upload.component.ts","webpack:///src/app/modules/admin/category-management/category-management.component.html","webpack:///src/app/modules/admin/category-management/category-management.component.ts","webpack:///src/app/modules/admin/icon-management/icon-management.component.html","webpack:///src/app/modules/admin/icon-management/icon-management.component.ts","webpack:///src/app/modules/admin/icons-bulk-upload/icons-bulk-upload.component.html","webpack:///src/app/modules/admin/admin-routing.module.ts","webpack:///src/app/modules/admin/icons-bulk-upload/icons-bulk-upload.component.ts","webpack:///src/app/modules/admin/admin.module.ts"],"names":["AuthGuard","authService","router","_","state","sessionData","this","getSessionData","existingToken","getToken","of","verifyToken","pipe","map","data","redirect","url","catchError","navigate","queryParams","redirectUrl","AdminGuard","authGuard","route","canActivate","isAuthorized","user","isAdmin","AdminHomeComponent","AdminComponent","adminTabs","id","IconManagement","title","IconsBulkUpload","CategoryManagement","BackgroundManagement","BgBulkUpload","TabId","username","tabId","tab","find","t","logout","subscribe","toWebsite","onTabChange","NotificationService","DEFAULT_DURATION","notifications$","BehaviorSubject","asObservable","notification","createdAt","Date","next","value","setTimeout","filter","n","getTime","duration","BackgroundManagementComponent","backgroundService","notificationService","fb","clipboardService","loading","form","backgrounds$","fetchBackgrounds","notificationsChanged","isDeleting","deleteBackgroundControl","control","required","destroyed$","Subject","COMPONENT_TITLE","controls","complete","backgroundFieldControl","invalid","background","setValue","deleteBackground","mergeMap","tap","backgrounds","localDelete","addNotification","name","reset","finalize","copy","body","getBackgrounds","sortAlphaNumeric","createForm","clear","forEach","i","group","tags","updatedAt","merge","get","valueChanges","val","split","tag","trim","length","takeUntil","updateValueAndValidity","valid","debounceTime","DEFAULT_DEBOUNCE_TIME","distinctUntilChanged","x","y","key","Object","keys","oldVal","newVal","Array","isArray","isEqual","changes","forkJoin","patchBackground","updatedBackground","localUpdate","updatedBackgroundFull","item","push","clonedBackgrounds","index","findIndex","backgroundId","controlIndex","c","removeAt","action","BgBulkUploadComponent","domSanitizer","filePreviews","Map","from","selectedFiles","event","target","files","selectedFilesArray","file","set","Promise","resolve","reject","reader","FileReader","onload","bypassSecurityTrustUrl","result","onerror","e","readAsDataURL","formData","FormData","append","uploadBackgrounds","throwError","addUploadNotification","filesEl","nativeElement","qty","selectFiles","CategoryManagementComponent","categoryService","categories$","fetchCategories","isAddingCategory","newCategoryForm","description","deleteCategoryControl","categoryFieldControl","addCategory","category","deleteCategory","getCategories","categories","patchCategory","updatedCategory","updatedCategoryFull","IconManagementComponent","iconService","icons$","fetchIcons","IconType","iconTypes","entries","deleteIconControl","type","Raster","Vector","icon","some","cat","iconControl","updatedIcon","obs$","hasCategory","deleteIconCategory","addIconCategory","iconFieldControl","deleteIcon","icons","getIcons","isPremium","patchIcon","updatedIconFull","clonedIcons","iconId","routes","path","component","children","IconsBulkUploadComponent","uploadIcons","iconsQty","AdminRoutingModule","forChild","AdminModule"],"mappings":"uOAUO,Y,MAAMA,EACX,YAA6BC,EAA2CC,GAA3C,KAAAD,cAA2C,KAAAC,SAEjE,YAAYC,EAA2BC,GAC5C,MAAMC,EAAcC,KAAKL,YAAYM,iBAC/BC,EAAgBF,KAAKL,YAAYQ,WAEvC,OAAKJ,EAgBI,OAAAK,EAAA,IAAG,GAfLF,EAIEF,KAAKL,YAAYU,cAAcC,KACpC,OAAAC,EAAA,GAAKC,KACEA,GACIR,KAAKS,SAASX,EAAMY,MAK/B,OAAAC,EAAA,GAAW,IAAM,OAAAP,EAAA,GAAGJ,KAAKS,SAASX,EAAMY,QAXjC,OAAAN,EAAA,IAAG,GAAOE,KAAK,OAAAC,EAAA,GAAI,IAAMP,KAAKS,SAASX,EAAMY,OAkBlD,SAASA,GAEf,OADAV,KAAKJ,OAAOgB,SAAS,CAAC,SAAU,CAAEC,YAAa,CAAEC,YAAaJ,MACvD,G,6CA7BEhB,GAAS,sB,yBAATA,EAAS,QAATA,EAAS,qBAFR,S,GAEP,GCCA,Q,MAAMqB,EACX,YACmBpB,EACAC,EACAoB,GAFA,KAAArB,cACA,KAAAC,SACA,KAAAoB,YAGZ,YAAYC,EAA+BnB,GAEhD,OADsBE,KAAKgB,UAAUE,YAAYD,EAAOnB,GACnCQ,KACnB,OAAAC,EAAA,GAAKY,I,QACH,OAAKA,MAI8C,QAA1C,EAAoC,QAApC,EAAGnB,KAAKL,YAAYM,wBAAgB,eAAEmB,YAAI,eAAEC,UAH5CrB,KAAKS,SAASX,EAAMY,OAU/B,OAAAC,EAAA,GAAW,IAAM,OAAAP,EAAA,GAAGJ,KAAKS,SAASX,EAAMY,QAGpC,SAASA,GAEf,OADAV,KAAKJ,OAAOgB,SAAS,CAAC,SAAU,CAAEC,YAAa,CAAEC,YAAaJ,MACvD,G,6CA3BEK,GAAU,8B,yBAAVA,EAAU,QAAVA,EAAU,qBAFT,S,GAEP,GCJA,Q,MAAMO,EACX,eAEA,a,6CAHWA,I,uBAAAA,EAAkB,qJCP/B,gBACE,aAAI,qCAA0B,OAChC,S,iBDKO,G,4BEKA,Y,MAAMC,EAkCX,YAA6B5B,EAA2CC,GAA3C,KAAAD,cAA2C,KAAAC,SAjCjE,KAAA4B,UAAsB,CAC3B,CACEC,GAAI,IAAMC,eACVC,MAAO,kBACPjB,IAAK,gBAEP,CACEe,GAAI,IAAMG,gBACVD,MAAO,oBACPjB,IAAK,uBAEP,CACEe,GAAI,IAAMI,mBACVF,MAAO,sBACPjB,IAAK,qBAEP,CACEe,GAAI,IAAMK,qBACVH,MAAO,wBACPjB,IAAK,sBAEP,CACEe,GAAI,IAAMM,aACVJ,MAAO,0BACPjB,IAAK,8BAIF,KAAAsB,MAAQ,IACf,eACE,OAAOhC,KAAKL,YAAYsC,UAAY,QAK/B,YAAYC,GACjB,MAAMC,EAAMnC,KAAKwB,UAAUY,KAAMC,GAAMA,EAAEZ,KAAOS,GAChDlC,KAAKJ,OAAOgB,SAAS,CAACuB,EAAIzB,MAGrB,YACLV,KAAKJ,OAAOgB,SAAS,CAAC,KAGjB,SACLZ,KAAKL,YAAY2C,SAASC,a,6CA9CjBhB,GAAc,sB,uBAAdA,EAAc,oaCZ3B,gBACE,gBACE,cAEA,eAAqB,QAAuB,OAC5C,mBACQ,+BAAS,EAAAiB,cAAa,wBAAa,OAC3C,mBACQ,+BAAS,EAAAF,WAAU,iBAAM,OACnC,OAEA,oBAES,oCAAa,EAAAG,YAAA,KACA,OACxB,OAEA,iBACE,yBACF,Q,MAfyB,wCAOd,iCAAkB,mB,uMDCtB,G,oMELA,Y,MAAMC,EAHb,cAIkB,KAAAC,iBAAmB,IAI3B,KAAAC,eAAiB,IAAIC,EAAA,EAAgC,IAH7D,2BACE,OAAO7C,KAAK4C,eAAeE,eAItB,gBAAgBC,GAChBA,EAAaC,YAChBD,EAAaC,UAAY,IAAIC,MAG/BjD,KAAK4C,eAAeM,KAAK,IAAIlD,KAAK4C,eAAeO,MAAOJ,IAExDK,WACE,IACEpD,KAAK4C,eAAeM,KAClBlD,KAAK4C,eAAeO,MAAME,OAAQC,GAAMA,EAAEN,UAAUO,YAAcR,EAAaC,UAAUO,YAE7FR,EAAaS,UAAYxD,KAAK2C,mB,6CAnBvBD,I,yBAAAA,EAAmB,QAAnBA,EAAmB,qBAFlB,S,GAEP,G,2FCQD,QACE,eACE,eAEI,0EAAgB,MAAe,MAAMS,SAAQ,kBAA6B,QAAgC,OAAQ,OACtH,aAAI,iBACuC,OAC3C,gBACE,2BAEF,OACA,aACE,uBACF,OACA,cACE,4BAEF,OACA,cAAI,iBAAO,S,gBAAqD,OAAQ,OACxE,cAAI,iBAAO,S,gBAA+D,OAAQ,OAClF,iBACE,qBACQ,8FAA4C,OACtD,OACF,OACF,O,sCAxBM,4BAG4E,gCAEvE,4CAGU,sDAOA,qDAEN,0DACA,iE,yBAlCrB,QACE,kBACE,gBACE,aACE,eAAgB,YAAC,OACjB,eAAgB,qBAAU,OAC1B,eAAgB,eAAI,OACpB,gBAAgB,iBAAK,gBAAM,4BAAgB,OAAO,OAClD,gBAAgB,eAAG,OACnB,gBAAgB,sBAAU,OAC1B,gBAAgB,sBAAU,OAC1B,gBACF,OACF,OACA,iBACE,kCA0BF,OACF,OACF,Q,oBA5B2C,4C,qBA8B3C,kB,uCAKA,sBAEU,2DAAuB,GAAvB,CAA6B,8DAErC,iBACE,YAAG,QAAoF,OACzF,OACF,O,uBAFO,wGCrCA,Y,MAAMM,EAaX,YACmBC,EACAC,EACAC,EACAC,GAHA,KAAAH,oBACA,KAAAC,sBACA,KAAAC,KACA,KAAAC,mBAhBZ,KAAAC,SAAU,EACV,KAAAC,KAAO,IAAI,IAAU,IACrB,KAAAC,aAAehE,KAAKiE,mBACpB,KAAArB,eAAiB5C,KAAK2D,oBAAoBO,qBAI1C,KAAAC,YAAa,EACb,KAAAC,wBAA0BpE,KAAK4D,GAAGS,QAAQ,CAAC,KAAM,IAAWC,WAC3D,KAAAC,WAAa,IAAIC,EAAA,EACR,KAAAC,gBAAkB,wBANnC,sBACE,OAAOzE,KAAK+D,KAAKW,SAcZ,cACL1E,KAAKuE,WAAWrB,OAChBlD,KAAKuE,WAAWI,WAGX,YAAYC,GAEjB,OAAOA,EAAuBC,QAAU,8BADvB,mBAIZ,gBAAgBC,GACrB9E,KAAKoE,wBAAwBW,SAASD,GACtC9E,KAAKmE,YAAa,EAGb,mBACLnE,KAAK8D,SAAU,EACf9D,KAAK0D,kBACFsB,iBAAiBhF,KAAKoE,wBAAwBjB,MAAM1B,IACpDnB,KACC,OAAA2E,EAAA,GAAS,IAAMjF,KAAKgE,cACpB,OAAAkB,EAAA,GAAKC,IACHnF,KAAKoF,YAAYpF,KAAKoE,wBAAwBjB,MAAM1B,GAAI0D,GACxDnF,KAAKqF,gBAAgB,CAAEC,KAAMtF,KAAKoE,wBAAwBjB,MAAMmC,MAAQ,WACxEtF,KAAKoE,wBAAwBmB,UAE/B,OAAAC,EAAA,GAAS,IAAOxF,KAAK8D,SAAU,IAEhCvB,YAEHvC,KAAKmE,YAAa,EAGb,OAAO1C,GACZzB,KAAK6D,iBAAiB4B,KAAKhE,GAC3BzB,KAAK2D,oBAAoB0B,gBAAgB,CACvC1D,MAAO3B,KAAKyE,gBACZiB,KAAM,OAAOjE,qCAIT,mBAGN,OAFAzB,KAAK8D,SAAU,EAER9D,KAAK0D,kBAAkBiC,gBAAe,GAAMrF,KACjD,OAAAC,EAAA,GAAK4E,GAAgB,IAAYS,iBAAiBT,EAAa,SAC/D,OAAAD,EAAA,GAAKC,GAAgBnF,KAAK6F,WAAWV,IACrC,OAAAK,EAAA,GAAS,IAAOxF,KAAK8D,SAAU,IAI3B,WAAWqB,GACjBnF,KAAK+D,KAAK+B,QAEVX,EAAYY,QAASC,IACnB,MAAMC,EAAQjG,KAAK4D,GAAGqC,MAAM,CAC1BxE,GAAI,CAACuE,EAAEvE,GAAI,IAAW6C,UACtBgB,KAAM,CAACU,EAAEV,KAAM,IAAWhB,UAC1B4B,KAAM,CAACF,EAAEE,MACTxF,IAAK,CAACsF,EAAEtF,IAAK,IAAW4D,UACxBtB,UAAW,CAACgD,EAAEhD,UAAW,IAAWsB,UACpC6B,UAAW,CAACH,EAAEG,aAEhB,OAAAC,EAAA,GACEH,EAAMI,IAAI,QAAQC,aAAahG,KAAK,OAAAC,EAAA,GAAKgG,KAAWjB,KAAMiB,MAC1DN,EAAMI,IAAI,QAAQC,aAAahG,KAC7B,OAAAC,EAAA,GAAKgG,KACHL,KAAMK,EACHC,MAAM,KACNjG,IAAKkG,GAAgBA,EAAIC,QACzBrD,OAAQoD,KAAkBA,EAAIE,YAGrCV,EAAMI,IAAI,OAAOC,aAAahG,KAAK,OAAAC,EAAA,GAAKgG,KAAW7F,IAAK6F,OAEvDjG,KACC,OAAAsG,EAAA,GAAU5G,KAAKuE,YACf,OAAAlB,EAAA,GAAO,KACL4C,EAAMY,yBACCZ,EAAMa,QAEf,OAAAC,EAAA,GAAa,IAAWC,uBACxB,OAAAC,EAAA,GAAqB,CAACC,EAAGC,KACvB,MAAMC,EAAMC,OAAOC,KAAKH,GAAG,GACrBI,EAAUL,EAAUE,GACpBI,EAAUL,EAAUC,GAE1B,OADgBK,MAAMC,QAAQH,GACb,IAAWI,QAAQJ,EAAQC,GAAUD,IAAWC,IAEnE,OAAAjH,EAAA,GAAKqH,GAAa,eAAEnG,GAAIuE,EAAEvE,IAAOmG,IACjC,OAAA3C,EAAA,GAAUH,GAAe,OAAA+C,EAAA,GAAS,CAAC,OAAAzH,EAAA,GAAG0E,GAAa9E,KAAK0D,kBAAkBoE,gBAAgBhD,MAC1F,OAAAI,EAAA,GAAI,EAAE6C,MACJ/H,KAAKgI,YAAYD,EAAmB5C,GACpC,MAAM8C,EAAwB9C,EAAY/C,KAAM8F,GAASA,EAAKzG,KAAOsG,EAAkBtG,IACnFwG,GACFjI,KAAKqF,gBAAgB,OAAD,wBAAM4C,GAA0BF,GAAqB,cAI9ExF,YAEHvC,KAAK+D,KAAKoE,KAAKlC,KAIX,YAAY8B,EAA2C5C,GAC7D,MAAMiD,EAAoB,IAAIjD,GACxBkD,EAAQD,EAAkBE,UAAWxD,GAAeA,EAAWrD,KAAOsG,EAAkBtG,IAC9F2G,EAAkBC,GAAS,OAAH,wBAAQD,EAAkBC,IAAWN,GAC7D/H,KAAKgE,aAAe,OAAA5D,EAAA,GAAGgI,GAGjB,YAAYG,EAAsBpD,GACxCnF,KAAKgE,aAAe,OAAA5D,EAAA,GAAG,IAAI+E,EAAY9B,OAAQyB,GAAeA,EAAWrD,KAAO8G,KAAgBjI,KAC9F,OAAA4E,EAAA,GAAI,KACF,MAAMsD,EAAexI,KAAK+D,KAAKW,SAAS4D,UAAWG,GAAMA,EAAEtF,MAAM1B,KAAO8G,GACpEC,GACFxI,KAAK+D,KAAK2E,SAASF,MAMnB,gBAAgB1D,EAAoC6D,GAC1D3I,KAAK2D,oBAAoB0B,gBAAgB,CACvC1D,MAAO3B,KAAKyE,gBACZiB,KAAM,eAAeZ,EAAWQ,kBAAkBqD,Q,6CAlJ3ClF,GAA6B,wC,uBAA7BA,EAA6B,ypB,GAAA,MDlB1C,gC,gBA6CA,uBAGA,6B,gBAEA,4B,gBAlDe,4EA6CR,+BAGW,iDAEP,oC,wpCChCJ,G,mFCGC,aACE,gBAAgB,QAAW,OAC3B,aAAI,QAAe,OACnB,aAAI,Q,sBAA6B,OACjC,gBAAwB,iB,iBAC6B,OACvD,Q,6CALkB,kBACZ,qBACA,+BAEG,gE,uCAhBf,QACE,kBACE,gBACE,aACE,eAAgB,YAAC,OACjB,eAAgB,oBAAS,OACzB,eAAgB,oBAAS,OACzB,gBAAgB,mBAAO,OACzB,OACF,OACA,iBACE,uBAOF,OACF,OAEA,qBACQ,oEAA8B,8BAAkB,OAC1D,O,uBAZ2B,8CAAuB,2B,qBAclD,kBCtBK,Y,MAAMmF,EAWX,YACmBlF,EACAmF,EACAlF,GAFA,KAAAD,oBACA,KAAAmF,eACA,KAAAlF,sBAXZ,KAAAmF,aAAe,IAAIC,IAInB,KAAAjF,SAAU,EACV,KAAAlB,eAAiB5C,KAAK2D,oBAAoBO,qBACzC,KAAAK,WAAa,IAAIC,EAAA,EALzB,yBACE,OAAOiD,MAAMuB,KAAKhJ,KAAKiJ,eAAiB,IAYnC,cACLjJ,KAAKuE,WAAWrB,OAChBlD,KAAKuE,WAAWI,WAGX,YAAYuE,GACjBlJ,KAAKiJ,cAAgBC,EAAMC,OAAOC,OAAS,GAE3CpJ,KAAKqJ,mBAAmBtD,QAASuD,IAC/BtJ,KAAK8I,aAAaS,IAChBD,EAAKhE,KACL,IAAIkE,QAAQ,CAACC,EAASC,KACpB,MAAMC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,KACdJ,EAAQzJ,KAAK6I,aAAaiB,uBAAuBH,EAAOI,UAE1DJ,EAAOK,QAAWC,IAChBP,EAAOO,IAGTN,EAAOO,cAAcZ,QAMtB,oBACL,IAAKtJ,KAAKiJ,cACR,OAGF,MAAMkB,EAAW,IAAIC,SACrB,IAAK,MAAMd,KAAQtJ,KAAKqJ,mBACtBc,EAASE,OAAO,QAASf,GAG3BtJ,KAAK0D,kBACF4G,kBAAkBH,GAClB7J,KACC,OAAA4E,EAAA,GAAI,IAAOlF,KAAK8D,SAAU,GAC1B,OAAAnD,EAAA,GAAYsJ,GAAM,OAAAM,EAAA,GAAWN,IAC7B,OAAAzE,EAAA,GAAS,KACPxF,KAAKwK,sBAAsBxK,KAAKqJ,mBAAmB1C,QACnD3G,KAAK8D,SAAU,EACf9D,KAAKyK,QAAQC,cAAcvH,MAAQ,QAGtCZ,YAGE,QAAQ1C,EAAWqI,GACxB,OAAOA,EAAK5C,KAGN,sBAAsBqF,GAC5B3K,KAAK2D,oBAAoB0B,gBAAgB,CACvC1D,MAAO,0BACPqB,UAAW,IAAIC,KACfyC,KAASiF,EAAH,sC,6CA3EC/B,GAAqB,8B,uBAArBA,EAAqB,0D,GAAA,K,wgBDblC,gBACE,oBAKO,iCAAU,EAAAgC,YAAA,KALjB,OAMA,mBACQ,+CAAS,UAAe,uBAAY,OAE5C,gCAyBA,uBAEF,OAEA,6B,sBA7BiB,+FAyBR,+BAIS,mD,uGC1BX,G,uDCGD,QACE,eACE,gBAEI,0EAAgB,MAAa,MAAMzH,SAAQ,mBAA6B,QAA8B,OAAQ,OAClH,gBACE,2BAEF,OACA,aACE,2BAEF,OACA,aAAI,S,gBAAmD,OACvD,cAAI,S,gBAA6D,OACjE,iBACE,qBACQ,8FAA0C,OACpD,OACF,OACF,O,sCAnBM,4BAG0E,gCAG3D,sDAIA,6DAEb,0DACA,gE,yBA3Bd,QACE,kBACE,gBACE,aACE,eAAgB,YAAC,OACjB,eAAgB,eAAI,OACpB,eAAgB,sBAAW,OAC3B,gBAAgB,sBAAU,OAC1B,gBAAgB,sBAAU,OAC1B,gBACF,OACF,OACA,iBACE,kCAqBF,OACF,OACF,Q,oBAvByC,0C,qBAyBzC,kB,wCAKA,sBAEU,wEAAiC,yDAEzC,iBACE,iBACE,mBAAkB,eAAI,OACtB,2BAIF,OACA,iBACE,mBAAyB,sBAAW,OACpC,2BAIF,OACF,OACF,O,uBAhBQ,4CAMa,sEAOA,8E,wCAKrB,sBAEU,2DAAuB,GAAvB,CAA6B,4DAErC,iBACE,YAAG,QAAgF,OACrF,OACF,O,uBAFO,oGCxDA,a,MAAM0H,EAkBX,YACmBC,EACAnH,EACAC,EACAC,GAHA,KAAAiH,kBACA,KAAAnH,sBACA,KAAAC,KACA,KAAAC,mBArBZ,KAAAC,SAAU,EACV,KAAAC,KAAO,IAAI,IAAU,IACrB,KAAAgH,YAAc/K,KAAKgL,kBACnB,KAAApI,eAAiB5C,KAAK2D,oBAAoBO,qBAI1C,KAAA+G,kBAAmB,EACnB,KAAA9G,YAAa,EACb,KAAA+G,gBAAkBlL,KAAK4D,GAAGqC,MAAM,CACrCX,KAAM,CAAC,KAAM,IAAWhB,UACxB6G,YAAa,CAAC,QAET,KAAAC,sBAAwBpL,KAAK4D,GAAGS,QAAQ,CAAC,KAAM,IAAWC,WACzD,KAAAC,WAAa,IAAIC,EAAA,EACR,KAAAC,gBAAkB,sBAXnC,oBACE,OAAOzE,KAAK+D,KAAKW,SAmBZ,cACL1E,KAAKuE,WAAWrB,OAChBlD,KAAKuE,WAAWI,WAGX,YAAY0G,GAEjB,OAAOA,EAAqBxG,QAAU,8BADrB,mBAIZ,uBACL7E,KAAKiL,kBAAmB,EACxBjL,KAAKkL,gBAAgB3F,QAGhB,cACDvF,KAAKkL,gBAAgBrG,UAIzB7E,KAAK8D,SAAU,EACf9D,KAAK8K,gBACFQ,YAAYtL,KAAKkL,gBAAgB/H,OACjC7C,KACC,OAAA2E,EAAA,GAAS,IAAMjF,KAAKgL,mBACpB,OAAA9F,EAAA,GAAI,KACFlF,KAAKqF,gBAAgB,CAAEC,KAAMtF,KAAKkL,gBAAgB/H,MAAMmC,MAAQ,SAChEtF,KAAKkL,gBAAgB3F,WAGxBhD,YAEHvC,KAAKiL,kBAAmB,GAGnB,gBAAgBM,GACrBvL,KAAKoL,sBAAsBrG,SAASwG,GACpCvL,KAAKmE,YAAa,EAGb,iBACLnE,KAAK8D,SAAU,EACf9D,KAAK8K,gBACFU,eAAexL,KAAKoL,sBAAsBjI,MAAM1B,IAChDnB,KACC,OAAA2E,EAAA,GAAS,IAAMjF,KAAKgL,mBACpB,OAAA9F,EAAA,GAAI,KACFlF,KAAKqF,gBAAgB,CAAEC,KAAMtF,KAAKoL,sBAAsBjI,MAAMmC,MAAQ,WACtEtF,KAAKoL,sBAAsB7F,WAG9BhD,YAEHvC,KAAKmE,YAAa,EAGb,OAAO1C,GACZzB,KAAK6D,iBAAiB4B,KAAKhE,GAC3BzB,KAAK2D,oBAAoB0B,gBAAgB,CACvC1D,MAAO3B,KAAKyE,gBACZiB,KAAM,OAAOjE,qCAIT,kBAGN,OAFAzB,KAAK8D,SAAU,EAER9D,KAAK8K,gBAAgBW,eAAc,GAAMnL,KAC9C,OAAAC,EAAA,GAAKmL,GAAe,IAAY9F,iBAAiB8F,EAAY,SAC7D,OAAAxG,EAAA,GAAKwG,GAAe1L,KAAK6F,WAAW6F,IACpC,OAAAlG,EAAA,GAAS,IAAOxF,KAAK8D,SAAU,IAI3B,WAAW4H,GACjB1L,KAAK+D,KAAK+B,QAEV4F,EAAW3F,QAASC,IAClB,MAAMC,EAAQjG,KAAK4D,GAAGqC,MAAM,CAC1BxE,GAAI,CAACuE,EAAEvE,GAAI,IAAW6C,UACtBgB,KAAM,CAACU,EAAEV,KAAM,IAAWhB,UAC1B6G,YAAa,CAACnF,EAAEmF,YAAa,IAAW7G,UACxCtB,UAAW,CAACgD,EAAEhD,UAAW,IAAWsB,UACpC6B,UAAW,CAACH,EAAEG,aAEhB,OAAAC,EAAA,GACEH,EAAMI,IAAI,QAAQC,aAAahG,KAAK,OAAAC,EAAA,GAAKgG,KAAWjB,KAAMiB,MAC1DN,EAAMI,IAAI,eAAeC,aAAahG,KAAK,OAAAC,EAAA,GAAKgG,KAAW4E,YAAa5E,OAEvEjG,KACC,OAAAsG,EAAA,GAAU5G,KAAKuE,YACf,OAAAlB,EAAA,GAAO,KACL4C,EAAMY,yBACCZ,EAAMa,QAEf,OAAAC,EAAA,GAAa,IAAWC,uBACxB,OAAAC,EAAA,GAAqB,CAACC,EAAGC,KACvB,MAAMC,EAAMC,OAAOC,KAAKH,GAAG,GAC3B,OAAQD,EAAUE,KAAUD,EAAUC,KAExC,OAAA7G,EAAA,GAAKqH,GAAa,eAAEnG,GAAIuE,EAAEvE,IAAOmG,IACjC,OAAA3C,EAAA,GAAUsG,GAAa,OAAA1D,EAAA,GAAS,CAAC,OAAAzH,EAAA,GAAGmL,GAAWvL,KAAK8K,gBAAgBa,cAAcJ,MAClF,OAAArG,EAAA,GAAI,EAAE0G,MACJ,MAAMC,EAAsBH,EAAWtJ,KAAM8F,GAASA,EAAKzG,KAAOmK,EAAgBnK,IAC9EoK,GACF7L,KAAKqF,gBAAgB,OAAD,wBAAMwG,GAAwBD,GAAmB,WAGvE5L,KAAK+K,YAAc/K,KAAKgL,qBAG3BzI,YAEHvC,KAAK+D,KAAKoE,KAAKlC,KAIX,gBAAgBsF,EAAgC5C,GACtD3I,KAAK2D,oBAAoB0B,gBAAgB,CACvC1D,MAAO3B,KAAKyE,gBACZiB,KAAM,aAAa6F,EAASjG,kBAAkBqD,Q,6CAjJvCkC,GAA2B,wC,uBAA3BA,EAA2B,6/B,GAAA,MDjBxC,mBACQ,mDAA4B,IAAM,uBAAY,OAEtD,gC,gBAsCA,uBAGA,6B,gBAEA,6BAsBA,6B,gBAjEe,mFAsCR,+BAGW,iDAEP,wCAsBA,oC,wpCCnDJ,G,qEC2BK,iBAEE,mBAKF,Q,8BAHS,wCAA8B,8B,wCAMvC,iBAEE,mBAIO,qHAJP,OAMA,mBACE,QACF,OACF,O,uEAJS,+CAAApJ,GAAA,IAHA,gBAAkB,oCAIlB,uDACL,8B,wCA7CV,QACE,eACE,eAEI,0EAAgB,MAAS,MAAM0B,SAAQ,kBAA6B,QAA0B,OAAQ,OAC1G,aAAI,iBACiC,OACrC,gBACE,2BAEF,OACA,aACE,uBACF,OACA,cACE,4BAEF,OACA,iBACE,0BAKF,OACA,cACE,yBAQF,OACA,cACE,yB,iBAYF,OACA,cAAI,iBAAO,S,gBAA+C,OAAQ,OAClE,cAAI,iBAAO,S,gBAAyD,OAAQ,OAC5E,iBACE,qBACQ,8FAAsC,OAChD,OACF,OACF,O,sCAvDM,4BAGsE,gCAEjE,4CAGU,sDAOA,qDAIF,kCAAmB,yCAO1B,sDAUoB,kDAYjB,2DACA,iE,0BApErB,QACE,kBACE,gBACE,aACE,eAAgB,YAAC,OACjB,eAAgB,eAAI,OACpB,eAAgB,eAAI,OACpB,gBAAgB,iBAAK,gBAAM,4BAAgB,OAAO,OAClD,gBAAgB,eAAG,OACnB,gBAAgB,gBAAI,OACpB,gBAAgB,mBAAO,OACvB,gBAAgB,sBAAU,OAC1B,gBAAgB,sBAAU,OAC1B,gBAAgB,sBAAU,OAC1B,gBACF,OACF,OACA,iBACE,mCAyDF,OACF,OACF,Q,oBA3DqC,sC,sBA6DrC,kB,wCAKA,sBAEU,2DAAuB,GAAvB,CAA6B,wDAErC,iBACE,YAAG,QAAwE,OAC7E,OACF,O,uBAFO,4FCpEA,a,MAAM2I,EAgBX,YACmBC,EACAjB,EACAnH,EACAC,EACAC,GAJA,KAAAkI,cACA,KAAAjB,kBACA,KAAAnH,sBACA,KAAAC,KACA,KAAAC,mBApBZ,KAAAC,SAAU,EACV,KAAAC,KAAO,IAAI,IAAU,IACrB,KAAAiI,OAAShM,KAAKiM,aACd,KAAAC,SAAW,KACX,KAAAC,UAAY9E,OAAO+E,QAAQ,MAAU7L,IAAI,EAAE6G,EAAKjE,OAAc1B,GAAI0B,EAAOmC,KAAM8B,KAC/E,KAAA2D,YAAc/K,KAAK8K,gBAAgBW,gBACnC,KAAA7I,eAAiB5C,KAAK2D,oBAAoBO,qBAI1C,KAAAC,YAAa,EACb,KAAAkI,kBAAoBrM,KAAK4D,GAAGS,QAAQ,CAAC,KAAM,IAAWC,WACrD,KAAAC,WAAa,IAAIC,EAAA,EACR,KAAAC,gBAAkB,kBANnC,gBACE,OAAOzE,KAAK+D,KAAKW,SAeZ,cACL1E,KAAKuE,WAAWrB,OAChBlD,KAAKuE,WAAWI,WAGX,YAAY2H,GACjB,OAAQA,GACN,KAAK,KAASC,OACZ,MAAO,SACT,KAAK,KAASC,OACZ,MAAO,SACT,QACE,MAAO,KAIN,YAAYC,EAAelB,G,MAChC,OAAsB,QAAtB,EAAOkB,EAAKf,kBAAU,eAAEgB,KAAMC,GAAQA,EAAIlL,KAAO8J,EAAS9J,IAGrD,eAAegL,EAAelB,EAAuBqB,GAC1D,IAAIC,EACAC,EAUJ,OARI9M,KAAK+M,YAAYN,EAAMlB,IACzBsB,EAAc,CAAEpL,GAAIgL,EAAKhL,GAAIiK,WAAYe,EAAKf,WAAWrI,OAAQsJ,GAAQA,EAAIlL,KAAO8J,EAAS9J,KAC7FqL,EAAO9M,KAAK+L,YAAYiB,mBAAmBP,EAAKhL,GAAI8J,EAAS9J,MAE7DoL,EAAc,CAAEpL,GAAIgL,EAAKhL,GAAIiK,WAAY,IAAIe,EAAKf,WAAYH,IAC9DuB,EAAO9M,KAAK+L,YAAYkB,gBAAgBR,EAAKhL,GAAI8J,EAAS9J,KAGrDqL,EAAKxM,KAAK,OAAA4E,EAAA,GAAI,IAAM0H,EAAYvG,IAAI,cAActB,SAAS8H,EAAYnB,cAAcnJ,YAGvF,YAAY2K,GAEjB,OAAOA,EAAiBrI,QAAU,8BADjB,mBAIZ,gBAAgB4H,GACrBzM,KAAKqM,kBAAkBtH,SAAS0H,GAChCzM,KAAKmE,YAAa,EAGb,aACLnE,KAAK8D,SAAU,EACf9D,KAAK+L,YACFoB,WAAWnN,KAAKqM,kBAAkBlJ,MAAM1B,IACxCnB,KACC,OAAA2E,EAAA,GAAS,IAAMjF,KAAKgM,QACpB,OAAA9G,EAAA,GAAKkI,IACHpN,KAAKoF,YAAYpF,KAAKqM,kBAAkBlJ,MAAM1B,GAAI2L,GAClDpN,KAAKqF,gBAAgB,CAAEC,KAAMtF,KAAKqM,kBAAkBlJ,MAAMmC,MAAQ,WAClEtF,KAAKqM,kBAAkB9G,UAEzB,OAAAC,EAAA,GAAS,IAAOxF,KAAK8D,SAAU,IAEhCvB,YAEHvC,KAAKmE,YAAa,EAGb,OAAO1C,GACZzB,KAAK6D,iBAAiB4B,KAAKhE,GAC3BzB,KAAK2D,oBAAoB0B,gBAAgB,CACvC1D,MAAO3B,KAAKyE,gBACZiB,KAAM,OAAOjE,qCAIT,aAGN,OAFAzB,KAAK8D,SAAU,EAER9D,KAAK+L,YAAYsB,SAAS,IAAI,GAAM/M,KACzC,OAAAC,EAAA,GAAK6M,GAAU,IAAYxH,iBAAiBwH,EAAO,SACnD,OAAAlI,EAAA,GAAKkI,GAAUpN,KAAK6F,WAAWuH,IAC/B,OAAA5H,EAAA,GAAS,IAAOxF,KAAK8D,SAAU,IAI3B,WAAWsJ,GACjBpN,KAAK+D,KAAK+B,QAEVsH,EAAMrH,QAASC,IACb,MAAMC,EAAQjG,KAAK4D,GAAGqC,MAAM,CAC1BxE,GAAI,CAACuE,EAAEvE,GAAI,IAAW6C,UACtBgB,KAAM,CAACU,EAAEV,KAAM,IAAWhB,UAC1B4B,KAAM,CAACF,EAAEE,MACTxF,IAAK,CAACsF,EAAEtF,IAAK,IAAW4D,UACxBgI,KAAM,CAACtG,EAAEsG,KAAM,IAAWhI,UAC1BgJ,UAAW,CAACtH,EAAEsH,UAAW,IAAWhJ,UACpCoH,WAAY,CAAC1F,EAAE0F,YACf1I,UAAW,CAACgD,EAAEhD,UAAW,IAAWsB,UACpC6B,UAAW,CAACH,EAAEG,aAEhB,OAAAC,EAAA,GACEH,EAAMI,IAAI,QAAQC,aAAahG,KAAK,OAAAC,EAAA,GAAKgG,KAAWjB,KAAMiB,MAC1DN,EAAMI,IAAI,QAAQC,aAAahG,KAC7B,OAAAC,EAAA,GAAKgG,KACHL,KAAMK,EACHC,MAAM,KACNjG,IAAKkG,GAAgBA,EAAIC,QACzBrD,OAAQoD,KAAkBA,EAAIE,YAGrCV,EAAMI,IAAI,OAAOC,aAAahG,KAAK,OAAAC,EAAA,GAAKgG,KAAW7F,IAAK6F,MACxDN,EAAMI,IAAI,QAAQC,aAAahG,KAAK,OAAAC,EAAA,GAAKgG,KAAW+F,KAAM/F,MAC1DN,EAAMI,IAAI,aAAaC,aAAahG,KAAK,OAAAC,EAAA,GAAKgG,KAAW+G,UAAW/G,OAEnEjG,KACC,OAAAsG,EAAA,GAAU5G,KAAKuE,YACf,OAAAlB,EAAA,GAAO,KACL4C,EAAMY,yBACCZ,EAAMa,QAEf,OAAAC,EAAA,GAAa,IAAWC,uBACxB,OAAAC,EAAA,GAAqB,CAACC,EAAGC,KACvB,MAAMC,EAAMC,OAAOC,KAAKH,GAAG,GACrBI,EAAUL,EAAUE,GACpBI,EAAUL,EAAUC,GAE1B,OADgBK,MAAMC,QAAQH,GACb,IAAWI,QAAQJ,EAAQC,GAAUD,IAAWC,IAEnE,OAAAjH,EAAA,GAAKqH,GAAa,eAAEnG,GAAIuE,EAAEvE,IAAOmG,IACjC,OAAA3C,EAAA,GAAUwH,GAAS,OAAA5E,EAAA,GAAS,CAAC,OAAAzH,EAAA,GAAGqM,GAAOzM,KAAK+L,YAAYwB,UAAUd,MAClE,OAAAvH,EAAA,GAAI,EAAE2H,MACJ7M,KAAKgI,YAAY6E,EAAaO,GAC9B,MAAMI,EAAkBJ,EAAMhL,KAAM8F,GAASA,EAAKzG,KAAOoL,EAAYpL,IACjE+L,GACFxN,KAAKqF,gBAAgB,OAAD,wBAAMmI,GAAoBX,GAAe,cAIlEtK,YAEH0D,EACGI,IAAI,cACJC,aAAahG,KAAK,OAAAC,EAAA,GAAKgG,KAAWmF,WAAYnF,MAC9CjG,KAEC,OAAAsG,EAAA,GAAU5G,KAAKuE,YACf,OAAAhE,EAAA,GAAKqH,GAAa,eAAEnG,GAAIuE,EAAEvE,IAAOmG,IACjC,OAAA1C,EAAA,GAAK2H,IACH7M,KAAKgI,YAAY6E,EAAaO,GAC9B,MAAMI,EAAkBJ,EAAMhL,KAAM8F,GAASA,EAAKzG,KAAOoL,EAAYpL,IACjE+L,GACFxN,KAAKqF,gBAAgB,OAAD,wBAAMmI,GAAoBX,GAAe,cAIlEtK,YAEHvC,KAAK+D,KAAKoE,KAAKlC,KAIX,YAAY4G,EAA+BO,GACjD,MAAMK,EAAc,IAAIL,GAClB/E,EAAQoF,EAAYnF,UAAWmE,GAASA,EAAKhL,KAAOoL,EAAYpL,IACtEgM,EAAYpF,GAAS,OAAH,wBAAQoF,EAAYpF,IAAWwE,GACjD7M,KAAKgM,OAAS,OAAA5L,EAAA,GAAGqN,GAGX,YAAYC,EAAgBN,GAClCpN,KAAKgM,OAAS,OAAA5L,EAAA,GAAG,IAAIgN,EAAM/J,OAAQoJ,GAASA,EAAKhL,KAAOiM,KAAUpN,KAChE,OAAA4E,EAAA,GAAI,KACF,MAAMsD,EAAexI,KAAK+D,KAAKW,SAAS4D,UAAWG,GAAMA,EAAEtF,MAAM1B,KAAOiM,GACpElF,GACFxI,KAAK+D,KAAK2E,SAASF,MAMnB,gBAAgBiE,EAAwB9D,GAC9C3I,KAAK2D,oBAAoB0B,gBAAgB,CACvC1D,MAAO3B,KAAKyE,gBACZiB,KAAM,SAAS+G,EAAKnH,kBAAkBqD,Q,6CA1M/BmD,GAAuB,mD,uBAAvBA,EAAuB,wrC,GAAA,MDrBpC,iC,gBA+EA,wBAGA,6B,gBAEA,6B,gBApFe,sEA+ER,+BAGW,iDAEP,oC,s1DC/DJ,G,6CCAC,aACE,gBAAgB,QAAW,OAC3B,aAAI,QAAe,OACnB,aAAI,Q,sBAA6B,OACjC,gBAAwB,iB,iBAC6B,OACvD,Q,6CALkB,kBACZ,qBACA,+BAEG,gE,wCAhBf,QACE,kBACE,gBACE,aACE,eAAgB,YAAC,OACjB,eAAgB,oBAAS,OACzB,eAAgB,oBAAS,OACzB,gBAAgB,mBAAO,OACzB,OACF,OACA,iBACE,wBAOF,OACF,OAEA,qBACQ,8DAAwB,wBAAY,OAC9C,O,uBAZ2B,8CAAuB,2B,sBAclD,kBCvBF,MAAM6B,GAAiB,CACrB,CACEC,KAAM,GACNC,UAAW,EACX3M,YAAa,CAAC,GACd4M,SAAU,CACR,CAAEF,KAAM,GAAIC,UAAW,GACvB,CACED,KAAM,QACNE,SAAU,CACR,CAAEF,KAAM,SAAUC,UCTrB,M,MAAME,EAWX,YACmBhC,EACAlD,EACAlF,GAFA,KAAAoI,cACA,KAAAlD,eACA,KAAAlF,sBAXZ,KAAAmF,aAAe,IAAIC,IAInB,KAAAjF,SAAU,EACV,KAAAlB,eAAiB5C,KAAK2D,oBAAoBO,qBACzC,KAAAK,WAAa,IAAIC,EAAA,EALzB,yBACE,OAAOiD,MAAMuB,KAAKhJ,KAAKiJ,eAAiB,IAYnC,cACLjJ,KAAKuE,WAAWrB,OAChBlD,KAAKuE,WAAWI,WAGX,YAAYuE,GACjBlJ,KAAKiJ,cAAgBC,EAAMC,OAAOC,OAAS,GAE3CpJ,KAAKqJ,mBAAmBtD,QAASuD,IAC/BtJ,KAAK8I,aAAaS,IAChBD,EAAKhE,KACL,IAAIkE,QAAQ,CAACC,EAASC,KACpB,MAAMC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,KACdJ,EAAQzJ,KAAK6I,aAAaiB,uBAAuBH,EAAOI,UAE1DJ,EAAOK,QAAWC,IAChBP,EAAOO,IAGTN,EAAOO,cAAcZ,QAMtB,cACL,IAAKtJ,KAAKiJ,cACR,OAGF,MAAMkB,EAAW,IAAIC,SACrB,IAAK,MAAMd,KAAQtJ,KAAKqJ,mBACtBc,EAASE,OAAO,QAASf,GAG3BtJ,KAAK+L,YACFiC,YAAY7D,GACZ7J,KACC,OAAA4E,EAAA,GAAI,IAAOlF,KAAK8D,SAAU,GAC1B,OAAAnD,EAAA,GAAYsJ,GAAM,OAAAM,EAAA,GAAWN,IAC7B,OAAAzE,EAAA,GAAS,KACPxF,KAAKwK,sBAAsBxK,KAAKqJ,mBAAmB1C,QACnD3G,KAAK8D,SAAU,EACf9D,KAAKyK,QAAQC,cAAcvH,MAAQ,QAGtCZ,YAGE,QAAQ1C,EAAWqI,GACxB,OAAOA,EAAK5C,KAGN,sBAAsB2I,GAC5BjO,KAAK2D,oBAAoB0B,gBAAgB,CACvC1D,MAAO,oBACPqB,UAAW,IAAIC,KACfyC,KAASuI,EAAH,gC,6CA3ECF,GAAwB,+B,uBAAxBA,EAAwB,6D,GAAA,K,ygBFbrC,gBACE,oBAKO,iCAAU,EAAAnD,YAAA,KALjB,OAMA,mBACQ,+CAAS,UAAe,uBAAY,OAE5C,iCAyBA,wBAEF,OAEA,6B,sBA7BiB,+FAyBR,+BAIS,mD,uGE1BX,IDUG,CAAEgD,KAAM,GAAIC,UAAW,MAG3B,CAAED,KAAM,aAAcC,UAAW,IACjC,CACED,KAAM,cACNE,SAAU,CACR,CAAEF,KAAM,SAAUC,UAAW,GAC7B,CAAED,KAAM,GAAIC,UAAW,QAW1B,a,MAAMK,G,8BAAAA,I,oDAAAA,IAAkB,SAHpB,CAAC,IAAaC,SAASR,KACtB,O,GAEL,G,iBEjBA,a,MAAMS,G,8BAAAA,I,oDAAAA,IAAW,SAFb,CAAC,IAAc,GAAoB,S,GAEvC","file":"x","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\n\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(private readonly authService: AuthService, private readonly router: Router) {}\r\n\r\n  public canActivate(_: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\r\n    const sessionData = this.authService.getSessionData();\r\n    const existingToken = this.authService.getToken();\r\n\r\n    if (!sessionData) {\r\n      if (!existingToken) {\r\n        return of(false).pipe(map(() => this.redirect(state.url)));\r\n      }\r\n\r\n      return this.authService.verifyToken().pipe(\r\n        map((data) => {\r\n          if (!data) {\r\n            return this.redirect(state.url);\r\n          } else {\r\n            return true;\r\n          }\r\n        }),\r\n        catchError(() => of(this.redirect(state.url)))\r\n      );\r\n    } else {\r\n      return of(true);\r\n    }\r\n  }\r\n\r\n  private redirect(url: string) {\r\n    this.router.navigate(['login'], { queryParams: { redirectUrl: url } });\r\n    return false;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\n\r\nimport { AuthService } from '../services/auth.service';\r\nimport { AuthGuard } from './auth.guard';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AdminGuard implements CanActivate {\r\n  constructor(\r\n    private readonly authService: AuthService,\r\n    private readonly router: Router,\r\n    private readonly authGuard: AuthGuard\r\n  ) {}\r\n\r\n  public canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\r\n    const isAuthorized$ = this.authGuard.canActivate(route, state);\r\n    return isAuthorized$.pipe(\r\n      map((isAuthorized) => {\r\n        if (!isAuthorized) {\r\n          return this.redirect(state.url);\r\n        }\r\n\r\n        const res = this.authService.getSessionData()?.user?.isAdmin;\r\n        if (!res) {\r\n          return this.redirect(state.url);\r\n        } else {\r\n          return true;\r\n        }\r\n      }),\r\n      catchError(() => of(this.redirect(state.url)))\r\n    );\r\n  }\r\n  private redirect(url: string) {\r\n    this.router.navigate(['login'], { queryParams: { redirectUrl: url } });\r\n    return false;\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'bd-admin-home',\r\n  templateUrl: './admin-home.component.html',\r\n  styleUrls: ['./admin-home.component.scss'],\r\n})\r\nexport class AdminHomeComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n","<div class=\"d-flex justify-content-center align-items-center my-5\">\r\n  <h5>Please select a tool above</h5>\r\n</div>","import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { AuthService } from '../../core/services/auth.service';\r\nimport { TabId } from '../../models/enums/tab-id';\r\nimport { NavTab } from '../../models/interfaces/nav-tab';\r\n\r\n@Component({\r\n  selector: 'bd-admin',\r\n  templateUrl: './admin.component.html',\r\n  styleUrls: ['./admin.component.scss'],\r\n})\r\nexport class AdminComponent {\r\n  public adminTabs: NavTab[] = [\r\n    {\r\n      id: TabId.IconManagement,\r\n      title: 'Icon Management',\r\n      url: '/admin/icons',\r\n    },\r\n    {\r\n      id: TabId.IconsBulkUpload,\r\n      title: 'Icons Bulk Upload',\r\n      url: '/admin/icons/upload',\r\n    },\r\n    {\r\n      id: TabId.CategoryManagement,\r\n      title: 'Category Management',\r\n      url: '/admin/categories',\r\n    },\r\n    {\r\n      id: TabId.BackgroundManagement,\r\n      title: 'Background Management',\r\n      url: '/admin/backgrounds',\r\n    },\r\n    {\r\n      id: TabId.BgBulkUpload,\r\n      title: 'Backgrounds Bulk Upload',\r\n      url: '/admin/backgrounds/upload',\r\n    },\r\n  ];\r\n  // public activeTabId: TabId;\r\n  public TabId = TabId;\r\n  public get username() {\r\n    return this.authService.username || 'ADMIN';\r\n  }\r\n\r\n  constructor(private readonly authService: AuthService, private readonly router: Router) {}\r\n\r\n  public onTabChange(tabId: TabId) {\r\n    const tab = this.adminTabs.find((t) => t.id === tabId);\r\n    this.router.navigate([tab.url]);\r\n  }\r\n\r\n  public toWebsite() {\r\n    this.router.navigate(['']);\r\n  }\r\n\r\n  public logout() {\r\n    this.authService.logout().subscribe();\r\n  }\r\n}\r\n","<div class=\"position-fixed w-100 header-wrapper\">\r\n  <div class=\"d-flex justify-content-end align-items-center p-2 border-bottom\">\r\n    <a class=\"mr-auto app-logo\"\r\n       routerLink=\"\"></a>\r\n    <h5 class=\"m-0 mr-3\">Welcome, {{ username }}</h5>\r\n    <button class=\"btn btn-primary mr-3\"\r\n            (click)=\"toWebsite()\">Go to Website</button>\r\n    <button class=\"btn btn-primary\"\r\n            (click)=\"logout()\">Logout</button>\r\n  </div>\r\n\r\n  <bd-tabs [tabs]=\"adminTabs\"\r\n           [snap]=\"'bottom'\"\r\n           (tabChange)=\"onTabChange($event)\"\r\n           class=\"pt-3\"></bd-tabs>\r\n</div>\r\n\r\n<div class=\"d-flex flex-column content-wrapper\">\r\n  <router-outlet></router-outlet>\r\n</div>","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Subject } from 'rxjs';\r\nimport { Notification } from '../../models/interfaces/notification';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class NotificationService {\r\n  public readonly DEFAULT_DURATION = 4000;\r\n  public get notificationsChanged() {\r\n    return this.notifications$.asObservable();\r\n  }\r\n  private notifications$ = new BehaviorSubject<Notification[]>([]);\r\n\r\n  public addNotification(notification: Notification) {\r\n    if (!notification.createdAt) {\r\n      notification.createdAt = new Date();\r\n    }\r\n\r\n    this.notifications$.next([...this.notifications$.value, notification]);\r\n\r\n    setTimeout(\r\n      () =>\r\n        this.notifications$.next(\r\n          this.notifications$.value.filter((n) => n.createdAt.getTime() !== notification.createdAt.getTime())\r\n        ),\r\n      notification.duration || this.DEFAULT_DURATION\r\n    );\r\n  }\r\n}\r\n","<ng-container *ngIf=\"(backgrounds$ | async)?.length && !loading\">\r\n  <table class=\"table\">\r\n    <thead>\r\n      <tr>\r\n        <th scope=\"col\">#</th>\r\n        <th scope=\"col\">Background</th>\r\n        <th scope=\"col\">Name</th>\r\n        <th scope=\"col\">Tags <span>(split with \",\")</span></th>\r\n        <th scope=\"col\">URL</th>\r\n        <th scope=\"col\">Created At</th>\r\n        <th scope=\"col\">Updated At</th>\r\n        <th scope=\"col\"></th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      <ng-container *ngFor=\"let background of backgroundForms; let i = index\">\r\n        <tr [formGroup]=\"background\">\r\n          <td scope=\"row\"\r\n              class=\"cell-id\"\r\n              (click)=\"copyId(background.get('id').value)\"><small title=\"Click to copy\">{{ background.get('id').value }}</small></td>\r\n          <td><img class=\"background-preview\"\r\n                 [src]=\"background.get('url').value\"></td>\r\n          <td class=\"cell-name\">\r\n            <bd-text-input formControlName=\"name\"\r\n                           [cssClass]=\"getInputCss(background.get('name'))\"></bd-text-input>\r\n          </td>\r\n          <td>\r\n            <textarea formControlName=\"tags\"></textarea>\r\n          </td>\r\n          <td>\r\n            <bd-text-input formControlName=\"url\"\r\n                           [cssClass]=\"getInputCss(background.get('url'))\"></bd-text-input>\r\n          </td>\r\n          <td><small>{{ background.get('createdAt').value | date:'short'}}</small></td>\r\n          <td><small>{{ (background.get('updatedAt').value | date:'short') || '-' }}</small></td>\r\n          <td class=\"cell-delete\">\r\n            <button class=\"btn btn-danger btn-icon icon-cross\"\r\n                    (click)=\"openDeleteModal(background.value)\"></button>\r\n          </td>\r\n        </tr>\r\n      </ng-container>\r\n    </tbody>\r\n  </table>\r\n</ng-container>\r\n\r\n<span *ngIf=\"loading\"\r\n      class=\"spinner\"></span>\r\n\r\n<bd-notifications [items]=\"notifications$ | async\"></bd-notifications>\r\n\r\n<bd-modal *ngIf=\"isDeleting\"\r\n          modalTitle=\"Delete existing background\"\r\n          (closed)=\"isDeleting = false\"\r\n          (saved)=\"deleteBackground()\">\r\n  <div class=\"container\">\r\n    <p>Are you sure you want to delete background \"{{deleteBackgroundControl.value.name}}\"?</p>\r\n  </div>\r\n</bd-modal>\r\n","import { Component, OnDestroy } from '@angular/core';\r\nimport { AbstractControl, FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ClipboardService } from 'ngx-clipboard';\r\nimport { forkJoin, merge, of, Subject } from 'rxjs';\r\nimport { debounceTime, distinctUntilChanged, filter, finalize, map, mergeMap, takeUntil, tap } from 'rxjs/operators';\r\n\r\nimport { BackgroundService } from '../../../core/services/background.service';\r\nimport { NotificationService } from '../../../core/services/notification.service';\r\nimport { BackgroundDto } from '../../../models/dto/background-dto';\r\nimport { ArrayHelper } from '../../../shared/helpers/array.helper';\r\nimport { DataHelper } from '../../../shared/helpers/data.helper';\r\nimport { TextHelper } from '../../../shared/helpers/text.helper';\r\n\r\n@Component({\r\n  selector: 'bd-background-management',\r\n  templateUrl: './background-management.component.html',\r\n  styleUrls: ['./background-management.component.scss'],\r\n})\r\nexport class BackgroundManagementComponent implements OnDestroy {\r\n  public loading = false;\r\n  public form = new FormArray([]);\r\n  public backgrounds$ = this.fetchBackgrounds();\r\n  public notifications$ = this.notificationService.notificationsChanged;\r\n  public get backgroundForms() {\r\n    return this.form.controls as FormGroup[];\r\n  }\r\n  public isDeleting = false;\r\n  public deleteBackgroundControl = this.fb.control([null, Validators.required]);\r\n  private destroyed$ = new Subject<void>();\r\n  private readonly COMPONENT_TITLE = 'Background Management';\r\n\r\n  constructor(\r\n    private readonly backgroundService: BackgroundService,\r\n    private readonly notificationService: NotificationService,\r\n    private readonly fb: FormBuilder,\r\n    private readonly clipboardService: ClipboardService\r\n  ) {}\r\n\r\n  public ngOnDestroy() {\r\n    this.destroyed$.next();\r\n    this.destroyed$.complete();\r\n  }\r\n\r\n  public getInputCss(backgroundFieldControl: AbstractControl) {\r\n    const cssClass = 'w-100 text-small';\r\n    return backgroundFieldControl.invalid ? `${cssClass} is-invalid` : cssClass;\r\n  }\r\n\r\n  public openDeleteModal(background: BackgroundDto) {\r\n    this.deleteBackgroundControl.setValue(background);\r\n    this.isDeleting = true;\r\n  }\r\n\r\n  public deleteBackground() {\r\n    this.loading = true;\r\n    this.backgroundService\r\n      .deleteBackground(this.deleteBackgroundControl.value.id)\r\n      .pipe(\r\n        mergeMap(() => this.backgrounds$),\r\n        tap((backgrounds) => {\r\n          this.localDelete(this.deleteBackgroundControl.value.id, backgrounds);\r\n          this.addNotification({ name: this.deleteBackgroundControl.value.name }, 'deleted');\r\n          this.deleteBackgroundControl.reset();\r\n        }),\r\n        finalize(() => (this.loading = false))\r\n      )\r\n      .subscribe();\r\n\r\n    this.isDeleting = false;\r\n  }\r\n\r\n  public copyId(id: string) {\r\n    this.clipboardService.copy(id);\r\n    this.notificationService.addNotification({\r\n      title: this.COMPONENT_TITLE,\r\n      body: `Id '${id}' has been copied to clipboard.`,\r\n    });\r\n  }\r\n\r\n  private fetchBackgrounds() {\r\n    this.loading = true;\r\n\r\n    return this.backgroundService.getBackgrounds(true).pipe(\r\n      map((backgrounds) => ArrayHelper.sortAlphaNumeric(backgrounds, 'name')),\r\n      tap((backgrounds) => this.createForm(backgrounds)),\r\n      finalize(() => (this.loading = false))\r\n    );\r\n  }\r\n\r\n  private createForm(backgrounds: BackgroundDto[]) {\r\n    this.form.clear();\r\n\r\n    backgrounds.forEach((i) => {\r\n      const group = this.fb.group({\r\n        id: [i.id, Validators.required],\r\n        name: [i.name, Validators.required],\r\n        tags: [i.tags],\r\n        url: [i.url, Validators.required],\r\n        createdAt: [i.createdAt, Validators.required],\r\n        updatedAt: [i.updatedAt],\r\n      });\r\n      merge(\r\n        group.get('name').valueChanges.pipe(map((val) => ({ name: val }))),\r\n        group.get('tags').valueChanges.pipe(\r\n          map((val) => ({\r\n            tags: val\r\n              .split(',')\r\n              .map((tag: string) => tag.trim())\r\n              .filter((tag: string) => !!tag.length),\r\n          }))\r\n        ),\r\n        group.get('url').valueChanges.pipe(map((val) => ({ url: val })))\r\n      )\r\n        .pipe(\r\n          takeUntil(this.destroyed$),\r\n          filter(() => {\r\n            group.updateValueAndValidity();\r\n            return group.valid;\r\n          }),\r\n          debounceTime(TextHelper.DEFAULT_DEBOUNCE_TIME),\r\n          distinctUntilChanged((x, y) => {\r\n            const key = Object.keys(y)[0];\r\n            const oldVal = (x as any)[key];\r\n            const newVal = (y as any)[key];\r\n            const isArray = Array.isArray(oldVal);\r\n            return isArray ? DataHelper.isEqual(oldVal, newVal) : oldVal === newVal;\r\n          }),\r\n          map((changes) => ({ id: i.id, ...changes } as Partial<BackgroundDto>)),\r\n          mergeMap((background) => forkJoin([of(background), this.backgroundService.patchBackground(background)])),\r\n          tap(([updatedBackground]) => {\r\n            this.localUpdate(updatedBackground, backgrounds);\r\n            const updatedBackgroundFull = backgrounds.find((item) => item.id === updatedBackground.id);\r\n            if (updatedBackgroundFull) {\r\n              this.addNotification({ ...updatedBackgroundFull, ...updatedBackground }, 'updated');\r\n            }\r\n          })\r\n        )\r\n        .subscribe();\r\n\r\n      this.form.push(group);\r\n    });\r\n  }\r\n\r\n  private localUpdate(updatedBackground: Partial<BackgroundDto>, backgrounds: BackgroundDto[]) {\r\n    const clonedBackgrounds = [...backgrounds];\r\n    const index = clonedBackgrounds.findIndex((background) => background.id === updatedBackground.id);\r\n    clonedBackgrounds[index] = { ...clonedBackgrounds[index], ...updatedBackground };\r\n    this.backgrounds$ = of(clonedBackgrounds);\r\n  }\r\n\r\n  private localDelete(backgroundId: string, backgrounds: BackgroundDto[]) {\r\n    this.backgrounds$ = of([...backgrounds.filter((background) => background.id !== backgroundId)]).pipe(\r\n      tap(() => {\r\n        const controlIndex = this.form.controls.findIndex((c) => c.value.id === backgroundId);\r\n        if (controlIndex) {\r\n          this.form.removeAt(controlIndex);\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  private addNotification(background: Partial<BackgroundDto>, action: 'updated' | 'deleted') {\r\n    this.notificationService.addNotification({\r\n      title: this.COMPONENT_TITLE,\r\n      body: `Background '${background.name}' has been ${action}.`,\r\n    });\r\n  }\r\n}\r\n","<div class=\"d-flex flex-column\">\r\n  <input class=\"d-none\"\r\n         type=\"file\"\r\n         multiple\r\n         accept=\"image/*\"\r\n         #files\r\n         (change)=\"selectFiles($event)\" />\r\n  <button class=\"btn btn-menu btn-icon mb-2 icon-collection\"\r\n          (click)=\"files.click()\">Select Files</button>\r\n\r\n  <ng-container *ngIf=\"selectedFilesArray?.length && !loading\">\r\n    <table class=\"table\">\r\n      <thead>\r\n        <tr>\r\n          <th scope=\"col\">#</th>\r\n          <th scope=\"col\">File Name</th>\r\n          <th scope=\"col\">File Size</th>\r\n          <th scope=\"col\">Preview</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr *ngFor=\"let file of selectedFilesArray; let i = index; trackBy: trackFn\">\r\n          <th scope=\"row\">{{ i + 1 }}</th>\r\n          <td>{{ file.name }}</td>\r\n          <td>{{ file.size | formatBytes }}</td>\r\n          <td class=\"text-center\"><img class=\"icon-preview\"\r\n                 [src]=\"filePreviews.get(file.name) | async\" /></td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n    <button class=\"btn\"\r\n            (click)=\"uploadBackgrounds()\">Upload Backgrounds</button>\r\n  </ng-container>\r\n\r\n  <span *ngIf=\"loading\"\r\n        class=\"spinner\"></span>\r\n</div>\r\n\r\n<bd-notifications [items]=\"notifications$ | async\"></bd-notifications>\r\n","import { Component, ElementRef, OnDestroy, ViewChild } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { Subject, throwError } from 'rxjs';\r\nimport { catchError, finalize, tap } from 'rxjs/operators';\r\nimport { BackgroundService } from '../../../core/services/background.service';\r\n\r\nimport { NotificationService } from '../../../core/services/notification.service';\r\n\r\n@Component({\r\n  selector: 'bd-bg-bulk-upload',\r\n  templateUrl: './bg-bulk-upload.component.html',\r\n  styleUrls: ['./bg-bulk-upload.component.scss'],\r\n})\r\nexport class BgBulkUploadComponent implements OnDestroy {\r\n  @ViewChild('files') public filesEl: ElementRef<HTMLInputElement>;\r\n  public selectedFiles: FileList;\r\n  public filePreviews = new Map<string, Promise<string>>();\r\n  public get selectedFilesArray(): File[] {\r\n    return Array.from(this.selectedFiles || []);\r\n  }\r\n  public loading = false;\r\n  public notifications$ = this.notificationService.notificationsChanged;\r\n  private destroyed$ = new Subject<void>();\r\n\r\n  constructor(\r\n    private readonly backgroundService: BackgroundService,\r\n    private readonly domSanitizer: DomSanitizer,\r\n    private readonly notificationService: NotificationService\r\n  ) {}\r\n\r\n  public ngOnDestroy() {\r\n    this.destroyed$.next();\r\n    this.destroyed$.complete();\r\n  }\r\n\r\n  public selectFiles(event: any) {\r\n    this.selectedFiles = event.target.files || [];\r\n\r\n    this.selectedFilesArray.forEach((file) => {\r\n      this.filePreviews.set(\r\n        file.name,\r\n        new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.onload = () => {\r\n            resolve(this.domSanitizer.bypassSecurityTrustUrl(reader.result as string) as string);\r\n          };\r\n          reader.onerror = (e) => {\r\n            reject(e);\r\n          };\r\n\r\n          reader.readAsDataURL(file);\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  public uploadBackgrounds() {\r\n    if (!this.selectedFiles) {\r\n      return;\r\n    }\r\n\r\n    const formData = new FormData();\r\n    for (const file of this.selectedFilesArray) {\r\n      formData.append('files', file);\r\n    }\r\n\r\n    this.backgroundService\r\n      .uploadBackgrounds(formData)\r\n      .pipe(\r\n        tap(() => (this.loading = true)),\r\n        catchError((e) => throwError(e)),\r\n        finalize(() => {\r\n          this.addUploadNotification(this.selectedFilesArray.length);\r\n          this.loading = false;\r\n          this.filesEl.nativeElement.value = null;\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  public trackFn(_: number, item: File) {\r\n    return item.name;\r\n  }\r\n\r\n  private addUploadNotification(qty: number) {\r\n    this.notificationService.addNotification({\r\n      title: 'Backgrounds Bulk Upload',\r\n      createdAt: new Date(),\r\n      body: `${qty} backgrounds have been uploaded.`,\r\n    });\r\n  }\r\n}\r\n","<button class=\"btn btn-primary btn-add\"\r\n        (click)=\"isAddingCategory = true\">Add Category</button>\r\n\r\n<ng-container *ngIf=\"(categories$ | async)?.length && !loading\">\r\n  <table class=\"table\">\r\n    <thead>\r\n      <tr>\r\n        <th scope=\"col\">#</th>\r\n        <th scope=\"col\">Name</th>\r\n        <th scope=\"col\">Description</th>\r\n        <th scope=\"col\">Created At</th>\r\n        <th scope=\"col\">Updated At</th>\r\n        <th scope=\"col\"></th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      <ng-container *ngFor=\"let category of categoryForms; let i = index\">\r\n        <tr [formGroup]=\"category\">\r\n          <td scope=\"row\"\r\n              class=\"cell-id\"\r\n              (click)=\"copyId(category.get('id').value)\"><small title=\"Click to copy\">{{ category.get('id').value }}</small></td>\r\n          <td class=\"cell-name\">\r\n            <bd-text-input formControlName=\"name\"\r\n                           [cssClass]=\"getInputCss(category.get('name'))\"></bd-text-input>\r\n          </td>\r\n          <td>\r\n            <bd-text-input formControlName=\"description\"\r\n                           [cssClass]=\"getInputCss(category.get('description'))\"></bd-text-input>\r\n          </td>\r\n          <td>{{ category.get('createdAt').value | date:'short'}}</td>\r\n          <td>{{ (category.get('updatedAt').value | date:'short') || '-' }}</td>\r\n          <td class=\"cell-delete\">\r\n            <button class=\"btn btn-danger btn-icon icon-cross\"\r\n                    (click)=\"openDeleteModal(category.value)\"></button>\r\n          </td>\r\n        </tr>\r\n      </ng-container>\r\n    </tbody>\r\n  </table>\r\n</ng-container>\r\n\r\n<span *ngIf=\"loading\"\r\n      class=\"spinner\"></span>\r\n\r\n<bd-notifications [items]=\"notifications$ | async\"></bd-notifications>\r\n\r\n<bd-modal *ngIf=\"isAddingCategory\"\r\n          modalTitle=\"Add new category\"\r\n          (closed)=\"cancelAddingCategory()\"\r\n          (saved)=\"addCategory()\">\r\n  <form [formGroup]=\"newCategoryForm\">\r\n    <div class=\"form-group\">\r\n      <label for=\"name\">Name</label>\r\n      <bd-text-input inputId=\"name\"\r\n                     formControlName=\"name\"\r\n                     placeholder=\"Category name...\"\r\n                     [cssClass]=\"getInputCss(newCategoryForm.get('name'))\"></bd-text-input>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label for=\"description\">Description</label>\r\n      <bd-text-input inputId=\"description\"\r\n                     formControlName=\"description\"\r\n                     placeholder=\"Category description...\"\r\n                     [cssClass]=\"getInputCss(newCategoryForm.get('description'))\"></bd-text-input>\r\n    </div>\r\n  </form>\r\n</bd-modal>\r\n\r\n<bd-modal *ngIf=\"isDeleting\"\r\n          modalTitle=\"Delete existing category\"\r\n          (closed)=\"isDeleting = false\"\r\n          (saved)=\"deleteCategory()\">\r\n  <div class=\"container\">\r\n    <p>Are you sure you want to delete category \"{{deleteCategoryControl.value.name}}\"?</p>\r\n  </div>\r\n</bd-modal>","import { Component, OnDestroy } from '@angular/core';\r\nimport { AbstractControl, FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ClipboardService } from 'ngx-clipboard';\r\nimport { forkJoin, merge, of, Subject } from 'rxjs';\r\nimport { debounceTime, distinctUntilChanged, filter, finalize, map, mergeMap, takeUntil, tap } from 'rxjs/operators';\r\n\r\nimport { CategoryService } from '../../../core/services/category.service';\r\nimport { NotificationService } from '../../../core/services/notification.service';\r\nimport { CategoryDto } from '../../../models/dto/category-dto';\r\nimport { ArrayHelper } from '../../../shared/helpers/array.helper';\r\nimport { TextHelper } from '../../../shared/helpers/text.helper';\r\n\r\n@Component({\r\n  selector: 'bd-category-management',\r\n  templateUrl: './category-management.component.html',\r\n  styleUrls: ['./category-management.component.scss'],\r\n})\r\nexport class CategoryManagementComponent implements OnDestroy {\r\n  public loading = false;\r\n  public form = new FormArray([]);\r\n  public categories$ = this.fetchCategories();\r\n  public notifications$ = this.notificationService.notificationsChanged;\r\n  public get categoryForms() {\r\n    return this.form.controls as FormGroup[];\r\n  }\r\n  public isAddingCategory = false;\r\n  public isDeleting = false;\r\n  public newCategoryForm = this.fb.group({\r\n    name: [null, Validators.required],\r\n    description: [null],\r\n  });\r\n  public deleteCategoryControl = this.fb.control([null, Validators.required]);\r\n  private destroyed$ = new Subject<void>();\r\n  private readonly COMPONENT_TITLE = 'Category Management';\r\n\r\n  constructor(\r\n    private readonly categoryService: CategoryService,\r\n    private readonly notificationService: NotificationService,\r\n    private readonly fb: FormBuilder,\r\n    private readonly clipboardService: ClipboardService\r\n  ) {}\r\n\r\n  public ngOnDestroy() {\r\n    this.destroyed$.next();\r\n    this.destroyed$.complete();\r\n  }\r\n\r\n  public getInputCss(categoryFieldControl: AbstractControl) {\r\n    const cssClass = 'w-100 text-small';\r\n    return categoryFieldControl.invalid ? `${cssClass} is-invalid` : cssClass;\r\n  }\r\n\r\n  public cancelAddingCategory() {\r\n    this.isAddingCategory = false;\r\n    this.newCategoryForm.reset();\r\n  }\r\n\r\n  public addCategory() {\r\n    if (this.newCategoryForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.loading = true;\r\n    this.categoryService\r\n      .addCategory(this.newCategoryForm.value)\r\n      .pipe(\r\n        mergeMap(() => this.fetchCategories()),\r\n        tap(() => {\r\n          this.addNotification({ name: this.newCategoryForm.value.name }, 'added');\r\n          this.newCategoryForm.reset();\r\n        })\r\n      )\r\n      .subscribe();\r\n\r\n    this.isAddingCategory = false;\r\n  }\r\n\r\n  public openDeleteModal(category: CategoryDto) {\r\n    this.deleteCategoryControl.setValue(category);\r\n    this.isDeleting = true;\r\n  }\r\n\r\n  public deleteCategory() {\r\n    this.loading = true;\r\n    this.categoryService\r\n      .deleteCategory(this.deleteCategoryControl.value.id)\r\n      .pipe(\r\n        mergeMap(() => this.fetchCategories()),\r\n        tap(() => {\r\n          this.addNotification({ name: this.deleteCategoryControl.value.name }, 'deleted');\r\n          this.deleteCategoryControl.reset();\r\n        })\r\n      )\r\n      .subscribe();\r\n\r\n    this.isDeleting = false;\r\n  }\r\n\r\n  public copyId(id: string) {\r\n    this.clipboardService.copy(id);\r\n    this.notificationService.addNotification({\r\n      title: this.COMPONENT_TITLE,\r\n      body: `Id '${id}' has been copied to clipboard.`,\r\n    });\r\n  }\r\n\r\n  private fetchCategories() {\r\n    this.loading = true;\r\n\r\n    return this.categoryService.getCategories(true).pipe(\r\n      map((categories) => ArrayHelper.sortAlphaNumeric(categories, 'name')),\r\n      tap((categories) => this.createForm(categories)),\r\n      finalize(() => (this.loading = false))\r\n    );\r\n  }\r\n\r\n  private createForm(categories: CategoryDto[]) {\r\n    this.form.clear();\r\n\r\n    categories.forEach((i) => {\r\n      const group = this.fb.group({\r\n        id: [i.id, Validators.required],\r\n        name: [i.name, Validators.required],\r\n        description: [i.description, Validators.required],\r\n        createdAt: [i.createdAt, Validators.required],\r\n        updatedAt: [i.updatedAt],\r\n      });\r\n      merge(\r\n        group.get('name').valueChanges.pipe(map((val) => ({ name: val }))),\r\n        group.get('description').valueChanges.pipe(map((val) => ({ description: val })))\r\n      )\r\n        .pipe(\r\n          takeUntil(this.destroyed$),\r\n          filter(() => {\r\n            group.updateValueAndValidity();\r\n            return group.valid;\r\n          }),\r\n          debounceTime(TextHelper.DEFAULT_DEBOUNCE_TIME),\r\n          distinctUntilChanged((x, y) => {\r\n            const key = Object.keys(y)[0];\r\n            return (x as any)[key] === (y as any)[key];\r\n          }),\r\n          map((changes) => ({ id: i.id, ...changes } as Partial<CategoryDto>)),\r\n          mergeMap((category) => forkJoin([of(category), this.categoryService.patchCategory(category)])),\r\n          tap(([updatedCategory]) => {\r\n            const updatedCategoryFull = categories.find((item) => item.id === updatedCategory.id);\r\n            if (updatedCategoryFull) {\r\n              this.addNotification({ ...updatedCategoryFull, ...updatedCategory }, 'updated');\r\n            }\r\n\r\n            this.categories$ = this.fetchCategories();\r\n          })\r\n        )\r\n        .subscribe();\r\n\r\n      this.form.push(group);\r\n    });\r\n  }\r\n\r\n  private addNotification(category: Partial<CategoryDto>, action: 'added' | 'updated' | 'deleted') {\r\n    this.notificationService.addNotification({\r\n      title: this.COMPONENT_TITLE,\r\n      body: `Category '${category.name}' has been ${action}.`,\r\n    });\r\n  }\r\n}\r\n","<ng-container *ngIf=\"(icons$ | async)?.length && !loading\">\r\n  <table class=\"table\">\r\n    <thead>\r\n      <tr>\r\n        <th scope=\"col\">#</th>\r\n        <th scope=\"col\">Icon</th>\r\n        <th scope=\"col\">Name</th>\r\n        <th scope=\"col\">Tags <span>(split with \",\")</span></th>\r\n        <th scope=\"col\">URL</th>\r\n        <th scope=\"col\">Type</th>\r\n        <th scope=\"col\">Premium</th>\r\n        <th scope=\"col\">Categories</th>\r\n        <th scope=\"col\">Created At</th>\r\n        <th scope=\"col\">Updated At</th>\r\n        <th scope=\"col\"></th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      <ng-container *ngFor=\"let icon of iconForms; let i = index\">\r\n        <tr [formGroup]=\"icon\">\r\n          <td scope=\"row\"\r\n              class=\"cell-id\"\r\n              (click)=\"copyId(icon.get('id').value)\"><small title=\"Click to copy\">{{ icon.get('id').value }}</small></td>\r\n          <td><img class=\"icon-preview\"\r\n                 [src]=\"icon.get('url').value\"></td>\r\n          <td class=\"cell-name\">\r\n            <bd-text-input formControlName=\"name\"\r\n                           [cssClass]=\"getInputCss(icon.get('name'))\"></bd-text-input>\r\n          </td>\r\n          <td>\r\n            <textarea formControlName=\"tags\"></textarea>\r\n          </td>\r\n          <td>\r\n            <bd-text-input formControlName=\"url\"\r\n                           [cssClass]=\"getInputCss(icon.get('url'))\"></bd-text-input>\r\n          </td>\r\n          <td class=\"cell-type\">\r\n            <bd-dropdown formControlName=\"type\"\r\n                         [items]=\"iconTypes\"\r\n                         valueProp=\"id\"\r\n                         labelProp=\"name\"\r\n                         [cssClass]=\"getInputCss(icon.get('type'))\"></bd-dropdown>\r\n          </td>\r\n          <td>\r\n            <div class=\"d-flex justify-content-center align-items-center checkbox-wrapper\"\r\n                 *ngIf=\"icon.value.type === IconType.Vector\">\r\n              <input type=\"checkbox\"\r\n                     class=\"checkbox mr-2\"\r\n                     [value]=\"icon.value.isPremium\"\r\n                     [checked]=\"icon.value.isPremium\"\r\n                     formControlName=\"isPremium\">\r\n            </div>\r\n          </td>\r\n          <td>\r\n            <div class=\"d-flex align-items-center checkbox-wrapper\"\r\n                 *ngFor=\"let category of categories$ | async\">\r\n              <input type=\"checkbox\"\r\n                     class=\"checkbox mr-2\"\r\n                     [value]=\"category\"\r\n                     [checked]=\"hasCategory(icon.value, category)\"\r\n                     (change)=\"toggleCategory(icon.value, category, icon)\"\r\n                     id=\"category-checkbox-{{i}}-{{category.id}}\">\r\n              <label for=\"category-checkbox-{{i}}-{{category.id}}\">\r\n                {{category.name}}\r\n              </label>\r\n            </div>\r\n          </td>\r\n          <td><small>{{ icon.get('createdAt').value | date:'short'}}</small></td>\r\n          <td><small>{{ (icon.get('updatedAt').value | date:'short') || '-' }}</small></td>\r\n          <td class=\"cell-delete\">\r\n            <button class=\"btn btn-danger btn-icon icon-cross\"\r\n                    (click)=\"openDeleteModal(icon.value)\"></button>\r\n          </td>\r\n        </tr>\r\n      </ng-container>\r\n    </tbody>\r\n  </table>\r\n</ng-container>\r\n\r\n<span *ngIf=\"loading\"\r\n      class=\"spinner\"></span>\r\n\r\n<bd-notifications [items]=\"notifications$ | async\"></bd-notifications>\r\n\r\n<bd-modal *ngIf=\"isDeleting\"\r\n          modalTitle=\"Delete existing icon\"\r\n          (closed)=\"isDeleting = false\"\r\n          (saved)=\"deleteIcon()\">\r\n  <div class=\"container\">\r\n    <p>Are you sure you want to delete icon \"{{deleteIconControl.value.name}}\"?</p>\r\n  </div>\r\n</bd-modal>\r\n","import { Component, OnDestroy } from '@angular/core';\r\nimport { AbstractControl, FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ClipboardService } from 'ngx-clipboard';\r\nimport { forkJoin, merge, Observable, of, Subject } from 'rxjs';\r\nimport { debounceTime, distinctUntilChanged, filter, finalize, map, mergeMap, takeUntil, tap } from 'rxjs/operators';\r\n\r\nimport { CategoryService } from '../../../core/services/category.service';\r\nimport { IconService } from '../../../core/services/icon.service';\r\nimport { NotificationService } from '../../../core/services/notification.service';\r\nimport { CategoryDto } from '../../../models/dto/category-dto';\r\nimport { IconDto } from '../../../models/dto/icon-dto';\r\nimport { IconType } from '../../../models/enums/icon-type';\r\nimport { ArrayHelper } from '../../../shared/helpers/array.helper';\r\nimport { DataHelper } from '../../../shared/helpers/data.helper';\r\nimport { TextHelper } from '../../../shared/helpers/text.helper';\r\n\r\n@Component({\r\n  selector: 'bd-icon-management',\r\n  templateUrl: './icon-management.component.html',\r\n  styleUrls: ['./icon-management.component.scss'],\r\n})\r\nexport class IconManagementComponent implements OnDestroy {\r\n  public loading = false;\r\n  public form = new FormArray([]);\r\n  public icons$ = this.fetchIcons();\r\n  public IconType = IconType;\r\n  public iconTypes = Object.entries(IconType).map(([key, value]) => ({ id: value, name: key }));\r\n  public categories$ = this.categoryService.getCategories();\r\n  public notifications$ = this.notificationService.notificationsChanged;\r\n  public get iconForms() {\r\n    return this.form.controls as FormGroup[];\r\n  }\r\n  public isDeleting = false;\r\n  public deleteIconControl = this.fb.control([null, Validators.required]);\r\n  private destroyed$ = new Subject<void>();\r\n  private readonly COMPONENT_TITLE = 'Icon Management';\r\n\r\n  constructor(\r\n    private readonly iconService: IconService,\r\n    private readonly categoryService: CategoryService,\r\n    private readonly notificationService: NotificationService,\r\n    private readonly fb: FormBuilder,\r\n    private readonly clipboardService: ClipboardService\r\n  ) {}\r\n\r\n  public ngOnDestroy() {\r\n    this.destroyed$.next();\r\n    this.destroyed$.complete();\r\n  }\r\n\r\n  public getIconType(type: IconType) {\r\n    switch (type) {\r\n      case IconType.Raster:\r\n        return 'Raster';\r\n      case IconType.Vector:\r\n        return 'Vector';\r\n      default:\r\n        return '-';\r\n    }\r\n  }\r\n\r\n  public hasCategory(icon: IconDto, category: CategoryDto) {\r\n    return icon.categories?.some((cat) => cat.id === category.id);\r\n  }\r\n\r\n  public toggleCategory(icon: IconDto, category: CategoryDto, iconControl: FormGroup) {\r\n    let updatedIcon: Partial<IconDto>;\r\n    let obs$: Observable<any>;\r\n\r\n    if (this.hasCategory(icon, category)) {\r\n      updatedIcon = { id: icon.id, categories: icon.categories.filter((cat) => cat.id !== category.id) };\r\n      obs$ = this.iconService.deleteIconCategory(icon.id, category.id);\r\n    } else {\r\n      updatedIcon = { id: icon.id, categories: [...icon.categories, category] };\r\n      obs$ = this.iconService.addIconCategory(icon.id, category.id);\r\n    }\r\n\r\n    return obs$.pipe(tap(() => iconControl.get('categories').setValue(updatedIcon.categories))).subscribe();\r\n  }\r\n\r\n  public getInputCss(iconFieldControl: AbstractControl) {\r\n    const cssClass = 'w-100 text-small';\r\n    return iconFieldControl.invalid ? `${cssClass} is-invalid` : cssClass;\r\n  }\r\n\r\n  public openDeleteModal(icon: IconDto) {\r\n    this.deleteIconControl.setValue(icon);\r\n    this.isDeleting = true;\r\n  }\r\n\r\n  public deleteIcon() {\r\n    this.loading = true;\r\n    this.iconService\r\n      .deleteIcon(this.deleteIconControl.value.id)\r\n      .pipe(\r\n        mergeMap(() => this.icons$),\r\n        tap((icons) => {\r\n          this.localDelete(this.deleteIconControl.value.id, icons);\r\n          this.addNotification({ name: this.deleteIconControl.value.name }, 'deleted');\r\n          this.deleteIconControl.reset();\r\n        }),\r\n        finalize(() => (this.loading = false))\r\n      )\r\n      .subscribe();\r\n\r\n    this.isDeleting = false;\r\n  }\r\n\r\n  public copyId(id: string) {\r\n    this.clipboardService.copy(id);\r\n    this.notificationService.addNotification({\r\n      title: this.COMPONENT_TITLE,\r\n      body: `Id '${id}' has been copied to clipboard.`,\r\n    });\r\n  }\r\n\r\n  private fetchIcons() {\r\n    this.loading = true;\r\n\r\n    return this.iconService.getIcons({}, true).pipe(\r\n      map((icons) => ArrayHelper.sortAlphaNumeric(icons, 'name')),\r\n      tap((icons) => this.createForm(icons)),\r\n      finalize(() => (this.loading = false))\r\n    );\r\n  }\r\n\r\n  private createForm(icons: IconDto[]) {\r\n    this.form.clear();\r\n\r\n    icons.forEach((i) => {\r\n      const group = this.fb.group({\r\n        id: [i.id, Validators.required],\r\n        name: [i.name, Validators.required],\r\n        tags: [i.tags],\r\n        url: [i.url, Validators.required],\r\n        type: [i.type, Validators.required],\r\n        isPremium: [i.isPremium, Validators.required],\r\n        categories: [i.categories],\r\n        createdAt: [i.createdAt, Validators.required],\r\n        updatedAt: [i.updatedAt],\r\n      });\r\n      merge(\r\n        group.get('name').valueChanges.pipe(map((val) => ({ name: val }))),\r\n        group.get('tags').valueChanges.pipe(\r\n          map((val) => ({\r\n            tags: val\r\n              .split(',')\r\n              .map((tag: string) => tag.trim())\r\n              .filter((tag: string) => !!tag.length),\r\n          }))\r\n        ),\r\n        group.get('url').valueChanges.pipe(map((val) => ({ url: val }))),\r\n        group.get('type').valueChanges.pipe(map((val) => ({ type: val }))),\r\n        group.get('isPremium').valueChanges.pipe(map((val) => ({ isPremium: val })))\r\n      )\r\n        .pipe(\r\n          takeUntil(this.destroyed$),\r\n          filter(() => {\r\n            group.updateValueAndValidity();\r\n            return group.valid;\r\n          }),\r\n          debounceTime(TextHelper.DEFAULT_DEBOUNCE_TIME),\r\n          distinctUntilChanged((x, y) => {\r\n            const key = Object.keys(y)[0];\r\n            const oldVal = (x as any)[key];\r\n            const newVal = (y as any)[key];\r\n            const isArray = Array.isArray(oldVal);\r\n            return isArray ? DataHelper.isEqual(oldVal, newVal) : oldVal === newVal;\r\n          }),\r\n          map((changes) => ({ id: i.id, ...changes } as Partial<IconDto>)),\r\n          mergeMap((icon) => forkJoin([of(icon), this.iconService.patchIcon(icon)])),\r\n          tap(([updatedIcon]) => {\r\n            this.localUpdate(updatedIcon, icons);\r\n            const updatedIconFull = icons.find((item) => item.id === updatedIcon.id);\r\n            if (updatedIconFull) {\r\n              this.addNotification({ ...updatedIconFull, ...updatedIcon }, 'updated');\r\n            }\r\n          })\r\n        )\r\n        .subscribe();\r\n\r\n      group\r\n        .get('categories')\r\n        .valueChanges.pipe(map((val) => ({ categories: val })))\r\n        .pipe(\r\n          // TODO: reuse shared pipe elements\r\n          takeUntil(this.destroyed$),\r\n          map((changes) => ({ id: i.id, ...changes } as Partial<IconDto>)),\r\n          tap((updatedIcon) => {\r\n            this.localUpdate(updatedIcon, icons);\r\n            const updatedIconFull = icons.find((item) => item.id === updatedIcon.id);\r\n            if (updatedIconFull) {\r\n              this.addNotification({ ...updatedIconFull, ...updatedIcon }, 'updated');\r\n            }\r\n          })\r\n        )\r\n        .subscribe();\r\n\r\n      this.form.push(group);\r\n    });\r\n  }\r\n\r\n  private localUpdate(updatedIcon: Partial<IconDto>, icons: IconDto[]) {\r\n    const clonedIcons = [...icons];\r\n    const index = clonedIcons.findIndex((icon) => icon.id === updatedIcon.id);\r\n    clonedIcons[index] = { ...clonedIcons[index], ...updatedIcon };\r\n    this.icons$ = of(clonedIcons);\r\n  }\r\n\r\n  private localDelete(iconId: string, icons: IconDto[]) {\r\n    this.icons$ = of([...icons.filter((icon) => icon.id !== iconId)]).pipe(\r\n      tap(() => {\r\n        const controlIndex = this.form.controls.findIndex((c) => c.value.id === iconId);\r\n        if (controlIndex) {\r\n          this.form.removeAt(controlIndex);\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  private addNotification(icon: Partial<IconDto>, action: 'updated' | 'deleted') {\r\n    this.notificationService.addNotification({\r\n      title: this.COMPONENT_TITLE,\r\n      body: `Icon '${icon.name}' has been ${action}.`,\r\n    });\r\n  }\r\n}\r\n","<div class=\"d-flex flex-column\">\r\n  <input class=\"d-none\"\r\n         type=\"file\"\r\n         multiple\r\n         accept=\"image/*\"\r\n         #files\r\n         (change)=\"selectFiles($event)\" />\r\n  <button class=\"btn btn-menu btn-icon mb-2 icon-collection\"\r\n          (click)=\"files.click()\">Select Files</button>\r\n\r\n  <ng-container *ngIf=\"selectedFilesArray?.length && !loading\">\r\n    <table class=\"table\">\r\n      <thead>\r\n        <tr>\r\n          <th scope=\"col\">#</th>\r\n          <th scope=\"col\">File Name</th>\r\n          <th scope=\"col\">File Size</th>\r\n          <th scope=\"col\">Preview</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr *ngFor=\"let file of selectedFilesArray; let i = index; trackBy: trackFn\">\r\n          <th scope=\"row\">{{ i + 1 }}</th>\r\n          <td>{{ file.name }}</td>\r\n          <td>{{ file.size | formatBytes }}</td>\r\n          <td class=\"text-center\"><img class=\"icon-preview\"\r\n                 [src]=\"filePreviews.get(file.name) | async\" /></td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n    <button class=\"btn\"\r\n            (click)=\"uploadIcons()\">Upload Icons</button>\r\n  </ng-container>\r\n\r\n  <span *ngIf=\"loading\"\r\n        class=\"spinner\"></span>\r\n</div>\r\n\r\n<bd-notifications [items]=\"notifications$ | async\"></bd-notifications>","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { AdminGuard } from '../../core/guards/admin.guard';\r\nimport { AdminHomeComponent } from './admin-home/admin-home.component';\r\nimport { AdminComponent } from './admin.component';\r\nimport { BackgroundManagementComponent } from './background-management/background-management.component';\r\nimport { BgBulkUploadComponent } from './bg-bulk-upload/bg-bulk-upload.component';\r\nimport { CategoryManagementComponent } from './category-management/category-management.component';\r\nimport { IconManagementComponent } from './icon-management/icon-management.component';\r\nimport { IconsBulkUploadComponent } from './icons-bulk-upload/icons-bulk-upload.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: AdminComponent,\r\n    canActivate: [AdminGuard],\r\n    children: [\r\n      { path: '', component: AdminHomeComponent },\r\n      {\r\n        path: 'icons',\r\n        children: [\r\n          { path: 'upload', component: IconsBulkUploadComponent },\r\n          { path: '', component: IconManagementComponent },\r\n        ],\r\n      },\r\n      { path: 'categories', component: CategoryManagementComponent },\r\n      {\r\n        path: 'backgrounds',\r\n        children: [\r\n          { path: 'upload', component: BgBulkUploadComponent },\r\n          { path: '', component: BackgroundManagementComponent },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AdminRoutingModule {}\r\n","import { Component, ElementRef, OnDestroy, ViewChild } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { Subject, throwError } from 'rxjs';\r\nimport { catchError, finalize, tap } from 'rxjs/operators';\r\n\r\nimport { IconService } from '../../../core/services/icon.service';\r\nimport { NotificationService } from '../../../core/services/notification.service';\r\n\r\n@Component({\r\n  selector: 'bd-icons-bulk-upload',\r\n  templateUrl: './icons-bulk-upload.component.html',\r\n  styleUrls: ['./icons-bulk-upload.component.scss'],\r\n})\r\nexport class IconsBulkUploadComponent implements OnDestroy {\r\n  @ViewChild('files') public filesEl: ElementRef<HTMLInputElement>;\r\n  public selectedFiles: FileList;\r\n  public filePreviews = new Map<string, Promise<string>>();\r\n  public get selectedFilesArray(): File[] {\r\n    return Array.from(this.selectedFiles || []);\r\n  }\r\n  public loading = false;\r\n  public notifications$ = this.notificationService.notificationsChanged;\r\n  private destroyed$ = new Subject<void>();\r\n\r\n  constructor(\r\n    private readonly iconService: IconService,\r\n    private readonly domSanitizer: DomSanitizer,\r\n    private readonly notificationService: NotificationService\r\n  ) {}\r\n\r\n  public ngOnDestroy() {\r\n    this.destroyed$.next();\r\n    this.destroyed$.complete();\r\n  }\r\n\r\n  public selectFiles(event: any) {\r\n    this.selectedFiles = event.target.files || [];\r\n\r\n    this.selectedFilesArray.forEach((file) => {\r\n      this.filePreviews.set(\r\n        file.name,\r\n        new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.onload = () => {\r\n            resolve(this.domSanitizer.bypassSecurityTrustUrl(reader.result as string) as string);\r\n          };\r\n          reader.onerror = (e) => {\r\n            reject(e);\r\n          };\r\n\r\n          reader.readAsDataURL(file);\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  public uploadIcons() {\r\n    if (!this.selectedFiles) {\r\n      return;\r\n    }\r\n\r\n    const formData = new FormData();\r\n    for (const file of this.selectedFilesArray) {\r\n      formData.append('files', file);\r\n    }\r\n\r\n    this.iconService\r\n      .uploadIcons(formData)\r\n      .pipe(\r\n        tap(() => (this.loading = true)),\r\n        catchError((e) => throwError(e)),\r\n        finalize(() => {\r\n          this.addUploadNotification(this.selectedFilesArray.length);\r\n          this.loading = false;\r\n          this.filesEl.nativeElement.value = null;\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  public trackFn(_: number, item: File) {\r\n    return item.name;\r\n  }\r\n\r\n  private addUploadNotification(iconsQty: number) {\r\n    this.notificationService.addNotification({\r\n      title: 'Icons Bulk Upload',\r\n      createdAt: new Date(),\r\n      body: `${iconsQty} icons have been uploaded.`,\r\n    });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { AdminRoutingModule } from './admin-routing.module';\r\nimport { AdminComponent } from './admin.component';\r\nimport { SharedModule } from '../../shared/shared.module';\r\nimport { IconsBulkUploadComponent } from './icons-bulk-upload/icons-bulk-upload.component';\r\nimport { IconManagementComponent } from './icon-management/icon-management.component';\r\nimport { AdminHomeComponent } from './admin-home/admin-home.component';\r\nimport { CategoryManagementComponent } from './category-management/category-management.component';\r\nimport { BackgroundManagementComponent } from './background-management/background-management.component';\r\nimport { BgBulkUploadComponent } from './bg-bulk-upload/bg-bulk-upload.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AdminComponent,\r\n    IconsBulkUploadComponent,\r\n    BgBulkUploadComponent,\r\n    IconManagementComponent,\r\n    AdminHomeComponent,\r\n    CategoryManagementComponent,\r\n    BackgroundManagementComponent,\r\n  ],\r\n  imports: [CommonModule, AdminRoutingModule, SharedModule],\r\n})\r\nexport class AdminModule {}\r\n"]}