{"version":3,"file":"702.f2b93f9db1dfcaf3.js","mappings":"kNAUO,IAAMA,EAAb,MAAM,QACJC,YAA6BC,EAA2CC,GAA3CC,mBAA2CA,cAEjEC,YAAYC,EAA2BC,GAC5C,MAAMC,EAAcJ,KAAKF,YAAYO,iBAC/BC,EAAgBN,KAAKF,YAAYS,WAEvC,OAAKH,GAgBII,SAAG,GAfLF,EAIEN,KAAKF,YAAYW,cAAcC,MACpCC,OAAKC,KACEA,GACIZ,KAAKa,SAASV,EAAMW,OAK/BC,OAAW,KAAMP,QAAGR,KAAKa,SAASV,EAAMW,SAXjCN,SAAG,GAAOE,MAAKC,OAAI,IAAMX,KAAKa,SAASV,EAAMW,OAkBlDD,SAASC,GACf,YAAKf,OAAOiB,SAAS,CAAC,SAAU,CAAEC,YAAa,CAAEC,YAAaJ,MACvD,gDA7BElB,GAASuB,mDAATvB,EAASwB,QAATxB,EAAS,qBAFR,SAEDA,GAAb,GCCayB,EAAb,MAAM,QACJxB,YACmBC,EACAC,EACAuB,GAFAtB,mBACAA,cACAA,iBAGZC,YAAYsB,EAA+BpB,GAEhD,OAAOqB,KADoBF,UAAUrB,YAAYsB,EAAOpB,GACnCO,MACnBC,OAAKc,YACH,OAAKA,MAI8C,QAAvCC,EAAiC,QAAjCC,OAAK7B,YAAYO,wBAAgBuB,eAAEC,YAAIC,eAAEC,UAH5C/B,KAAKa,SAASV,EAAMW,QAU/BC,OAAW,KAAMP,QAAGR,KAAKa,SAASV,EAAMW,QAGpCD,SAASC,GACf,YAAKf,OAAOiB,SAAS,CAAC,SAAU,CAAEC,YAAa,CAAEC,YAAaJ,MACvD,gDA3BEO,GAAUF,4DAAVE,EAAUD,QAAVC,EAAU,qBAFT,SAEDA,GAAb,GCJaW,EAAb,MAAM,QACJnC,eAEAoC,WAAQ,+CAHGD,8BAAkBE,qJCP/Bf,iBAAmE,QAC7DA,sCAA0BA,0BDMnBa,GAAb,2BEKO,IAAMG,EAAb,MAAM,QAkCJtC,YAA6BC,EAA2CC,GAA3CC,mBAA2CA,cAjCjEA,eAAsB,CAC3B,CACEoC,GAAIC,mBACJC,MAAO,kBACPxB,IAAK,gBAEP,CACEsB,GAAIC,oBACJC,MAAO,oBACPxB,IAAK,uBAEP,CACEsB,GAAIC,uBACJC,MAAO,sBACPxB,IAAK,qBAEP,CACEsB,GAAIC,yBACJC,MAAO,wBACPxB,IAAK,sBAEP,CACEsB,GAAIC,iBACJC,MAAO,0BACPxB,IAAK,8BAIFd,WAAQqC,IACJE,eACT,OAAOvC,KAAKF,YAAYyC,UAAY,QAK/BC,YAAYC,GACjB,MAAMC,EAAM1C,KAAK2C,UAAUC,KAAMC,GAAMA,EAAET,KAAOK,GAChDzC,KAAKD,OAAOiB,SAAS,CAAC0B,EAAI5B,MAGrBgC,YACL9C,KAAKD,OAAOiB,SAAS,CAAC,KAGjB+B,SACL/C,KAAKF,YAAYiD,SAASC,0DA9CjBb,GAAchB,iDAAdgB,EAAcD,oaCZ3Bf,iBAAiD,WAE7CA,eAEAA,gBAAqBA,SAAuBA,QAC5CA,oBACQA,gCAAS8B,gBAAa9B,yBAAaA,QAC3CA,oBACQA,gCAAS8B,aAAU9B,kBAAMA,UAGnCA,qBAESA,qCAAa8B,mBACA9B,UAGxBA,kBACEA,0BACFA,eAfyBA,0CAOdA,mCAAkB,yNDChBgB,GAAb,mKELO,IAAMe,EAAb,MAAM,QAHNrD,cAIkBG,sBAAmB,IAI3BA,oBAAiB,IAAImD,IAAgC,IAHlDC,2BACT,OAAOpD,KAAKqD,eAAeC,eAItBC,gBAAgBC,GAChBA,EAAaC,YAChBD,EAAaC,UAAY,IAAIC,MAG/B1D,KAAKqD,eAAeM,KAAK,IAAI3D,KAAKqD,eAAeO,MAAOJ,IAExDK,WACE,IACE7D,KAAKqD,eAAeM,KAClB3D,KAAKqD,eAAeO,MAAME,OAAQC,GAAMA,EAAEN,UAAUO,YAAcR,EAAaC,UAAUO,YAE7FR,EAAaS,UAAYjE,KAAKkE,gEAnBvBhB,gCAAmB9B,QAAnB8B,EAAmB,qBAFlB,SAEDA,GAAb,sFCQM/B,SACEA,gBAA6B,UAGvBA,2DAASgD,EAATC,OAASD,OAAOE,MAAe,MAAKT,SAASzC,mBAA6BA,SAAgCA,UAC9GA,cAAIA,kBACuCA,QAC3CA,iBACEA,4BAEFA,QACAA,cACEA,wBACFA,QACAA,eACEA,6BAEFA,QACAA,eAAI,YAAOA,2BAAqDA,UAChEA,eAAI,YAAOA,2BAA+DA,UAC1EA,kBAAwB,gBAEdA,2DAASmD,EAATF,OAASE,2BAAmCnD,YAG1DA,+CAxBMA,8BAG4EA,kCAEvEA,+CAGUA,wDAOAA,uDAENA,6DACAA,6FAlCrBA,SACEA,mBAAqB,UAArBA,CAAqB,OAArBA,CAAqB,UAGCA,aAACA,QACjBA,gBAAgBA,sBAAUA,QAC1BA,gBAAgBA,gBAAIA,QACpBA,iBAAgBA,kBAAKA,iBAAMA,6BAAgBA,UAC3CA,iBAAgBA,gBAAGA,QACnBA,iBAAgBA,uBAAUA,QAC1BA,iBAAgBA,uBAAUA,QAC1BA,iBACFA,UAEFA,kBACEA,mCA0BFA,UAEJA,8BA5B2CA,oEA8B3CA,4DAKAA,uBAEUA,8DAAuB,GAAvBA,CAA6B,mCACpBoD,EADoBH,MACpBG,qBACjBpD,kBAAuB,OAClBA,SAAoFA,oCAApFA,0GCrCA,IAAMqD,GAAb,MAAM,QAaJ3E,YACmB4E,EACAC,EACAC,EACAC,GAHA5E,yBACAA,2BACAA,UACAA,wBAhBZA,cAAU,EACVA,UAAO,IAAI6E,KAAU,IACrB7E,kBAAeA,KAAK8E,mBACpB9E,oBAAiBA,KAAK0E,oBAAoBtB,qBAI1CpD,iBAAa,EACbA,6BAA0BA,KAAK2E,GAAGI,QAAQ,CAAC,KAAMC,gBAChDhF,gBAAa,IAAIiF,KACRjF,qBAAkB,wBANxBkF,sBACT,OAAOlF,KAAKmF,KAAKC,SAcZC,cACLrF,KAAKsF,WAAW3B,OAChB3D,KAAKsF,WAAWC,WAGXC,YAAYC,GACjB,MAAMC,EAAW,mBACjB,OAAOD,EAAuBE,QAAU,GAAGD,eAAwBA,EAG9DE,gBAAgBC,GACrB7F,KAAK8F,wBAAwBC,SAASF,GACtC7F,KAAKgG,YAAa,EAGbC,mBACLjG,KAAKkG,SAAU,EACflG,KAAKyE,kBACFwB,iBAAiBjG,KAAK8F,wBAAwBlC,MAAMxB,IACpD1B,MACCyF,QAAS,IAAMnG,KAAKoG,eACpBC,OAAKC,IACHtG,KAAKuG,YAAYvG,KAAK8F,wBAAwBlC,MAAMxB,GAAIkE,GACxDtG,KAAKuD,gBAAgB,CAAEiD,KAAMxG,KAAK8F,wBAAwBlC,MAAM4C,MAAQ,WACxExG,KAAK8F,wBAAwBW,WAE/BC,OAAS,IAAO1G,KAAKkG,SAAU,IAEhClD,YAEHhD,KAAKgG,YAAa,EAGbW,OAAOvE,GACZpC,KAAK4E,iBAAiBgC,KAAKxE,GAC3BpC,KAAK0E,oBAAoBnB,gBAAgB,CACvCjB,MAAOtC,KAAK6G,gBACZC,KAAM,OAAO1E,qCAIT0C,mBACN,YAAKoB,SAAU,EAERlG,KAAKyE,kBAAkBsC,gBAAe,GAAMrG,MACjDC,OAAK2F,GAAgBU,qBAA6BV,EAAa,UAC/DD,OAAKC,GAAgBtG,KAAKiH,WAAWX,KACrCI,OAAS,IAAO1G,KAAKkG,SAAU,IAI3Be,WAAWX,GACjBtG,KAAKmF,KAAK+B,QAEVZ,EAAYa,QAASC,IACnB,MAAMC,EAAQrH,KAAK2E,GAAG0C,MAAM,CAC1BjF,GAAI,CAACgF,EAAEhF,GAAI4C,eACXwB,KAAM,CAACY,EAAEZ,KAAMxB,eACfsC,KAAM,CAACF,EAAEE,MACTxG,IAAK,CAACsG,EAAEtG,IAAKkE,eACbvB,UAAW,CAAC2D,EAAE3D,UAAWuB,eACzBuC,UAAW,CAACH,EAAEG,cAEhBC,OACEH,EAAMI,IAAI,QAAQC,aAAahH,MAAKC,OAAKgH,IAAS,CAAEnB,KAAMmB,MAC1DN,EAAMI,IAAI,QAAQC,aAAahH,MAC7BC,OAAKgH,IAAS,CACZL,KAAMK,EACHC,MAAM,KACNjH,IAAKkH,GAAgBA,EAAIC,QACzBhE,OAAQ+D,KAAkBA,EAAIE,YAGrCV,EAAMI,IAAI,OAAOC,aAAahH,MAAKC,OAAKgH,IAAS,CAAE7G,IAAK6G,OAEvDjH,MACCsH,OAAUhI,KAAKsF,aACfxB,OAAO,KACLuD,EAAMY,yBACCZ,EAAMa,SAEfC,OAAaC,4BACbC,OAAqB,CAACC,EAAGC,KACvB,MAAMC,EAAMC,OAAOC,KAAKH,GAAG,GACrBI,EAAUL,EAAUE,GACpBI,EAAUL,EAAUC,GAE1B,OAAOK,MADeA,QAAQF,GACbG,YAAmBH,EAAQC,GAAUD,IAAWC,KAEnEjI,OAAKoI,GAAaN,eAAErG,GAAIgF,EAAEhF,IAAO2G,KACjC5C,QAAUN,IAAemD,OAAS,EAACxI,QAAGqF,GAAa7F,KAAKyE,kBAAkBwE,gBAAgBpD,OAC1FQ,OAAI,EAAE6C,MACJlJ,KAAKmJ,YAAYD,EAAmB5C,GACpC,MAAM8C,EAAwB9C,EAAY1D,KAAMyG,GAASA,EAAKjH,KAAO8G,EAAkB9G,IACnFgH,GACFpJ,KAAKuD,gBAAekF,+BAAMW,GAA0BF,GAAqB,cAI9ElG,YAEHhD,KAAKmF,KAAKmE,KAAKjC,KAIX8B,YAAYD,EAA2C5C,GAC7D,MAAMiD,EAAoB,IAAIjD,GACxBkD,EAAQD,EAAkBE,UAAW5D,GAAeA,EAAWzD,KAAO8G,EAAkB9G,IAC9FmH,EAAkBC,GAAMf,+BAAQc,EAAkBC,IAAWN,GAC7DlJ,KAAKoG,cAAe5F,QAAG+I,GAGjBhD,YAAYmD,EAAsBpD,GACxCtG,KAAKoG,cAAe5F,QAAG,IAAI8F,EAAYxC,OAAQ+B,GAAeA,EAAWzD,KAAOsH,KAAgBhJ,MAC9F2F,OAAI,KACF,MAAMsD,EAAe3J,KAAKmF,KAAKC,SAASqE,UAAWG,GAAMA,EAAEhG,MAAMxB,KAAOsH,GACpEC,GACF3J,KAAKmF,KAAK0E,SAASF,MAMnBpG,gBAAgBsC,EAAoCiE,GAC1D9J,KAAK0E,oBAAoBnB,gBAAgB,CACvCjB,MAAOtC,KAAK6G,gBACZC,KAAM,eAAejB,EAAWW,kBAAkBsD,qDAlJ3CtF,GAA6BrD,sEAA7BqD,EAA6BtC,kqBDlB1Cf,kDA6CAA,yBAGAA,+CAEAA,yCAlDeA,8EA6CRA,iCAGWA,oDAEPA,msCChCEqD,GAAb,iFCGQrD,cAA6E,WAC3DA,SAAWA,QAC3BA,cAAIA,SAAeA,QACnBA,cAAIA,gCAA6BA,QACjCA,iBAAwBA,oCAC6BA,yDAJrCA,oBACZA,uBACAA,kCAEGA,6GAhBfA,SACEA,mBAAqB,UAArBA,CAAqB,OAArBA,CAAqB,UAGCA,aAACA,QACjBA,gBAAgBA,qBAASA,QACzBA,gBAAgBA,qBAASA,QACzBA,iBAAgBA,oBAAOA,YAG3BA,kBACEA,yBAOFA,UAGFA,sBACQA,yCAASgD,EAATC,MAASD,sBAAqBhD,+BAAkBA,QAC1DA,gCAZ2BA,gDAAuB,iDAclDA,mBCtBK,IAAM4I,GAAb,MAAM,QAWJlK,YACmB4E,EACAuF,EACAtF,GAFA1E,yBACAA,oBACAA,2BAXZA,kBAAe,IAAIiK,IAInBjK,cAAU,EACVA,oBAAiBA,KAAK0E,oBAAoBtB,qBACzCpD,gBAAa,IAAIiF,KALdiF,yBACT,OAAOC,MAAMC,KAAKpK,KAAKqK,eAAiB,IAYnChF,cACLrF,KAAKsF,WAAW3B,OAChB3D,KAAKsF,WAAWC,WAGX+E,YAAYC,GACjBvK,KAAKqK,cAAgBE,EAAMC,OAAOC,OAAS,GAE3CzK,KAAKkK,mBAAmB/C,QAASuD,IAC/B1K,KAAK2K,aAAaC,IAChBF,EAAKlE,KACL,IAAIqE,QAAQ,CAACC,EAASC,KACpB,MAAMC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,KACdJ,EAAQ9K,KAAKgK,aAAamB,uBAAuBH,EAAOI,UAE1DJ,EAAOK,QAAWC,IAChBP,EAAOO,IAGTN,EAAOO,cAAcb,QAMtBc,oBACL,IAAKxL,KAAKqK,cACR,OAGF,MAAMoB,EAAW,IAAIC,SACrB,UAAWhB,KAAQ1K,KAAKkK,mBACtBuB,EAASE,OAAO,QAASjB,GAG3B1K,KAAKyE,kBACF+G,kBAAkBC,GAClB/K,MACC2F,OAAI,IAAOrG,KAAKkG,SAAU,IAC1BnF,OAAYuK,IAAMM,OAAWN,KAC7B5E,OAAS,KACP1G,KAAK6L,sBAAsB7L,KAAKkK,mBAAmBnC,QACnD/H,KAAKkG,SAAU,EACflG,KAAK8L,QAAQC,cAAcnI,MAAQ,QAGtCZ,YAGEgJ,QAAQ9L,EAAWmJ,GACxB,OAAOA,EAAK7C,KAGNqF,sBAAsBI,GAC5BjM,KAAK0E,oBAAoBnB,gBAAgB,CACvCjB,MAAO,0BACPmB,UAAW,IAAIC,KACfoD,KAAM,GAAGmF,oFA3EFlC,GAAqB5I,0DAArB4I,EAAqB7H,6kBDblCf,iBAAgC,eAMvBA,kCAAU8B,mBALjB9B,QAMAA,oBACQA,yCAAS+K,EAATC,OAASD,UAAe/K,wBAAYA,QAE5CA,kCAyBAA,yBAEFA,QAEAA,qDA7BiBA,iGAyBRA,iCAISA,6JC1BL4I,GAAb,0DCGM5I,SACEA,gBAA2B,WAGrBA,2DAASiL,EAAThI,OAASgI,OAAOC,MAAa,MAAKzI,SAASzC,oBAA6BA,SAA8BA,UAC1GA,iBACEA,4BAEFA,QACAA,cACEA,4BAEFA,QACAA,cAAIA,2BAAmDA,QACvDA,eAAIA,2BAA6DA,QACjEA,kBAAwB,gBAEdA,2DAASmL,EAATlI,OAASkI,2BAAiCnL,YAGxDA,+CAnBMA,8BAG0EA,kCAG3DA,wDAIAA,+DAEbA,6DACAA,6FA3BdA,SACEA,mBAAqB,UAArBA,CAAqB,OAArBA,CAAqB,UAGCA,aAACA,QACjBA,gBAAgBA,gBAAIA,QACpBA,gBAAgBA,uBAAWA,QAC3BA,iBAAgBA,uBAAUA,QAC1BA,iBAAgBA,uBAAUA,QAC1BA,iBACFA,UAEFA,kBACEA,oCAqBFA,UAEJA,8BAvByCA,kEAyBzCA,4DAKAA,uBAEUA,0CAAUoL,EAAVnI,MAAUmI,wBAAVpL,CAAiC,mCACxBqL,EADwBpI,MACxBoI,gBACjBrL,kBAAoC,WAApCA,CAAoC,cAEdA,gBAAIA,QACtBA,4BAIFA,QACAA,kBAAwB,cACGA,uBAAWA,QACpCA,4BAIFA,oCAdIA,8CAMaA,wEAOAA,yHAKrBA,uBAEUA,8DAAuB,GAAvBA,CAA6B,mCACpBsL,EADoBrI,MACpBqI,mBACjBtL,kBAAuB,OAClBA,SAAgFA,oCAAhFA,sGCxDA,IAAMuL,GAAb,MAAM,QAkBJ7M,YACmB8M,EACAjI,EACAC,EACAC,GAHA5E,uBACAA,2BACAA,UACAA,wBArBZA,cAAU,EACVA,UAAO,IAAI6E,KAAU,IACrB7E,iBAAcA,KAAK4M,kBACnB5M,oBAAiBA,KAAK0E,oBAAoBtB,qBAI1CpD,uBAAmB,EACnBA,iBAAa,EACbA,qBAAkBA,KAAK2E,GAAG0C,MAAM,CACrCb,KAAM,CAAC,KAAMxB,eACb6H,YAAa,CAAC,QAET7M,2BAAwBA,KAAK2E,GAAGI,QAAQ,CAAC,KAAMC,gBAC9ChF,gBAAa,IAAIiF,KACRjF,qBAAkB,sBAXxB8M,oBACT,OAAO9M,KAAKmF,KAAKC,SAmBZC,cACLrF,KAAKsF,WAAW3B,OAChB3D,KAAKsF,WAAWC,WAGXC,YAAYuH,GACjB,MAAMrH,EAAW,mBACjB,OAAOqH,EAAqBpH,QAAU,GAAGD,eAAwBA,EAG5DsH,uBACLhN,KAAKiN,kBAAmB,EACxBjN,KAAKkN,gBAAgBzG,QAGhB0G,cACDnN,KAAKkN,gBAAgBvH,UAIzB3F,KAAKkG,SAAU,EACflG,KAAK2M,gBACFQ,YAAYnN,KAAKkN,gBAAgBtJ,OACjClD,MACCyF,QAAS,IAAMnG,KAAK4M,oBACpBvG,OAAI,KACFrG,KAAKuD,gBAAgB,CAAEiD,KAAMxG,KAAKkN,gBAAgBtJ,MAAM4C,MAAQ,SAChExG,KAAKkN,gBAAgBzG,WAGxBzD,YAEHhD,KAAKiN,kBAAmB,GAGnBrH,gBAAgBwH,GACrBpN,KAAKqN,sBAAsBtH,SAASqH,GACpCpN,KAAKgG,YAAa,EAGbsH,iBACLtN,KAAKkG,SAAU,EACflG,KAAK2M,gBACFW,eAAetN,KAAKqN,sBAAsBzJ,MAAMxB,IAChD1B,MACCyF,QAAS,IAAMnG,KAAK4M,oBACpBvG,OAAI,KACFrG,KAAKuD,gBAAgB,CAAEiD,KAAMxG,KAAKqN,sBAAsBzJ,MAAM4C,MAAQ,WACtExG,KAAKqN,sBAAsB5G,WAG9BzD,YAEHhD,KAAKgG,YAAa,EAGbW,OAAOvE,GACZpC,KAAK4E,iBAAiBgC,KAAKxE,GAC3BpC,KAAK0E,oBAAoBnB,gBAAgB,CACvCjB,MAAOtC,KAAK6G,gBACZC,KAAM,OAAO1E,qCAITwK,kBACN,YAAK1G,SAAU,EAERlG,KAAK2M,gBAAgBY,eAAc,GAAM7M,MAC9CC,OAAK6M,GAAexG,qBAA6BwG,EAAY,UAC7DnH,OAAKmH,GAAexN,KAAKiH,WAAWuG,KACpC9G,OAAS,IAAO1G,KAAKkG,SAAU,IAI3Be,WAAWuG,GACjBxN,KAAKmF,KAAK+B,QAEVsG,EAAWrG,QAASC,IAClB,MAAMC,EAAQrH,KAAK2E,GAAG0C,MAAM,CAC1BjF,GAAI,CAACgF,EAAEhF,GAAI4C,eACXwB,KAAM,CAACY,EAAEZ,KAAMxB,eACf6H,YAAa,CAACzF,EAAEyF,YAAa7H,eAC7BvB,UAAW,CAAC2D,EAAE3D,UAAWuB,eACzBuC,UAAW,CAACH,EAAEG,cAEhBC,OACEH,EAAMI,IAAI,QAAQC,aAAahH,MAAKC,OAAKgH,IAAS,CAAEnB,KAAMmB,MAC1DN,EAAMI,IAAI,eAAeC,aAAahH,MAAKC,OAAKgH,IAAS,CAAEkF,YAAalF,OAEvEjH,MACCsH,OAAUhI,KAAKsF,aACfxB,OAAO,KACLuD,EAAMY,yBACCZ,EAAMa,SAEfC,OAAaC,4BACbC,OAAqB,CAACC,EAAGC,KACvB,MAAMC,EAAMC,OAAOC,KAAKH,GAAG,GAC3B,OAAQD,EAAUE,KAAUD,EAAUC,MAExC7H,OAAKoI,GAAaN,eAAErG,GAAIgF,EAAEhF,IAAO2G,KACjC5C,QAAUiH,IAAapE,OAAS,EAACxI,QAAG4M,GAAWpN,KAAK2M,gBAAgBc,cAAcL,OAClF/G,OAAI,EAAEqH,MACJ,MAAMC,EAAsBH,EAAW5K,KAAMyG,GAASA,EAAKjH,KAAOsL,EAAgBtL,IAC9EuL,GACF3N,KAAKuD,gBAAekF,+BAAMkF,GAAwBD,GAAmB,WAGvE1N,KAAK4N,YAAc5N,KAAK4M,qBAG3B5J,YAEHhD,KAAKmF,KAAKmE,KAAKjC,KAIX9D,gBAAgB6J,EAAgCtD,GACtD9J,KAAK0E,oBAAoBnB,gBAAgB,CACvCjB,MAAOtC,KAAK6G,gBACZC,KAAM,aAAasG,EAAS5G,kBAAkBsD,qDAjJvC4C,GAA2BvL,sEAA3BuL,EAA2BxK,sgCDjBxCf,oBACQA,oDAA4B,IAAMA,wBAAYA,QAEtDA,mDAsCAA,yBAGAA,+CAEAA,8BAsBAA,yCAjEeA,sFAsCRA,iCAGWA,oDAEPA,0CAsBAA,msCCnDEuL,GAAb,gEC2BYvL,kBAEEA,oBAKFA,wCAHSA,0CAA8B,uEAMvCA,kBACkD,cAKzCA,gFAAUoL,EAAVnI,OAAUmI,8BAJjBpL,QAMAA,oBACEA,SACFA,mFAHOA,wDAHAA,iBAAkB,oCAIlBA,yDACLA,yEA7CVA,SACEA,gBAAuB,UAGjBA,2DAAS0M,EAATzJ,OAASyJ,OAAOC,MAAS,MAAKlK,SAASzC,mBAA6BA,SAA0BA,UAClGA,cAAIA,kBACiCA,QACrCA,iBACEA,4BAEFA,QACAA,cACEA,wBACFA,QACAA,eACEA,6BAEFA,QACAA,kBACEA,2BAKFA,QACAA,eACEA,0BAQFA,QACAA,eACEA,4CAYFA,QACAA,eAAI,YAAOA,2BAA+CA,UAC1DA,eAAI,YAAOA,2BAAyDA,UACpEA,kBAAwB,gBAEdA,2DAAS4M,EAAT3J,OAAS2J,2BAA6B5M,YAGpDA,+CAvDMA,8BAGsEA,kCAEjEA,+CAGUA,wDAOAA,uDAIFA,oCAAmB,yCAO1BA,wDAUoBA,qDAYjBA,8DACAA,8FApErBA,SACEA,mBAAqB,UAArBA,CAAqB,OAArBA,CAAqB,UAGCA,aAACA,QACjBA,gBAAgBA,gBAAIA,QACpBA,gBAAgBA,gBAAIA,QACpBA,iBAAgBA,kBAAKA,iBAAMA,6BAAgBA,UAC3CA,iBAAgBA,gBAAGA,QACnBA,iBAAgBA,iBAAIA,QACpBA,iBAAgBA,oBAAOA,QACvBA,iBAAgBA,uBAAUA,QAC1BA,iBAAgBA,uBAAUA,QAC1BA,iBAAgBA,uBAAUA,QAC1BA,iBACFA,UAEFA,kBACEA,oCAyDFA,UAEJA,8BA3DqCA,8DA6DrCA,4DAKAA,uBAEUA,8DAAuB,GAAvBA,CAA6B,mCACpB6M,EADoB5J,MACpB4J,eACjB7M,kBAAuB,OAClBA,SAAwEA,oCAAxEA,8FCpEA,IAAM8M,GAAb,MAAM,QAgBJpO,YACmBqO,EACAvB,EACAjI,EACAC,EACAC,GAJA5E,mBACAA,uBACAA,2BACAA,UACAA,wBApBZA,cAAU,EACVA,UAAO,IAAI6E,KAAU,IACrB7E,YAASA,KAAKmO,aACdnO,cAAWoO,IACXpO,eAAYyI,OAAO4F,QAAQD,KAAUzN,IAAI,EAAE6H,EAAK5E,MAAY,CAAExB,GAAIwB,EAAO4C,KAAMgC,KAC/ExI,iBAAcA,KAAK2M,gBAAgBY,gBACnCvN,oBAAiBA,KAAK0E,oBAAoBtB,qBAI1CpD,iBAAa,EACbA,uBAAoBA,KAAK2E,GAAGI,QAAQ,CAAC,KAAMC,gBAC1ChF,gBAAa,IAAIiF,KACRjF,qBAAkB,kBANxBsO,gBACT,OAAOtO,KAAKmF,KAAKC,SAeZC,cACLrF,KAAKsF,WAAW3B,OAChB3D,KAAKsF,WAAWC,WAGXgJ,YAAYC,GACjB,OAAQA,QACDJ,WACH,MAAO,cACJA,WACH,MAAO,iBAEP,MAAO,KAINK,YAAYC,EAAetB,SAChC,OAAsB,QAAfhG,IAAKoG,kBAAU5L,eAAE+M,KAAMC,GAAQA,EAAIxM,KAAOgL,EAAShL,IAGrDyM,eAAeH,EAAetB,EAAuB0B,GAC1D,IAAIC,EACAC,EAEJ,OAAIhP,KAAKyO,YAAYC,EAAMtB,IACzB2B,EAAc,CAAE3M,GAAIsM,EAAKtM,GAAIoL,WAAYkB,EAAKlB,WAAW1J,OAAQ8K,GAAQA,EAAIxM,KAAOgL,EAAShL,KAC7F4M,EAAOhP,KAAKkO,YAAYe,mBAAmBP,EAAKtM,GAAIgL,EAAShL,MAE7D2M,EAAc,CAAE3M,GAAIsM,EAAKtM,GAAIoL,WAAY,IAAIkB,EAAKlB,WAAYJ,IAC9D4B,EAAOhP,KAAKkO,YAAYgB,gBAAgBR,EAAKtM,GAAIgL,EAAShL,KAGrD4M,EAAKtO,MAAK2F,OAAI,IAAMyI,EAAYrH,IAAI,cAAc1B,SAASgJ,EAAYvB,cAAcxK,YAGvFwC,YAAY2J,GACjB,MAAMzJ,EAAW,mBACjB,OAAOyJ,EAAiBxJ,QAAU,GAAGD,eAAwBA,EAGxDE,gBAAgB8I,GACrB1O,KAAKoP,kBAAkBrJ,SAAS2I,GAChC1O,KAAKgG,YAAa,EAGbqJ,aACLrP,KAAKkG,SAAU,EACflG,KAAKkO,YACFmB,WAAWrP,KAAKoP,kBAAkBxL,MAAMxB,IACxC1B,MACCyF,QAAS,IAAMnG,KAAKsP,SACpBjJ,OAAKkJ,IACHvP,KAAKuG,YAAYvG,KAAKoP,kBAAkBxL,MAAMxB,GAAImN,GAClDvP,KAAKuD,gBAAgB,CAAEiD,KAAMxG,KAAKoP,kBAAkBxL,MAAM4C,MAAQ,WAClExG,KAAKoP,kBAAkB3I,WAEzBC,OAAS,IAAO1G,KAAKkG,SAAU,IAEhClD,YAEHhD,KAAKgG,YAAa,EAGbW,OAAOvE,GACZpC,KAAK4E,iBAAiBgC,KAAKxE,GAC3BpC,KAAK0E,oBAAoBnB,gBAAgB,CACvCjB,MAAOtC,KAAK6G,gBACZC,KAAM,OAAO1E,qCAIT+L,aACN,YAAKjI,SAAU,EAERlG,KAAKkO,YAAYsB,SAAS,IAAI,GAAM9O,MACzCC,OAAK4O,GAAUvI,qBAA6BuI,EAAO,UACnDlJ,OAAKkJ,GAAUvP,KAAKiH,WAAWsI,KAC/B7I,OAAS,IAAO1G,KAAKkG,SAAU,IAI3Be,WAAWsI,GACjBvP,KAAKmF,KAAK+B,QAEVqI,EAAMpI,QAASC,IACb,MAAMC,EAAQrH,KAAK2E,GAAG0C,MAAM,CAC1BjF,GAAI,CAACgF,EAAEhF,GAAI4C,eACXwB,KAAM,CAACY,EAAEZ,KAAMxB,eACfsC,KAAM,CAACF,EAAEE,MACTxG,IAAK,CAACsG,EAAEtG,IAAKkE,eACbwJ,KAAM,CAACpH,EAAEoH,KAAMxJ,eACfyK,UAAW,CAACrI,EAAEqI,UAAWzK,eACzBwI,WAAY,CAACpG,EAAEoG,YACf/J,UAAW,CAAC2D,EAAE3D,UAAWuB,eACzBuC,UAAW,CAACH,EAAEG,cAEhBC,OACEH,EAAMI,IAAI,QAAQC,aAAahH,MAAKC,OAAKgH,IAAS,CAAEnB,KAAMmB,MAC1DN,EAAMI,IAAI,QAAQC,aAAahH,MAC7BC,OAAKgH,IAAS,CACZL,KAAMK,EACHC,MAAM,KACNjH,IAAKkH,GAAgBA,EAAIC,QACzBhE,OAAQ+D,KAAkBA,EAAIE,YAGrCV,EAAMI,IAAI,OAAOC,aAAahH,MAAKC,OAAKgH,IAAS,CAAE7G,IAAK6G,MACxDN,EAAMI,IAAI,QAAQC,aAAahH,MAAKC,OAAKgH,IAAS,CAAE6G,KAAM7G,MAC1DN,EAAMI,IAAI,aAAaC,aAAahH,MAAKC,OAAKgH,IAAS,CAAE8H,UAAW9H,OAEnEjH,MACCsH,OAAUhI,KAAKsF,aACfxB,OAAO,KACLuD,EAAMY,yBACCZ,EAAMa,SAEfC,OAAaC,4BACbC,OAAqB,CAACC,EAAGC,KACvB,MAAMC,EAAMC,OAAOC,KAAKH,GAAG,GACrBI,EAAUL,EAAUE,GACpBI,EAAUL,EAAUC,GAE1B,OAAOK,MADeA,QAAQF,GACbG,YAAmBH,EAAQC,GAAUD,IAAWC,KAEnEjI,OAAKoI,GAAaN,eAAErG,GAAIgF,EAAEhF,IAAO2G,KACjC5C,QAAUuI,IAAS1F,OAAS,EAACxI,QAAGkO,GAAO1O,KAAKkO,YAAYwB,UAAUhB,OAClErI,OAAI,EAAE0I,MACJ/O,KAAKmJ,YAAY4F,EAAaQ,GAC9B,MAAMI,EAAkBJ,EAAM3M,KAAMyG,GAASA,EAAKjH,KAAO2M,EAAY3M,IACjEuN,GACF3P,KAAKuD,gBAAekF,+BAAMkH,GAAoBZ,GAAe,cAIlE/L,YAEHqE,EACGI,IAAI,cACJC,aAAahH,MAAKC,OAAKgH,IAAS,CAAE6F,WAAY7F,MAC9CjH,MAECsH,OAAUhI,KAAKsF,aACf3E,OAAKoI,GAAaN,eAAErG,GAAIgF,EAAEhF,IAAO2G,KACjC1C,OAAK0I,IACH/O,KAAKmJ,YAAY4F,EAAaQ,GAC9B,MAAMI,EAAkBJ,EAAM3M,KAAMyG,GAASA,EAAKjH,KAAO2M,EAAY3M,IACjEuN,GACF3P,KAAKuD,gBAAekF,+BAAMkH,GAAoBZ,GAAe,cAIlE/L,YAEHhD,KAAKmF,KAAKmE,KAAKjC,KAIX8B,YAAY4F,EAA+BQ,GACjD,MAAMK,EAAc,IAAIL,GAClB/F,EAAQoG,EAAYnG,UAAWiF,GAASA,EAAKtM,KAAO2M,EAAY3M,IACtEwN,EAAYpG,GAAMf,+BAAQmH,EAAYpG,IAAWuF,GACjD/O,KAAKsP,QAAS9O,QAAGoP,GAGXrJ,YAAYsJ,EAAgBN,GAClCvP,KAAKsP,QAAS9O,QAAG,IAAI+O,EAAMzL,OAAQ4K,GAASA,EAAKtM,KAAOyN,KAAUnP,MAChE2F,OAAI,KACF,MAAMsD,EAAe3J,KAAKmF,KAAKC,SAASqE,UAAWG,GAAMA,EAAEhG,MAAMxB,KAAOyN,GACpElG,GACF3J,KAAKmF,KAAK0E,SAASF,MAMnBpG,gBAAgBmL,EAAwB5E,GAC9C9J,KAAK0E,oBAAoBnB,gBAAgB,CACvCjB,MAAOtC,KAAK6G,gBACZC,KAAM,SAAS4H,EAAKlI,kBAAkBsD,qDA1M/BmE,GAAuB9M,iFAAvB8M,EAAuB/L,isCDrBpCf,mDA+EAA,yBAGAA,+CAEAA,yCApFeA,wEA+ERA,iCAGWA,oDAEPA,k4DC/DE8M,GAAb,gDCAQ9M,cAA6E,WAC3DA,SAAWA,QAC3BA,cAAIA,SAAeA,QACnBA,cAAIA,gCAA6BA,QACjCA,iBAAwBA,oCAC6BA,yDAJrCA,oBACZA,uBACAA,kCAEGA,6GAhBfA,SACEA,mBAAqB,UAArBA,CAAqB,OAArBA,CAAqB,UAGCA,aAACA,QACjBA,gBAAgBA,qBAASA,QACzBA,gBAAgBA,qBAASA,QACzBA,iBAAgBA,oBAAOA,YAG3BA,kBACEA,yBAOFA,UAGFA,sBACQA,yCAASgD,EAATC,MAASD,gBAAehD,yBAAYA,QAC9CA,gCAZ2BA,gDAAuB,iDAclDA,mBCvBF,MAAM2O,GAAiB,CACrB,CACEC,KAAM,GACNC,UAAW7N,EACXlC,YAAa,CAACoB,GACd4O,SAAU,CACR,CAAEF,KAAM,GAAIC,UAAWhO,GACvB,CACE+N,KAAM,QACNE,SAAU,CACR,CAAEF,KAAM,SAAUC,UCT5B,MAAM,QAWJnQ,YACmBqO,EACAlE,EACAtF,GAFA1E,mBACAA,oBACAA,2BAXZA,kBAAe,IAAIiK,IAInBjK,cAAU,EACVA,oBAAiBA,KAAK0E,oBAAoBtB,qBACzCpD,gBAAa,IAAIiF,KALdiF,yBACT,OAAOC,MAAMC,KAAKpK,KAAKqK,eAAiB,IAYnChF,cACLrF,KAAKsF,WAAW3B,OAChB3D,KAAKsF,WAAWC,WAGX+E,YAAYC,GACjBvK,KAAKqK,cAAgBE,EAAMC,OAAOC,OAAS,GAE3CzK,KAAKkK,mBAAmB/C,QAASuD,IAC/B1K,KAAK2K,aAAaC,IAChBF,EAAKlE,KACL,IAAIqE,QAAQ,CAACC,EAASC,KACpB,MAAMC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,KACdJ,EAAQ9K,KAAKgK,aAAamB,uBAAuBH,EAAOI,UAE1DJ,EAAOK,QAAWC,IAChBP,EAAOO,IAGTN,EAAOO,cAAcb,QAMtBwF,cACL,IAAKlQ,KAAKqK,cACR,OAGF,MAAMoB,EAAW,IAAIC,SACrB,UAAWhB,KAAQ1K,KAAKkK,mBACtBuB,EAASE,OAAO,QAASjB,GAG3B1K,KAAKkO,YACFgC,YAAYzE,GACZ/K,MACC2F,OAAI,IAAOrG,KAAKkG,SAAU,IAC1BnF,OAAYuK,IAAMM,OAAWN,KAC7B5E,OAAS,KACP1G,KAAK6L,sBAAsB7L,KAAKkK,mBAAmBnC,QACnD/H,KAAKkG,SAAU,EACflG,KAAK8L,QAAQC,cAAcnI,MAAQ,QAGtCZ,YAGEgJ,QAAQ9L,EAAWmJ,GACxB,OAAOA,EAAK7C,KAGNqF,sBAAsBsE,GAC5BnQ,KAAK0E,oBAAoBnB,gBAAgB,CACvCjB,MAAO,oBACPmB,UAAW,IAAIC,KACfoD,KAAM,GAAGqJ,8EA3EFC,GAAwBjP,0DAAxBiP,EAAwBlO,glBFbrCf,iBAAgC,eAMvBA,kCAAU8B,mBALjB9B,QAMAA,oBACQA,yCAAS+K,EAATC,OAASD,UAAe/K,wBAAYA,QAE5CA,kCAyBAA,yBAEFA,QAEAA,qDA7BiBA,iGAyBRA,iCAISA,6JE1BLiP,GAAb,IDUU,CAAEL,KAAM,GAAIC,UAAW/B,MAG3B,CAAE8B,KAAM,aAAcC,UAAWtD,IACjC,CACEqD,KAAM,cACNE,SAAU,CACR,CAAEF,KAAM,SAAUC,UAAWjG,IAC7B,CAAEgG,KAAM,GAAIC,UAAWxL,SAW1B,IAAM6L,GAAb,MAAM,sDAAOA,4DAHF,CAACC,cAAsBR,KACtBQ,QAECD,GAAb,kBEjBO,IAAME,GAAb,MAAM,sDAAOA,4DAFF,CAACC,KAAcH,GAAoBI,SAEjCF,GAAb,EAAaA","names":["AuthGuard","constructor","authService","router","this","canActivate","_","state","sessionData","getSessionData","existingToken","getToken","of","verifyToken","pipe","map","data","redirect","url","catchError","navigate","queryParams","redirectUrl","i0","factory","AdminGuard","authGuard","route","isAuthorized$","isAuthorized","d","r","_a","user","_b","isAdmin","AdminHomeComponent","ngOnInit","selectors","AdminComponent","id","TabId","title","username","onTabChange","tabId","tab","adminTabs","find","t","toWebsite","logout","subscribe","ctx","NotificationService","BehaviorSubject","notificationsChanged","notifications$","asObservable","addNotification","notification","createdAt","Date","next","value","setTimeout","filter","n","getTime","duration","DEFAULT_DURATION","ctx_r6","oxw","background_r4","ctx_r8","ctx_r11","BackgroundManagementComponent","backgroundService","notificationService","fb","clipboardService","FormArray","fetchBackgrounds","control","Validators","Subject","backgroundForms","form","controls","ngOnDestroy","destroyed$","complete","getInputCss","backgroundFieldControl","cssClass","invalid","openDeleteModal","background","deleteBackgroundControl","setValue","isDeleting","deleteBackground","loading","mergeMap","backgrounds$","tap","backgrounds","localDelete","name","reset","finalize","copyId","copy","COMPONENT_TITLE","body","getBackgrounds","ArrayHelper","createForm","clear","forEach","i","group","tags","updatedAt","merge","get","valueChanges","val","split","tag","trim","length","takeUntil","updateValueAndValidity","valid","debounceTime","TextHelper","distinctUntilChanged","x","y","key","Object","keys","oldVal","newVal","isArray","DataHelper","changes","forkJoin","patchBackground","updatedBackground","localUpdate","updatedBackgroundFull","item","push","clonedBackgrounds","index","findIndex","backgroundId","controlIndex","c","removeAt","action","BgBulkUploadComponent","domSanitizer","Map","selectedFilesArray","Array","from","selectedFiles","selectFiles","event","target","files","file","filePreviews","set","Promise","resolve","reject","reader","FileReader","onload","bypassSecurityTrustUrl","result","onerror","e","readAsDataURL","uploadBackgrounds","formData","FormData","append","throwError","addUploadNotification","filesEl","nativeElement","trackFn","qty","_r0","MAs","ctx_r7","category_r5","ctx_r9","ctx_r10","ctx_r12","ctx_r15","CategoryManagementComponent","categoryService","fetchCategories","description","categoryForms","categoryFieldControl","cancelAddingCategory","isAddingCategory","newCategoryForm","addCategory","category","deleteCategoryControl","deleteCategory","getCategories","categories","patchCategory","updatedCategory","updatedCategoryFull","categories$","ctx_r14","icon_r4","ctx_r16","ctx_r19","IconManagementComponent","iconService","fetchIcons","IconType","entries","iconForms","getIconType","type","hasCategory","icon","some","cat","toggleCategory","iconControl","updatedIcon","obs$","deleteIconCategory","addIconCategory","iconFieldControl","deleteIconControl","deleteIcon","icons$","icons","getIcons","isPremium","patchIcon","updatedIconFull","clonedIcons","iconId","routes","path","component","children","uploadIcons","iconsQty","IconsBulkUploadComponent","AdminRoutingModule","RouterModule","AdminModule","CommonModule","SharedModule"],"sourceRoot":"webpack:///","sources":["./src/app/core/guards/auth.guard.ts","./src/app/core/guards/admin.guard.ts","./src/app/modules/admin/admin-home/admin-home.component.ts","./src/app/modules/admin/admin-home/admin-home.component.html","./src/app/modules/admin/admin.component.ts","./src/app/modules/admin/admin.component.html","./src/app/core/services/notification.service.ts","./src/app/modules/admin/background-management/background-management.component.html","./src/app/modules/admin/background-management/background-management.component.ts","./src/app/modules/admin/bg-bulk-upload/bg-bulk-upload.component.html","./src/app/modules/admin/bg-bulk-upload/bg-bulk-upload.component.ts","./src/app/modules/admin/category-management/category-management.component.html","./src/app/modules/admin/category-management/category-management.component.ts","./src/app/modules/admin/icon-management/icon-management.component.html","./src/app/modules/admin/icon-management/icon-management.component.ts","./src/app/modules/admin/icons-bulk-upload/icons-bulk-upload.component.html","./src/app/modules/admin/admin-routing.module.ts","./src/app/modules/admin/icons-bulk-upload/icons-bulk-upload.component.ts","./src/app/modules/admin/admin.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\nimport { AuthService } from '../services/auth.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n  constructor(private readonly authService: AuthService, private readonly router: Router) {}\n\n  public canActivate(_: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n    const sessionData = this.authService.getSessionData();\n    const existingToken = this.authService.getToken();\n\n    if (!sessionData) {\n      if (!existingToken) {\n        return of(false).pipe(map(() => this.redirect(state.url)));\n      }\n\n      return this.authService.verifyToken().pipe(\n        map((data) => {\n          if (!data) {\n            return this.redirect(state.url);\n          } else {\n            return true;\n          }\n        }),\n        catchError(() => of(this.redirect(state.url)))\n      );\n    } else {\n      return of(true);\n    }\n  }\n\n  private redirect(url: string) {\n    this.router.navigate(['login'], { queryParams: { redirectUrl: url } });\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\nimport { AuthService } from '../services/auth.service';\nimport { AuthGuard } from './auth.guard';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AdminGuard implements CanActivate {\n  constructor(\n    private readonly authService: AuthService,\n    private readonly router: Router,\n    private readonly authGuard: AuthGuard\n  ) {}\n\n  public canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n    const isAuthorized$ = this.authGuard.canActivate(route, state);\n    return isAuthorized$.pipe(\n      map((isAuthorized) => {\n        if (!isAuthorized) {\n          return this.redirect(state.url);\n        }\n\n        const res = this.authService.getSessionData()?.user?.isAdmin;\n        if (!res) {\n          return this.redirect(state.url);\n        } else {\n          return true;\n        }\n      }),\n      catchError(() => of(this.redirect(state.url)))\n    );\n  }\n  private redirect(url: string) {\n    this.router.navigate(['login'], { queryParams: { redirectUrl: url } });\n    return false;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'bd-admin-home',\n  templateUrl: './admin-home.component.html',\n  styleUrls: ['./admin-home.component.scss'],\n})\nexport class AdminHomeComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n","<div class=\"d-flex justify-content-center align-items-center my-5\">\n  <h5>Please select a tool above</h5>\n</div>","import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { AuthService } from '../../core/services/auth.service';\nimport { TabId } from '../../models/enums/tab-id';\nimport { NavTab } from '../../models/interfaces/nav-tab';\n\n@Component({\n  selector: 'bd-admin',\n  templateUrl: './admin.component.html',\n  styleUrls: ['./admin.component.scss'],\n})\nexport class AdminComponent {\n  public adminTabs: NavTab[] = [\n    {\n      id: TabId.IconManagement,\n      title: 'Icon Management',\n      url: '/admin/icons',\n    },\n    {\n      id: TabId.IconsBulkUpload,\n      title: 'Icons Bulk Upload',\n      url: '/admin/icons/upload',\n    },\n    {\n      id: TabId.CategoryManagement,\n      title: 'Category Management',\n      url: '/admin/categories',\n    },\n    {\n      id: TabId.BackgroundManagement,\n      title: 'Background Management',\n      url: '/admin/backgrounds',\n    },\n    {\n      id: TabId.BgBulkUpload,\n      title: 'Backgrounds Bulk Upload',\n      url: '/admin/backgrounds/upload',\n    },\n  ];\n  // public activeTabId: TabId;\n  public TabId = TabId;\n  public get username() {\n    return this.authService.username || 'ADMIN';\n  }\n\n  constructor(private readonly authService: AuthService, private readonly router: Router) {}\n\n  public onTabChange(tabId: TabId) {\n    const tab = this.adminTabs.find((t) => t.id === tabId);\n    this.router.navigate([tab.url]);\n  }\n\n  public toWebsite() {\n    this.router.navigate(['']);\n  }\n\n  public logout() {\n    this.authService.logout().subscribe();\n  }\n}\n","<div class=\"position-fixed w-100 header-wrapper\">\n  <div class=\"d-flex justify-content-end align-items-center p-2 border-bottom\">\n    <a class=\"mr-auto app-logo\"\n       routerLink=\"\"></a>\n    <h5 class=\"m-0 mr-3\">Welcome, {{ username }}</h5>\n    <button class=\"btn btn-primary mr-3\"\n            (click)=\"toWebsite()\">Go to Website</button>\n    <button class=\"btn btn-primary\"\n            (click)=\"logout()\">Logout</button>\n  </div>\n\n  <bd-tabs [tabs]=\"adminTabs\"\n           [snap]=\"'bottom'\"\n           (tabChange)=\"onTabChange($event)\"\n           class=\"pt-3\"></bd-tabs>\n</div>\n\n<div class=\"d-flex flex-column content-wrapper\">\n  <router-outlet></router-outlet>\n</div>","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { Notification } from '../../models/interfaces/notification';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotificationService {\n  public readonly DEFAULT_DURATION = 4000;\n  public get notificationsChanged() {\n    return this.notifications$.asObservable();\n  }\n  private notifications$ = new BehaviorSubject<Notification[]>([]);\n\n  public addNotification(notification: Notification) {\n    if (!notification.createdAt) {\n      notification.createdAt = new Date();\n    }\n\n    this.notifications$.next([...this.notifications$.value, notification]);\n\n    setTimeout(\n      () =>\n        this.notifications$.next(\n          this.notifications$.value.filter((n) => n.createdAt.getTime() !== notification.createdAt.getTime())\n        ),\n      notification.duration || this.DEFAULT_DURATION\n    );\n  }\n}\n","<ng-container *ngIf=\"(backgrounds$ | async)?.length && !loading\">\n  <table class=\"table\">\n    <thead>\n      <tr>\n        <th scope=\"col\">#</th>\n        <th scope=\"col\">Background</th>\n        <th scope=\"col\">Name</th>\n        <th scope=\"col\">Tags <span>(split with \",\")</span></th>\n        <th scope=\"col\">URL</th>\n        <th scope=\"col\">Created At</th>\n        <th scope=\"col\">Updated At</th>\n        <th scope=\"col\"></th>\n      </tr>\n    </thead>\n    <tbody>\n      <ng-container *ngFor=\"let background of backgroundForms; let i = index\">\n        <tr [formGroup]=\"background\">\n          <td scope=\"row\"\n              class=\"cell-id\"\n              (click)=\"copyId(background.get('id').value)\"><small title=\"Click to copy\">{{ background.get('id').value }}</small></td>\n          <td><img class=\"background-preview\"\n                 [src]=\"background.get('url').value\"></td>\n          <td class=\"cell-name\">\n            <bd-text-input formControlName=\"name\"\n                           [cssClass]=\"getInputCss(background.get('name'))\"></bd-text-input>\n          </td>\n          <td>\n            <textarea formControlName=\"tags\"></textarea>\n          </td>\n          <td>\n            <bd-text-input formControlName=\"url\"\n                           [cssClass]=\"getInputCss(background.get('url'))\"></bd-text-input>\n          </td>\n          <td><small>{{ background.get('createdAt').value | date:'short'}}</small></td>\n          <td><small>{{ (background.get('updatedAt').value | date:'short') || '-' }}</small></td>\n          <td class=\"cell-delete\">\n            <button class=\"btn btn-danger btn-icon icon-cross\"\n                    (click)=\"openDeleteModal(background.value)\"></button>\n          </td>\n        </tr>\n      </ng-container>\n    </tbody>\n  </table>\n</ng-container>\n\n<span *ngIf=\"loading\"\n      class=\"spinner\"></span>\n\n<bd-notifications [items]=\"notifications$ | async\"></bd-notifications>\n\n<bd-modal *ngIf=\"isDeleting\"\n          modalTitle=\"Delete existing background\"\n          (closed)=\"isDeleting = false\"\n          (saved)=\"deleteBackground()\">\n  <div class=\"container\">\n    <p>Are you sure you want to delete background \"{{deleteBackgroundControl.value.name}}\"?</p>\n  </div>\n</bd-modal>\n","import { Component, OnDestroy } from '@angular/core';\nimport { AbstractControl, FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ClipboardService } from 'ngx-clipboard';\nimport { forkJoin, merge, of, Subject } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, filter, finalize, map, mergeMap, takeUntil, tap } from 'rxjs/operators';\n\nimport { BackgroundService } from '../../../core/services/background.service';\nimport { NotificationService } from '../../../core/services/notification.service';\nimport { BackgroundDto } from '../../../models/dto/background-dto';\nimport { ArrayHelper } from '../../../shared/helpers/array.helper';\nimport { DataHelper } from '../../../shared/helpers/data.helper';\nimport { TextHelper } from '../../../shared/helpers/text.helper';\n\n@Component({\n  selector: 'bd-background-management',\n  templateUrl: './background-management.component.html',\n  styleUrls: ['./background-management.component.scss'],\n})\nexport class BackgroundManagementComponent implements OnDestroy {\n  public loading = false;\n  public form = new FormArray([]);\n  public backgrounds$ = this.fetchBackgrounds();\n  public notifications$ = this.notificationService.notificationsChanged;\n  public get backgroundForms() {\n    return this.form.controls as FormGroup[];\n  }\n  public isDeleting = false;\n  public deleteBackgroundControl = this.fb.control([null, Validators.required]);\n  private destroyed$ = new Subject<void>();\n  private readonly COMPONENT_TITLE = 'Background Management';\n\n  constructor(\n    private readonly backgroundService: BackgroundService,\n    private readonly notificationService: NotificationService,\n    private readonly fb: FormBuilder,\n    private readonly clipboardService: ClipboardService\n  ) {}\n\n  public ngOnDestroy() {\n    this.destroyed$.next();\n    this.destroyed$.complete();\n  }\n\n  public getInputCss(backgroundFieldControl: AbstractControl) {\n    const cssClass = 'w-100 text-small';\n    return backgroundFieldControl.invalid ? `${cssClass} is-invalid` : cssClass;\n  }\n\n  public openDeleteModal(background: BackgroundDto) {\n    this.deleteBackgroundControl.setValue(background);\n    this.isDeleting = true;\n  }\n\n  public deleteBackground() {\n    this.loading = true;\n    this.backgroundService\n      .deleteBackground(this.deleteBackgroundControl.value.id)\n      .pipe(\n        mergeMap(() => this.backgrounds$),\n        tap((backgrounds) => {\n          this.localDelete(this.deleteBackgroundControl.value.id, backgrounds);\n          this.addNotification({ name: this.deleteBackgroundControl.value.name }, 'deleted');\n          this.deleteBackgroundControl.reset();\n        }),\n        finalize(() => (this.loading = false))\n      )\n      .subscribe();\n\n    this.isDeleting = false;\n  }\n\n  public copyId(id: string) {\n    this.clipboardService.copy(id);\n    this.notificationService.addNotification({\n      title: this.COMPONENT_TITLE,\n      body: `Id '${id}' has been copied to clipboard.`,\n    });\n  }\n\n  private fetchBackgrounds() {\n    this.loading = true;\n\n    return this.backgroundService.getBackgrounds(true).pipe(\n      map((backgrounds) => ArrayHelper.sortAlphaNumeric(backgrounds, 'name')),\n      tap((backgrounds) => this.createForm(backgrounds)),\n      finalize(() => (this.loading = false))\n    );\n  }\n\n  private createForm(backgrounds: BackgroundDto[]) {\n    this.form.clear();\n\n    backgrounds.forEach((i) => {\n      const group = this.fb.group({\n        id: [i.id, Validators.required],\n        name: [i.name, Validators.required],\n        tags: [i.tags],\n        url: [i.url, Validators.required],\n        createdAt: [i.createdAt, Validators.required],\n        updatedAt: [i.updatedAt],\n      });\n      merge(\n        group.get('name').valueChanges.pipe(map((val) => ({ name: val }))),\n        group.get('tags').valueChanges.pipe(\n          map((val) => ({\n            tags: val\n              .split(',')\n              .map((tag: string) => tag.trim())\n              .filter((tag: string) => !!tag.length),\n          }))\n        ),\n        group.get('url').valueChanges.pipe(map((val) => ({ url: val })))\n      )\n        .pipe(\n          takeUntil(this.destroyed$),\n          filter(() => {\n            group.updateValueAndValidity();\n            return group.valid;\n          }),\n          debounceTime(TextHelper.DEFAULT_DEBOUNCE_TIME),\n          distinctUntilChanged((x, y) => {\n            const key = Object.keys(y)[0];\n            const oldVal = (x as any)[key];\n            const newVal = (y as any)[key];\n            const isArray = Array.isArray(oldVal);\n            return isArray ? DataHelper.isEqual(oldVal, newVal) : oldVal === newVal;\n          }),\n          map((changes) => ({ id: i.id, ...changes } as Partial<BackgroundDto>)),\n          mergeMap((background) => forkJoin([of(background), this.backgroundService.patchBackground(background)])),\n          tap(([updatedBackground]) => {\n            this.localUpdate(updatedBackground, backgrounds);\n            const updatedBackgroundFull = backgrounds.find((item) => item.id === updatedBackground.id);\n            if (updatedBackgroundFull) {\n              this.addNotification({ ...updatedBackgroundFull, ...updatedBackground }, 'updated');\n            }\n          })\n        )\n        .subscribe();\n\n      this.form.push(group);\n    });\n  }\n\n  private localUpdate(updatedBackground: Partial<BackgroundDto>, backgrounds: BackgroundDto[]) {\n    const clonedBackgrounds = [...backgrounds];\n    const index = clonedBackgrounds.findIndex((background) => background.id === updatedBackground.id);\n    clonedBackgrounds[index] = { ...clonedBackgrounds[index], ...updatedBackground };\n    this.backgrounds$ = of(clonedBackgrounds);\n  }\n\n  private localDelete(backgroundId: string, backgrounds: BackgroundDto[]) {\n    this.backgrounds$ = of([...backgrounds.filter((background) => background.id !== backgroundId)]).pipe(\n      tap(() => {\n        const controlIndex = this.form.controls.findIndex((c) => c.value.id === backgroundId);\n        if (controlIndex) {\n          this.form.removeAt(controlIndex);\n        }\n      })\n    );\n  }\n\n  private addNotification(background: Partial<BackgroundDto>, action: 'updated' | 'deleted') {\n    this.notificationService.addNotification({\n      title: this.COMPONENT_TITLE,\n      body: `Background '${background.name}' has been ${action}.`,\n    });\n  }\n}\n","<div class=\"d-flex flex-column\">\n  <input class=\"d-none\"\n         type=\"file\"\n         multiple\n         accept=\"image/*\"\n         #files\n         (change)=\"selectFiles($event)\" />\n  <button class=\"btn btn-menu btn-icon mb-2 icon-collection\"\n          (click)=\"files.click()\">Select Files</button>\n\n  <ng-container *ngIf=\"selectedFilesArray?.length && !loading\">\n    <table class=\"table\">\n      <thead>\n        <tr>\n          <th scope=\"col\">#</th>\n          <th scope=\"col\">File Name</th>\n          <th scope=\"col\">File Size</th>\n          <th scope=\"col\">Preview</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr *ngFor=\"let file of selectedFilesArray; let i = index; trackBy: trackFn\">\n          <th scope=\"row\">{{ i + 1 }}</th>\n          <td>{{ file.name }}</td>\n          <td>{{ file.size | formatBytes }}</td>\n          <td class=\"text-center\"><img class=\"icon-preview\"\n                 [src]=\"filePreviews.get(file.name) | async\" /></td>\n        </tr>\n      </tbody>\n    </table>\n\n    <button class=\"btn\"\n            (click)=\"uploadBackgrounds()\">Upload Backgrounds</button>\n  </ng-container>\n\n  <span *ngIf=\"loading\"\n        class=\"spinner\"></span>\n</div>\n\n<bd-notifications [items]=\"notifications$ | async\"></bd-notifications>\n","import { Component, ElementRef, OnDestroy, ViewChild } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { Subject, throwError } from 'rxjs';\nimport { catchError, finalize, tap } from 'rxjs/operators';\nimport { BackgroundService } from '../../../core/services/background.service';\n\nimport { NotificationService } from '../../../core/services/notification.service';\n\n@Component({\n  selector: 'bd-bg-bulk-upload',\n  templateUrl: './bg-bulk-upload.component.html',\n  styleUrls: ['./bg-bulk-upload.component.scss'],\n})\nexport class BgBulkUploadComponent implements OnDestroy {\n  @ViewChild('files') public filesEl: ElementRef<HTMLInputElement>;\n  public selectedFiles: FileList;\n  public filePreviews = new Map<string, Promise<string>>();\n  public get selectedFilesArray(): File[] {\n    return Array.from(this.selectedFiles || []);\n  }\n  public loading = false;\n  public notifications$ = this.notificationService.notificationsChanged;\n  private destroyed$ = new Subject<void>();\n\n  constructor(\n    private readonly backgroundService: BackgroundService,\n    private readonly domSanitizer: DomSanitizer,\n    private readonly notificationService: NotificationService\n  ) {}\n\n  public ngOnDestroy() {\n    this.destroyed$.next();\n    this.destroyed$.complete();\n  }\n\n  public selectFiles(event: any) {\n    this.selectedFiles = event.target.files || [];\n\n    this.selectedFilesArray.forEach((file) => {\n      this.filePreviews.set(\n        file.name,\n        new Promise((resolve, reject) => {\n          const reader = new FileReader();\n          reader.onload = () => {\n            resolve(this.domSanitizer.bypassSecurityTrustUrl(reader.result as string) as string);\n          };\n          reader.onerror = (e) => {\n            reject(e);\n          };\n\n          reader.readAsDataURL(file);\n        })\n      );\n    });\n  }\n\n  public uploadBackgrounds() {\n    if (!this.selectedFiles) {\n      return;\n    }\n\n    const formData = new FormData();\n    for (const file of this.selectedFilesArray) {\n      formData.append('files', file);\n    }\n\n    this.backgroundService\n      .uploadBackgrounds(formData)\n      .pipe(\n        tap(() => (this.loading = true)),\n        catchError((e) => throwError(e)),\n        finalize(() => {\n          this.addUploadNotification(this.selectedFilesArray.length);\n          this.loading = false;\n          this.filesEl.nativeElement.value = null;\n        })\n      )\n      .subscribe();\n  }\n\n  public trackFn(_: number, item: File) {\n    return item.name;\n  }\n\n  private addUploadNotification(qty: number) {\n    this.notificationService.addNotification({\n      title: 'Backgrounds Bulk Upload',\n      createdAt: new Date(),\n      body: `${qty} backgrounds have been uploaded.`,\n    });\n  }\n}\n","<button class=\"btn btn-primary btn-add\"\n        (click)=\"isAddingCategory = true\">Add Category</button>\n\n<ng-container *ngIf=\"(categories$ | async)?.length && !loading\">\n  <table class=\"table\">\n    <thead>\n      <tr>\n        <th scope=\"col\">#</th>\n        <th scope=\"col\">Name</th>\n        <th scope=\"col\">Description</th>\n        <th scope=\"col\">Created At</th>\n        <th scope=\"col\">Updated At</th>\n        <th scope=\"col\"></th>\n      </tr>\n    </thead>\n    <tbody>\n      <ng-container *ngFor=\"let category of categoryForms; let i = index\">\n        <tr [formGroup]=\"category\">\n          <td scope=\"row\"\n              class=\"cell-id\"\n              (click)=\"copyId(category.get('id').value)\"><small title=\"Click to copy\">{{ category.get('id').value }}</small></td>\n          <td class=\"cell-name\">\n            <bd-text-input formControlName=\"name\"\n                           [cssClass]=\"getInputCss(category.get('name'))\"></bd-text-input>\n          </td>\n          <td>\n            <bd-text-input formControlName=\"description\"\n                           [cssClass]=\"getInputCss(category.get('description'))\"></bd-text-input>\n          </td>\n          <td>{{ category.get('createdAt').value | date:'short'}}</td>\n          <td>{{ (category.get('updatedAt').value | date:'short') || '-' }}</td>\n          <td class=\"cell-delete\">\n            <button class=\"btn btn-danger btn-icon icon-cross\"\n                    (click)=\"openDeleteModal(category.value)\"></button>\n          </td>\n        </tr>\n      </ng-container>\n    </tbody>\n  </table>\n</ng-container>\n\n<span *ngIf=\"loading\"\n      class=\"spinner\"></span>\n\n<bd-notifications [items]=\"notifications$ | async\"></bd-notifications>\n\n<bd-modal *ngIf=\"isAddingCategory\"\n          modalTitle=\"Add new category\"\n          (closed)=\"cancelAddingCategory()\"\n          (saved)=\"addCategory()\">\n  <form [formGroup]=\"newCategoryForm\">\n    <div class=\"form-group\">\n      <label for=\"name\">Name</label>\n      <bd-text-input inputId=\"name\"\n                     formControlName=\"name\"\n                     placeholder=\"Category name...\"\n                     [cssClass]=\"getInputCss(newCategoryForm.get('name'))\"></bd-text-input>\n    </div>\n    <div class=\"form-group\">\n      <label for=\"description\">Description</label>\n      <bd-text-input inputId=\"description\"\n                     formControlName=\"description\"\n                     placeholder=\"Category description...\"\n                     [cssClass]=\"getInputCss(newCategoryForm.get('description'))\"></bd-text-input>\n    </div>\n  </form>\n</bd-modal>\n\n<bd-modal *ngIf=\"isDeleting\"\n          modalTitle=\"Delete existing category\"\n          (closed)=\"isDeleting = false\"\n          (saved)=\"deleteCategory()\">\n  <div class=\"container\">\n    <p>Are you sure you want to delete category \"{{deleteCategoryControl.value.name}}\"?</p>\n  </div>\n</bd-modal>","import { Component, OnDestroy } from '@angular/core';\nimport { AbstractControl, FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ClipboardService } from 'ngx-clipboard';\nimport { forkJoin, merge, of, Subject } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, filter, finalize, map, mergeMap, takeUntil, tap } from 'rxjs/operators';\n\nimport { CategoryService } from '../../../core/services/category.service';\nimport { NotificationService } from '../../../core/services/notification.service';\nimport { CategoryDto } from '../../../models/dto/category-dto';\nimport { ArrayHelper } from '../../../shared/helpers/array.helper';\nimport { TextHelper } from '../../../shared/helpers/text.helper';\n\n@Component({\n  selector: 'bd-category-management',\n  templateUrl: './category-management.component.html',\n  styleUrls: ['./category-management.component.scss'],\n})\nexport class CategoryManagementComponent implements OnDestroy {\n  public loading = false;\n  public form = new FormArray([]);\n  public categories$ = this.fetchCategories();\n  public notifications$ = this.notificationService.notificationsChanged;\n  public get categoryForms() {\n    return this.form.controls as FormGroup[];\n  }\n  public isAddingCategory = false;\n  public isDeleting = false;\n  public newCategoryForm = this.fb.group({\n    name: [null, Validators.required],\n    description: [null],\n  });\n  public deleteCategoryControl = this.fb.control([null, Validators.required]);\n  private destroyed$ = new Subject<void>();\n  private readonly COMPONENT_TITLE = 'Category Management';\n\n  constructor(\n    private readonly categoryService: CategoryService,\n    private readonly notificationService: NotificationService,\n    private readonly fb: FormBuilder,\n    private readonly clipboardService: ClipboardService\n  ) {}\n\n  public ngOnDestroy() {\n    this.destroyed$.next();\n    this.destroyed$.complete();\n  }\n\n  public getInputCss(categoryFieldControl: AbstractControl) {\n    const cssClass = 'w-100 text-small';\n    return categoryFieldControl.invalid ? `${cssClass} is-invalid` : cssClass;\n  }\n\n  public cancelAddingCategory() {\n    this.isAddingCategory = false;\n    this.newCategoryForm.reset();\n  }\n\n  public addCategory() {\n    if (this.newCategoryForm.invalid) {\n      return;\n    }\n\n    this.loading = true;\n    this.categoryService\n      .addCategory(this.newCategoryForm.value)\n      .pipe(\n        mergeMap(() => this.fetchCategories()),\n        tap(() => {\n          this.addNotification({ name: this.newCategoryForm.value.name }, 'added');\n          this.newCategoryForm.reset();\n        })\n      )\n      .subscribe();\n\n    this.isAddingCategory = false;\n  }\n\n  public openDeleteModal(category: CategoryDto) {\n    this.deleteCategoryControl.setValue(category);\n    this.isDeleting = true;\n  }\n\n  public deleteCategory() {\n    this.loading = true;\n    this.categoryService\n      .deleteCategory(this.deleteCategoryControl.value.id)\n      .pipe(\n        mergeMap(() => this.fetchCategories()),\n        tap(() => {\n          this.addNotification({ name: this.deleteCategoryControl.value.name }, 'deleted');\n          this.deleteCategoryControl.reset();\n        })\n      )\n      .subscribe();\n\n    this.isDeleting = false;\n  }\n\n  public copyId(id: string) {\n    this.clipboardService.copy(id);\n    this.notificationService.addNotification({\n      title: this.COMPONENT_TITLE,\n      body: `Id '${id}' has been copied to clipboard.`,\n    });\n  }\n\n  private fetchCategories() {\n    this.loading = true;\n\n    return this.categoryService.getCategories(true).pipe(\n      map((categories) => ArrayHelper.sortAlphaNumeric(categories, 'name')),\n      tap((categories) => this.createForm(categories)),\n      finalize(() => (this.loading = false))\n    );\n  }\n\n  private createForm(categories: CategoryDto[]) {\n    this.form.clear();\n\n    categories.forEach((i) => {\n      const group = this.fb.group({\n        id: [i.id, Validators.required],\n        name: [i.name, Validators.required],\n        description: [i.description, Validators.required],\n        createdAt: [i.createdAt, Validators.required],\n        updatedAt: [i.updatedAt],\n      });\n      merge(\n        group.get('name').valueChanges.pipe(map((val) => ({ name: val }))),\n        group.get('description').valueChanges.pipe(map((val) => ({ description: val })))\n      )\n        .pipe(\n          takeUntil(this.destroyed$),\n          filter(() => {\n            group.updateValueAndValidity();\n            return group.valid;\n          }),\n          debounceTime(TextHelper.DEFAULT_DEBOUNCE_TIME),\n          distinctUntilChanged((x, y) => {\n            const key = Object.keys(y)[0];\n            return (x as any)[key] === (y as any)[key];\n          }),\n          map((changes) => ({ id: i.id, ...changes } as Partial<CategoryDto>)),\n          mergeMap((category) => forkJoin([of(category), this.categoryService.patchCategory(category)])),\n          tap(([updatedCategory]) => {\n            const updatedCategoryFull = categories.find((item) => item.id === updatedCategory.id);\n            if (updatedCategoryFull) {\n              this.addNotification({ ...updatedCategoryFull, ...updatedCategory }, 'updated');\n            }\n\n            this.categories$ = this.fetchCategories();\n          })\n        )\n        .subscribe();\n\n      this.form.push(group);\n    });\n  }\n\n  private addNotification(category: Partial<CategoryDto>, action: 'added' | 'updated' | 'deleted') {\n    this.notificationService.addNotification({\n      title: this.COMPONENT_TITLE,\n      body: `Category '${category.name}' has been ${action}.`,\n    });\n  }\n}\n","<ng-container *ngIf=\"(icons$ | async)?.length && !loading\">\n  <table class=\"table\">\n    <thead>\n      <tr>\n        <th scope=\"col\">#</th>\n        <th scope=\"col\">Icon</th>\n        <th scope=\"col\">Name</th>\n        <th scope=\"col\">Tags <span>(split with \",\")</span></th>\n        <th scope=\"col\">URL</th>\n        <th scope=\"col\">Type</th>\n        <th scope=\"col\">Premium</th>\n        <th scope=\"col\">Categories</th>\n        <th scope=\"col\">Created At</th>\n        <th scope=\"col\">Updated At</th>\n        <th scope=\"col\"></th>\n      </tr>\n    </thead>\n    <tbody>\n      <ng-container *ngFor=\"let icon of iconForms; let i = index\">\n        <tr [formGroup]=\"icon\">\n          <td scope=\"row\"\n              class=\"cell-id\"\n              (click)=\"copyId(icon.get('id').value)\"><small title=\"Click to copy\">{{ icon.get('id').value }}</small></td>\n          <td><img class=\"icon-preview\"\n                 [src]=\"icon.get('url').value\"></td>\n          <td class=\"cell-name\">\n            <bd-text-input formControlName=\"name\"\n                           [cssClass]=\"getInputCss(icon.get('name'))\"></bd-text-input>\n          </td>\n          <td>\n            <textarea formControlName=\"tags\"></textarea>\n          </td>\n          <td>\n            <bd-text-input formControlName=\"url\"\n                           [cssClass]=\"getInputCss(icon.get('url'))\"></bd-text-input>\n          </td>\n          <td class=\"cell-type\">\n            <bd-dropdown formControlName=\"type\"\n                         [items]=\"iconTypes\"\n                         valueProp=\"id\"\n                         labelProp=\"name\"\n                         [cssClass]=\"getInputCss(icon.get('type'))\"></bd-dropdown>\n          </td>\n          <td>\n            <div class=\"d-flex justify-content-center align-items-center checkbox-wrapper\"\n                 *ngIf=\"icon.value.type === IconType.Vector\">\n              <input type=\"checkbox\"\n                     class=\"checkbox mr-2\"\n                     [value]=\"icon.value.isPremium\"\n                     [checked]=\"icon.value.isPremium\"\n                     formControlName=\"isPremium\">\n            </div>\n          </td>\n          <td>\n            <div class=\"d-flex align-items-center checkbox-wrapper\"\n                 *ngFor=\"let category of categories$ | async\">\n              <input type=\"checkbox\"\n                     class=\"checkbox mr-2\"\n                     [value]=\"category\"\n                     [checked]=\"hasCategory(icon.value, category)\"\n                     (change)=\"toggleCategory(icon.value, category, icon)\"\n                     id=\"category-checkbox-{{i}}-{{category.id}}\">\n              <label for=\"category-checkbox-{{i}}-{{category.id}}\">\n                {{category.name}}\n              </label>\n            </div>\n          </td>\n          <td><small>{{ icon.get('createdAt').value | date:'short'}}</small></td>\n          <td><small>{{ (icon.get('updatedAt').value | date:'short') || '-' }}</small></td>\n          <td class=\"cell-delete\">\n            <button class=\"btn btn-danger btn-icon icon-cross\"\n                    (click)=\"openDeleteModal(icon.value)\"></button>\n          </td>\n        </tr>\n      </ng-container>\n    </tbody>\n  </table>\n</ng-container>\n\n<span *ngIf=\"loading\"\n      class=\"spinner\"></span>\n\n<bd-notifications [items]=\"notifications$ | async\"></bd-notifications>\n\n<bd-modal *ngIf=\"isDeleting\"\n          modalTitle=\"Delete existing icon\"\n          (closed)=\"isDeleting = false\"\n          (saved)=\"deleteIcon()\">\n  <div class=\"container\">\n    <p>Are you sure you want to delete icon \"{{deleteIconControl.value.name}}\"?</p>\n  </div>\n</bd-modal>\n","import { Component, OnDestroy } from '@angular/core';\nimport { AbstractControl, FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ClipboardService } from 'ngx-clipboard';\nimport { forkJoin, merge, Observable, of, Subject } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, filter, finalize, map, mergeMap, takeUntil, tap } from 'rxjs/operators';\n\nimport { CategoryService } from '../../../core/services/category.service';\nimport { IconService } from '../../../core/services/icon.service';\nimport { NotificationService } from '../../../core/services/notification.service';\nimport { CategoryDto } from '../../../models/dto/category-dto';\nimport { IconDto } from '../../../models/dto/icon-dto';\nimport { IconType } from '../../../models/enums/icon-type';\nimport { ArrayHelper } from '../../../shared/helpers/array.helper';\nimport { DataHelper } from '../../../shared/helpers/data.helper';\nimport { TextHelper } from '../../../shared/helpers/text.helper';\n\n@Component({\n  selector: 'bd-icon-management',\n  templateUrl: './icon-management.component.html',\n  styleUrls: ['./icon-management.component.scss'],\n})\nexport class IconManagementComponent implements OnDestroy {\n  public loading = false;\n  public form = new FormArray([]);\n  public icons$ = this.fetchIcons();\n  public IconType = IconType;\n  public iconTypes = Object.entries(IconType).map(([key, value]) => ({ id: value, name: key }));\n  public categories$ = this.categoryService.getCategories();\n  public notifications$ = this.notificationService.notificationsChanged;\n  public get iconForms() {\n    return this.form.controls as FormGroup[];\n  }\n  public isDeleting = false;\n  public deleteIconControl = this.fb.control([null, Validators.required]);\n  private destroyed$ = new Subject<void>();\n  private readonly COMPONENT_TITLE = 'Icon Management';\n\n  constructor(\n    private readonly iconService: IconService,\n    private readonly categoryService: CategoryService,\n    private readonly notificationService: NotificationService,\n    private readonly fb: FormBuilder,\n    private readonly clipboardService: ClipboardService\n  ) {}\n\n  public ngOnDestroy() {\n    this.destroyed$.next();\n    this.destroyed$.complete();\n  }\n\n  public getIconType(type: IconType) {\n    switch (type) {\n      case IconType.Raster:\n        return 'Raster';\n      case IconType.Vector:\n        return 'Vector';\n      default:\n        return '-';\n    }\n  }\n\n  public hasCategory(icon: IconDto, category: CategoryDto) {\n    return icon.categories?.some((cat) => cat.id === category.id);\n  }\n\n  public toggleCategory(icon: IconDto, category: CategoryDto, iconControl: FormGroup) {\n    let updatedIcon: Partial<IconDto>;\n    let obs$: Observable<any>;\n\n    if (this.hasCategory(icon, category)) {\n      updatedIcon = { id: icon.id, categories: icon.categories.filter((cat) => cat.id !== category.id) };\n      obs$ = this.iconService.deleteIconCategory(icon.id, category.id);\n    } else {\n      updatedIcon = { id: icon.id, categories: [...icon.categories, category] };\n      obs$ = this.iconService.addIconCategory(icon.id, category.id);\n    }\n\n    return obs$.pipe(tap(() => iconControl.get('categories').setValue(updatedIcon.categories))).subscribe();\n  }\n\n  public getInputCss(iconFieldControl: AbstractControl) {\n    const cssClass = 'w-100 text-small';\n    return iconFieldControl.invalid ? `${cssClass} is-invalid` : cssClass;\n  }\n\n  public openDeleteModal(icon: IconDto) {\n    this.deleteIconControl.setValue(icon);\n    this.isDeleting = true;\n  }\n\n  public deleteIcon() {\n    this.loading = true;\n    this.iconService\n      .deleteIcon(this.deleteIconControl.value.id)\n      .pipe(\n        mergeMap(() => this.icons$),\n        tap((icons) => {\n          this.localDelete(this.deleteIconControl.value.id, icons);\n          this.addNotification({ name: this.deleteIconControl.value.name }, 'deleted');\n          this.deleteIconControl.reset();\n        }),\n        finalize(() => (this.loading = false))\n      )\n      .subscribe();\n\n    this.isDeleting = false;\n  }\n\n  public copyId(id: string) {\n    this.clipboardService.copy(id);\n    this.notificationService.addNotification({\n      title: this.COMPONENT_TITLE,\n      body: `Id '${id}' has been copied to clipboard.`,\n    });\n  }\n\n  private fetchIcons() {\n    this.loading = true;\n\n    return this.iconService.getIcons({}, true).pipe(\n      map((icons) => ArrayHelper.sortAlphaNumeric(icons, 'name')),\n      tap((icons) => this.createForm(icons)),\n      finalize(() => (this.loading = false))\n    );\n  }\n\n  private createForm(icons: IconDto[]) {\n    this.form.clear();\n\n    icons.forEach((i) => {\n      const group = this.fb.group({\n        id: [i.id, Validators.required],\n        name: [i.name, Validators.required],\n        tags: [i.tags],\n        url: [i.url, Validators.required],\n        type: [i.type, Validators.required],\n        isPremium: [i.isPremium, Validators.required],\n        categories: [i.categories],\n        createdAt: [i.createdAt, Validators.required],\n        updatedAt: [i.updatedAt],\n      });\n      merge(\n        group.get('name').valueChanges.pipe(map((val) => ({ name: val }))),\n        group.get('tags').valueChanges.pipe(\n          map((val) => ({\n            tags: val\n              .split(',')\n              .map((tag: string) => tag.trim())\n              .filter((tag: string) => !!tag.length),\n          }))\n        ),\n        group.get('url').valueChanges.pipe(map((val) => ({ url: val }))),\n        group.get('type').valueChanges.pipe(map((val) => ({ type: val }))),\n        group.get('isPremium').valueChanges.pipe(map((val) => ({ isPremium: val })))\n      )\n        .pipe(\n          takeUntil(this.destroyed$),\n          filter(() => {\n            group.updateValueAndValidity();\n            return group.valid;\n          }),\n          debounceTime(TextHelper.DEFAULT_DEBOUNCE_TIME),\n          distinctUntilChanged((x, y) => {\n            const key = Object.keys(y)[0];\n            const oldVal = (x as any)[key];\n            const newVal = (y as any)[key];\n            const isArray = Array.isArray(oldVal);\n            return isArray ? DataHelper.isEqual(oldVal, newVal) : oldVal === newVal;\n          }),\n          map((changes) => ({ id: i.id, ...changes } as Partial<IconDto>)),\n          mergeMap((icon) => forkJoin([of(icon), this.iconService.patchIcon(icon)])),\n          tap(([updatedIcon]) => {\n            this.localUpdate(updatedIcon, icons);\n            const updatedIconFull = icons.find((item) => item.id === updatedIcon.id);\n            if (updatedIconFull) {\n              this.addNotification({ ...updatedIconFull, ...updatedIcon }, 'updated');\n            }\n          })\n        )\n        .subscribe();\n\n      group\n        .get('categories')\n        .valueChanges.pipe(map((val) => ({ categories: val })))\n        .pipe(\n          // TODO: reuse shared pipe elements\n          takeUntil(this.destroyed$),\n          map((changes) => ({ id: i.id, ...changes } as Partial<IconDto>)),\n          tap((updatedIcon) => {\n            this.localUpdate(updatedIcon, icons);\n            const updatedIconFull = icons.find((item) => item.id === updatedIcon.id);\n            if (updatedIconFull) {\n              this.addNotification({ ...updatedIconFull, ...updatedIcon }, 'updated');\n            }\n          })\n        )\n        .subscribe();\n\n      this.form.push(group);\n    });\n  }\n\n  private localUpdate(updatedIcon: Partial<IconDto>, icons: IconDto[]) {\n    const clonedIcons = [...icons];\n    const index = clonedIcons.findIndex((icon) => icon.id === updatedIcon.id);\n    clonedIcons[index] = { ...clonedIcons[index], ...updatedIcon };\n    this.icons$ = of(clonedIcons);\n  }\n\n  private localDelete(iconId: string, icons: IconDto[]) {\n    this.icons$ = of([...icons.filter((icon) => icon.id !== iconId)]).pipe(\n      tap(() => {\n        const controlIndex = this.form.controls.findIndex((c) => c.value.id === iconId);\n        if (controlIndex) {\n          this.form.removeAt(controlIndex);\n        }\n      })\n    );\n  }\n\n  private addNotification(icon: Partial<IconDto>, action: 'updated' | 'deleted') {\n    this.notificationService.addNotification({\n      title: this.COMPONENT_TITLE,\n      body: `Icon '${icon.name}' has been ${action}.`,\n    });\n  }\n}\n","<div class=\"d-flex flex-column\">\n  <input class=\"d-none\"\n         type=\"file\"\n         multiple\n         accept=\"image/*\"\n         #files\n         (change)=\"selectFiles($event)\" />\n  <button class=\"btn btn-menu btn-icon mb-2 icon-collection\"\n          (click)=\"files.click()\">Select Files</button>\n\n  <ng-container *ngIf=\"selectedFilesArray?.length && !loading\">\n    <table class=\"table\">\n      <thead>\n        <tr>\n          <th scope=\"col\">#</th>\n          <th scope=\"col\">File Name</th>\n          <th scope=\"col\">File Size</th>\n          <th scope=\"col\">Preview</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr *ngFor=\"let file of selectedFilesArray; let i = index; trackBy: trackFn\">\n          <th scope=\"row\">{{ i + 1 }}</th>\n          <td>{{ file.name }}</td>\n          <td>{{ file.size | formatBytes }}</td>\n          <td class=\"text-center\"><img class=\"icon-preview\"\n                 [src]=\"filePreviews.get(file.name) | async\" /></td>\n        </tr>\n      </tbody>\n    </table>\n\n    <button class=\"btn\"\n            (click)=\"uploadIcons()\">Upload Icons</button>\n  </ng-container>\n\n  <span *ngIf=\"loading\"\n        class=\"spinner\"></span>\n</div>\n\n<bd-notifications [items]=\"notifications$ | async\"></bd-notifications>","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { AdminGuard } from '../../core/guards/admin.guard';\nimport { AdminHomeComponent } from './admin-home/admin-home.component';\nimport { AdminComponent } from './admin.component';\nimport { BackgroundManagementComponent } from './background-management/background-management.component';\nimport { BgBulkUploadComponent } from './bg-bulk-upload/bg-bulk-upload.component';\nimport { CategoryManagementComponent } from './category-management/category-management.component';\nimport { IconManagementComponent } from './icon-management/icon-management.component';\nimport { IconsBulkUploadComponent } from './icons-bulk-upload/icons-bulk-upload.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AdminComponent,\n    canActivate: [AdminGuard],\n    children: [\n      { path: '', component: AdminHomeComponent },\n      {\n        path: 'icons',\n        children: [\n          { path: 'upload', component: IconsBulkUploadComponent },\n          { path: '', component: IconManagementComponent },\n        ],\n      },\n      { path: 'categories', component: CategoryManagementComponent },\n      {\n        path: 'backgrounds',\n        children: [\n          { path: 'upload', component: BgBulkUploadComponent },\n          { path: '', component: BackgroundManagementComponent },\n        ],\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AdminRoutingModule {}\n","import { Component, ElementRef, OnDestroy, ViewChild } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { Subject, throwError } from 'rxjs';\nimport { catchError, finalize, tap } from 'rxjs/operators';\n\nimport { IconService } from '../../../core/services/icon.service';\nimport { NotificationService } from '../../../core/services/notification.service';\n\n@Component({\n  selector: 'bd-icons-bulk-upload',\n  templateUrl: './icons-bulk-upload.component.html',\n  styleUrls: ['./icons-bulk-upload.component.scss'],\n})\nexport class IconsBulkUploadComponent implements OnDestroy {\n  @ViewChild('files') public filesEl: ElementRef<HTMLInputElement>;\n  public selectedFiles: FileList;\n  public filePreviews = new Map<string, Promise<string>>();\n  public get selectedFilesArray(): File[] {\n    return Array.from(this.selectedFiles || []);\n  }\n  public loading = false;\n  public notifications$ = this.notificationService.notificationsChanged;\n  private destroyed$ = new Subject<void>();\n\n  constructor(\n    private readonly iconService: IconService,\n    private readonly domSanitizer: DomSanitizer,\n    private readonly notificationService: NotificationService\n  ) {}\n\n  public ngOnDestroy() {\n    this.destroyed$.next();\n    this.destroyed$.complete();\n  }\n\n  public selectFiles(event: any) {\n    this.selectedFiles = event.target.files || [];\n\n    this.selectedFilesArray.forEach((file) => {\n      this.filePreviews.set(\n        file.name,\n        new Promise((resolve, reject) => {\n          const reader = new FileReader();\n          reader.onload = () => {\n            resolve(this.domSanitizer.bypassSecurityTrustUrl(reader.result as string) as string);\n          };\n          reader.onerror = (e) => {\n            reject(e);\n          };\n\n          reader.readAsDataURL(file);\n        })\n      );\n    });\n  }\n\n  public uploadIcons() {\n    if (!this.selectedFiles) {\n      return;\n    }\n\n    const formData = new FormData();\n    for (const file of this.selectedFilesArray) {\n      formData.append('files', file);\n    }\n\n    this.iconService\n      .uploadIcons(formData)\n      .pipe(\n        tap(() => (this.loading = true)),\n        catchError((e) => throwError(e)),\n        finalize(() => {\n          this.addUploadNotification(this.selectedFilesArray.length);\n          this.loading = false;\n          this.filesEl.nativeElement.value = null;\n        })\n      )\n      .subscribe();\n  }\n\n  public trackFn(_: number, item: File) {\n    return item.name;\n  }\n\n  private addUploadNotification(iconsQty: number) {\n    this.notificationService.addNotification({\n      title: 'Icons Bulk Upload',\n      createdAt: new Date(),\n      body: `${iconsQty} icons have been uploaded.`,\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AdminRoutingModule } from './admin-routing.module';\nimport { AdminComponent } from './admin.component';\nimport { SharedModule } from '../../shared/shared.module';\nimport { IconsBulkUploadComponent } from './icons-bulk-upload/icons-bulk-upload.component';\nimport { IconManagementComponent } from './icon-management/icon-management.component';\nimport { AdminHomeComponent } from './admin-home/admin-home.component';\nimport { CategoryManagementComponent } from './category-management/category-management.component';\nimport { BackgroundManagementComponent } from './background-management/background-management.component';\nimport { BgBulkUploadComponent } from './bg-bulk-upload/bg-bulk-upload.component';\n\n@NgModule({\n  declarations: [\n    AdminComponent,\n    IconsBulkUploadComponent,\n    BgBulkUploadComponent,\n    IconManagementComponent,\n    AdminHomeComponent,\n    CategoryManagementComponent,\n    BackgroundManagementComponent,\n  ],\n  imports: [CommonModule, AdminRoutingModule, SharedModule],\n})\nexport class AdminModule {}\n"]}