{"version":3,"sources":["webpack:///src/app/modules/admin/admin-home/admin-home.component.ts","webpack:///src/app/core/guards/admin.guard.ts","webpack:///src/app/core/guards/auth.guard.ts","webpack:///src/app/modules/admin/admin.component.ts","webpack:///src/app/core/services/notification.service.ts","webpack:///src/app/modules/admin/admin-home/admin-home.component.html","webpack:///src/app/modules/admin/admin.component.html","webpack:///src/app/modules/admin/background-management/background-management.component.html","webpack:///src/app/modules/admin/background-management/background-management.component.ts","webpack:///src/app/modules/admin/bg-bulk-upload/bg-bulk-upload.component.html","webpack:///src/app/modules/admin/bg-bulk-upload/bg-bulk-upload.component.ts","webpack:///src/app/modules/admin/category-management/category-management.component.html","webpack:///src/app/modules/admin/category-management/category-management.component.ts","webpack:///src/app/modules/admin/icon-management/icon-management.component.html","webpack:///src/app/modules/admin/icon-management/icon-management.component.ts","webpack:///src/app/modules/admin/icons-bulk-upload/icons-bulk-upload.component.html","webpack:///src/app/modules/admin/admin-routing.module.ts","webpack:///src/app/modules/admin/icons-bulk-upload/icons-bulk-upload.component.ts","webpack:///src/app/modules/admin/admin.module.ts"],"names":["AdminHomeComponent","AdminGuard","AuthGuard","AdminComponent","NotificationService","authService","router","_","state","sessionData","this","getSessionData","existingToken","getToken","of","verifyToken","pipe","map","data","redirect","url","catchError","navigate","queryParams","redirectUrl","authGuard","route","canActivate","isAuthorized","user","isAdmin","adminTabs","id","IconManagement","title","IconsBulkUpload","CategoryManagement","BackgroundManagement","BgBulkUpload","TabId","tabId","tab","find","t","logout","subscribe","username","toWebsite","onTabChange","DEFAULT_DURATION","notifications$","BehaviorSubject","notification","createdAt","Date","next","value","setTimeout","filter","n","getTime","duration","asObservable","BackgroundManagementComponent","backgroundService","notificationService","fb","clipboardService","loading","form","backgrounds$","fetchBackgrounds","notificationsChanged","isDeleting","deleteBackgroundControl","control","required","destroyed$","Subject","COMPONENT_TITLE","complete","backgroundFieldControl","invalid","background","setValue","deleteBackground","mergeMap","tap","backgrounds","localDelete","addNotification","name","reset","finalize","copy","body","getBackgrounds","sortAlphaNumeric","createForm","clear","forEach","i","group","tags","updatedAt","merge","get","valueChanges","val","split","tag","trim","length","takeUntil","updateValueAndValidity","valid","debounceTime","DEFAULT_DEBOUNCE_TIME","distinctUntilChanged","x","y","key","Object","keys","oldVal","newVal","Array","isArray","isEqual","changes","forkJoin","patchBackground","updatedBackground","localUpdate","updatedBackgroundFull","item","push","clonedBackgrounds","index","findIndex","backgroundId","controlIndex","controls","c","removeAt","action","BgBulkUploadComponent","domSanitizer","filePreviews","Map","event","selectedFiles","target","files","selectedFilesArray","file","set","Promise","resolve","reject","reader","FileReader","onload","bypassSecurityTrustUrl","result","onerror","e","readAsDataURL","formData","FormData","append","uploadBackgrounds","throwError","addUploadNotification","filesEl","nativeElement","qty","from","selectFiles","CategoryManagementComponent","categoryService","categories$","fetchCategories","isAddingCategory","newCategoryForm","description","deleteCategoryControl","categoryFieldControl","addCategory","category","deleteCategory","getCategories","categories","patchCategory","updatedCategory","updatedCategoryFull","IconManagementComponent","iconService","icons$","fetchIcons","IconType","iconTypes","entries","deleteIconControl","type","Raster","Vector","icon","some","cat","iconControl","updatedIcon","obs$","hasCategory","deleteIconCategory","addIconCategory","iconFieldControl","deleteIcon","icons","getIcons","isPremium","patchIcon","updatedIconFull","clonedIcons","iconId","IconsBulkUploadComponent","AdminRoutingModule","AdminModule","routes","path","component","children","uploadIcons","iconsQty","forChild"],"mappings":"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","file":"x","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'bd-admin-home',\r\n  templateUrl: './admin-home.component.html',\r\n  styleUrls: ['./admin-home.component.scss'],\r\n})\r\nexport class AdminHomeComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\n\r\nimport { AuthService } from '../services/auth.service';\r\nimport { AuthGuard } from './auth.guard';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AdminGuard implements CanActivate {\r\n  constructor(\r\n    private readonly authService: AuthService,\r\n    private readonly router: Router,\r\n    private readonly authGuard: AuthGuard\r\n  ) {}\r\n\r\n  public canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\r\n    const isAuthorized$ = this.authGuard.canActivate(route, state);\r\n    return isAuthorized$.pipe(\r\n      map((isAuthorized) => {\r\n        if (!isAuthorized) {\r\n          return this.redirect(state.url);\r\n        }\r\n\r\n        const res = this.authService.getSessionData()?.user?.isAdmin;\r\n        if (!res) {\r\n          return this.redirect(state.url);\r\n        } else {\r\n          return true;\r\n        }\r\n      }),\r\n      catchError(() => of(this.redirect(state.url)))\r\n    );\r\n  }\r\n  private redirect(url: string) {\r\n    this.router.navigate(['login'], { queryParams: { redirectUrl: url } });\r\n    return false;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\n\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(private readonly authService: AuthService, private readonly router: Router) {}\r\n\r\n  public canActivate(_: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\r\n    const sessionData = this.authService.getSessionData();\r\n    const existingToken = this.authService.getToken();\r\n\r\n    if (!sessionData) {\r\n      if (!existingToken) {\r\n        return of(false).pipe(map(() => this.redirect(state.url)));\r\n      }\r\n\r\n      return this.authService.verifyToken().pipe(\r\n        map((data) => {\r\n          if (!data) {\r\n            return this.redirect(state.url);\r\n          } else {\r\n            return true;\r\n          }\r\n        }),\r\n        catchError(() => of(this.redirect(state.url)))\r\n      );\r\n    } else {\r\n      return of(true);\r\n    }\r\n  }\r\n\r\n  private redirect(url: string) {\r\n    this.router.navigate(['login'], { queryParams: { redirectUrl: url } });\r\n    return false;\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { AuthService } from '../../core/services/auth.service';\r\nimport { TabId } from '../../models/enums/tab-id';\r\nimport { NavTab } from '../../models/interfaces/nav-tab';\r\n\r\n@Component({\r\n  selector: 'bd-admin',\r\n  templateUrl: './admin.component.html',\r\n  styleUrls: ['./admin.component.scss'],\r\n})\r\nexport class AdminComponent {\r\n  public adminTabs: NavTab[] = [\r\n    {\r\n      id: TabId.IconManagement,\r\n      title: 'Icon Management',\r\n      url: '/admin/icons',\r\n    },\r\n    {\r\n      id: TabId.IconsBulkUpload,\r\n      title: 'Icons Bulk Upload',\r\n      url: '/admin/icons/upload',\r\n    },\r\n    {\r\n      id: TabId.CategoryManagement,\r\n      title: 'Category Management',\r\n      url: '/admin/categories',\r\n    },\r\n    {\r\n      id: TabId.BackgroundManagement,\r\n      title: 'Background Management',\r\n      url: '/admin/backgrounds',\r\n    },\r\n    {\r\n      id: TabId.BgBulkUpload,\r\n      title: 'Backgrounds Bulk Upload',\r\n      url: '/admin/backgrounds/upload',\r\n    },\r\n  ];\r\n  // public activeTabId: TabId;\r\n  public TabId = TabId;\r\n  public get username() {\r\n    return this.authService.username || 'ADMIN';\r\n  }\r\n\r\n  constructor(private readonly authService: AuthService, private readonly router: Router) {}\r\n\r\n  public onTabChange(tabId: TabId) {\r\n    const tab = this.adminTabs.find((t) => t.id === tabId);\r\n    this.router.navigate([tab.url]);\r\n  }\r\n\r\n  public toWebsite() {\r\n    this.router.navigate(['']);\r\n  }\r\n\r\n  public logout() {\r\n    this.authService.logout().subscribe();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Subject } from 'rxjs';\r\nimport { Notification } from '../../models/interfaces/notification';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class NotificationService {\r\n  public readonly DEFAULT_DURATION = 4000;\r\n  public get notificationsChanged() {\r\n    return this.notifications$.asObservable();\r\n  }\r\n  private notifications$ = new BehaviorSubject<Notification[]>([]);\r\n\r\n  public addNotification(notification: Notification) {\r\n    if (!notification.createdAt) {\r\n      notification.createdAt = new Date();\r\n    }\r\n\r\n    this.notifications$.next([...this.notifications$.value, notification]);\r\n\r\n    setTimeout(\r\n      () =>\r\n        this.notifications$.next(\r\n          this.notifications$.value.filter((n) => n.createdAt.getTime() !== notification.createdAt.getTime())\r\n        ),\r\n      notification.duration || this.DEFAULT_DURATION\r\n    );\r\n  }\r\n}\r\n","<div class=\"d-flex justify-content-center align-items-center my-5\">\r\n  <h5>Please select a tool above</h5>\r\n</div>","<div class=\"position-fixed w-100 header-wrapper\">\r\n  <div class=\"d-flex justify-content-end align-items-center p-2 border-bottom\">\r\n    <a class=\"mr-auto app-logo\"\r\n       routerLink=\"\"></a>\r\n    <h5 class=\"m-0 mr-3\">Welcome, {{ username }}</h5>\r\n    <button class=\"btn btn-primary mr-3\"\r\n            (click)=\"toWebsite()\">Go to Website</button>\r\n    <button class=\"btn btn-primary\"\r\n            (click)=\"logout()\">Logout</button>\r\n  </div>\r\n\r\n  <bd-tabs [tabs]=\"adminTabs\"\r\n           [snap]=\"'bottom'\"\r\n           (tabChange)=\"onTabChange($event)\"\r\n           class=\"pt-3\"></bd-tabs>\r\n</div>\r\n\r\n<div class=\"d-flex flex-column content-wrapper\">\r\n  <router-outlet></router-outlet>\r\n</div>","<ng-container *ngIf=\"(backgrounds$ | async)?.length && !loading\">\r\n  <table class=\"table\">\r\n    <thead>\r\n      <tr>\r\n        <th scope=\"col\">#</th>\r\n        <th scope=\"col\">Background</th>\r\n        <th scope=\"col\">Name</th>\r\n        <th scope=\"col\">Tags <span>(split with \",\")</span></th>\r\n        <th scope=\"col\">URL</th>\r\n        <th scope=\"col\">Created At</th>\r\n        <th scope=\"col\">Updated At</th>\r\n        <th scope=\"col\"></th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      <ng-container *ngFor=\"let background of backgroundForms; let i = index\">\r\n        <tr [formGroup]=\"background\">\r\n          <td scope=\"row\"\r\n              class=\"cell-id\"\r\n              (click)=\"copyId(background.get('id').value)\"><small title=\"Click to copy\">{{ background.get('id').value }}</small></td>\r\n          <td><img class=\"background-preview\"\r\n                 [src]=\"background.get('url').value\"></td>\r\n          <td class=\"cell-name\">\r\n            <bd-text-input formControlName=\"name\"\r\n                           [cssClass]=\"getInputCss(background.get('name'))\"></bd-text-input>\r\n          </td>\r\n          <td>\r\n            <textarea formControlName=\"tags\"></textarea>\r\n          </td>\r\n          <td>\r\n            <bd-text-input formControlName=\"url\"\r\n                           [cssClass]=\"getInputCss(background.get('url'))\"></bd-text-input>\r\n          </td>\r\n          <td><small>{{ background.get('createdAt').value | date:'short'}}</small></td>\r\n          <td><small>{{ (background.get('updatedAt').value | date:'short') || '-' }}</small></td>\r\n          <td class=\"cell-delete\">\r\n            <button class=\"btn btn-danger btn-icon icon-cross\"\r\n                    (click)=\"openDeleteModal(background.value)\"></button>\r\n          </td>\r\n        </tr>\r\n      </ng-container>\r\n    </tbody>\r\n  </table>\r\n</ng-container>\r\n\r\n<span *ngIf=\"loading\"\r\n      class=\"spinner\"></span>\r\n\r\n<bd-notifications [items]=\"notifications$ | async\"></bd-notifications>\r\n\r\n<bd-modal *ngIf=\"isDeleting\"\r\n          modalTitle=\"Delete existing background\"\r\n          (closed)=\"isDeleting = false\"\r\n          (saved)=\"deleteBackground()\">\r\n  <div class=\"container\">\r\n    <p>Are you sure you want to delete background \"{{deleteBackgroundControl.value.name}}\"?</p>\r\n  </div>\r\n</bd-modal>\r\n","import { Component, OnDestroy } from '@angular/core';\r\nimport { AbstractControl, FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ClipboardService } from 'ngx-clipboard';\r\nimport { forkJoin, merge, of, Subject } from 'rxjs';\r\nimport { debounceTime, distinctUntilChanged, filter, finalize, map, mergeMap, takeUntil, tap } from 'rxjs/operators';\r\n\r\nimport { BackgroundService } from '../../../core/services/background.service';\r\nimport { NotificationService } from '../../../core/services/notification.service';\r\nimport { BackgroundDto } from '../../../models/dto/background-dto';\r\nimport { ArrayHelper } from '../../../shared/helpers/array.helper';\r\nimport { DataHelper } from '../../../shared/helpers/data.helper';\r\nimport { TextHelper } from '../../../shared/helpers/text.helper';\r\n\r\n@Component({\r\n  selector: 'bd-background-management',\r\n  templateUrl: './background-management.component.html',\r\n  styleUrls: ['./background-management.component.scss'],\r\n})\r\nexport class BackgroundManagementComponent implements OnDestroy {\r\n  public loading = false;\r\n  public form = new FormArray([]);\r\n  public backgrounds$ = this.fetchBackgrounds();\r\n  public notifications$ = this.notificationService.notificationsChanged;\r\n  public get backgroundForms() {\r\n    return this.form.controls as FormGroup[];\r\n  }\r\n  public isDeleting = false;\r\n  public deleteBackgroundControl = this.fb.control([null, Validators.required]);\r\n  private destroyed$ = new Subject<void>();\r\n  private readonly COMPONENT_TITLE = 'Background Management';\r\n\r\n  constructor(\r\n    private readonly backgroundService: BackgroundService,\r\n    private readonly notificationService: NotificationService,\r\n    private readonly fb: FormBuilder,\r\n    private readonly clipboardService: ClipboardService\r\n  ) {}\r\n\r\n  public ngOnDestroy() {\r\n    this.destroyed$.next();\r\n    this.destroyed$.complete();\r\n  }\r\n\r\n  public getInputCss(backgroundFieldControl: AbstractControl) {\r\n    const cssClass = 'w-100 text-small';\r\n    return backgroundFieldControl.invalid ? `${cssClass} is-invalid` : cssClass;\r\n  }\r\n\r\n  public openDeleteModal(background: BackgroundDto) {\r\n    this.deleteBackgroundControl.setValue(background);\r\n    this.isDeleting = true;\r\n  }\r\n\r\n  public deleteBackground() {\r\n    this.loading = true;\r\n    this.backgroundService\r\n      .deleteBackground(this.deleteBackgroundControl.value.id)\r\n      .pipe(\r\n        mergeMap(() => this.backgrounds$),\r\n        tap((backgrounds) => {\r\n          this.localDelete(this.deleteBackgroundControl.value.id, backgrounds);\r\n          this.addNotification({ name: this.deleteBackgroundControl.value.name }, 'deleted');\r\n          this.deleteBackgroundControl.reset();\r\n        }),\r\n        finalize(() => (this.loading = false))\r\n      )\r\n      .subscribe();\r\n\r\n    this.isDeleting = false;\r\n  }\r\n\r\n  public copyId(id: string) {\r\n    this.clipboardService.copy(id);\r\n    this.notificationService.addNotification({\r\n      title: this.COMPONENT_TITLE,\r\n      body: `Id '${id}' has been copied to clipboard.`,\r\n    });\r\n  }\r\n\r\n  private fetchBackgrounds() {\r\n    this.loading = true;\r\n\r\n    return this.backgroundService.getBackgrounds(true).pipe(\r\n      map((backgrounds) => ArrayHelper.sortAlphaNumeric(backgrounds, 'name')),\r\n      tap((backgrounds) => this.createForm(backgrounds)),\r\n      finalize(() => (this.loading = false))\r\n    );\r\n  }\r\n\r\n  private createForm(backgrounds: BackgroundDto[]) {\r\n    this.form.clear();\r\n\r\n    backgrounds.forEach((i) => {\r\n      const group = this.fb.group({\r\n        id: [i.id, Validators.required],\r\n        name: [i.name, Validators.required],\r\n        tags: [i.tags],\r\n        url: [i.url, Validators.required],\r\n        createdAt: [i.createdAt, Validators.required],\r\n        updatedAt: [i.updatedAt],\r\n      });\r\n      merge(\r\n        group.get('name').valueChanges.pipe(map((val) => ({ name: val }))),\r\n        group.get('tags').valueChanges.pipe(\r\n          map((val) => ({\r\n            tags: val\r\n              .split(',')\r\n              .map((tag: string) => tag.trim())\r\n              .filter((tag: string) => !!tag.length),\r\n          }))\r\n        ),\r\n        group.get('url').valueChanges.pipe(map((val) => ({ url: val })))\r\n      )\r\n        .pipe(\r\n          takeUntil(this.destroyed$),\r\n          filter(() => {\r\n            group.updateValueAndValidity();\r\n            return group.valid;\r\n          }),\r\n          debounceTime(TextHelper.DEFAULT_DEBOUNCE_TIME),\r\n          distinctUntilChanged((x, y) => {\r\n            const key = Object.keys(y)[0];\r\n            const oldVal = (x as any)[key];\r\n            const newVal = (y as any)[key];\r\n            const isArray = Array.isArray(oldVal);\r\n            return isArray ? DataHelper.isEqual(oldVal, newVal) : oldVal === newVal;\r\n          }),\r\n          map((changes) => ({ id: i.id, ...changes } as Partial<BackgroundDto>)),\r\n          mergeMap((background) => forkJoin([of(background), this.backgroundService.patchBackground(background)])),\r\n          tap(([updatedBackground]) => {\r\n            this.localUpdate(updatedBackground, backgrounds);\r\n            const updatedBackgroundFull = backgrounds.find((item) => item.id === updatedBackground.id);\r\n            if (updatedBackgroundFull) {\r\n              this.addNotification({ ...updatedBackgroundFull, ...updatedBackground }, 'updated');\r\n            }\r\n          })\r\n        )\r\n        .subscribe();\r\n\r\n      this.form.push(group);\r\n    });\r\n  }\r\n\r\n  private localUpdate(updatedBackground: Partial<BackgroundDto>, backgrounds: BackgroundDto[]) {\r\n    const clonedBackgrounds = [...backgrounds];\r\n    const index = clonedBackgrounds.findIndex((background) => background.id === updatedBackground.id);\r\n    clonedBackgrounds[index] = { ...clonedBackgrounds[index], ...updatedBackground };\r\n    this.backgrounds$ = of(clonedBackgrounds);\r\n  }\r\n\r\n  private localDelete(backgroundId: string, backgrounds: BackgroundDto[]) {\r\n    this.backgrounds$ = of([...backgrounds.filter((background) => background.id !== backgroundId)]).pipe(\r\n      tap(() => {\r\n        const controlIndex = this.form.controls.findIndex((c) => c.value.id === backgroundId);\r\n        if (controlIndex) {\r\n          this.form.removeAt(controlIndex);\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  private addNotification(background: Partial<BackgroundDto>, action: 'updated' | 'deleted') {\r\n    this.notificationService.addNotification({\r\n      title: this.COMPONENT_TITLE,\r\n      body: `Background '${background.name}' has been ${action}.`,\r\n    });\r\n  }\r\n}\r\n","<div class=\"d-flex flex-column\">\r\n  <input class=\"d-none\"\r\n         type=\"file\"\r\n         multiple\r\n         accept=\"image/*\"\r\n         #files\r\n         (change)=\"selectFiles($event)\" />\r\n  <button class=\"btn btn-menu btn-icon mb-2 icon-collection\"\r\n          (click)=\"files.click()\">Select Files</button>\r\n\r\n  <ng-container *ngIf=\"selectedFilesArray?.length && !loading\">\r\n    <table class=\"table\">\r\n      <thead>\r\n        <tr>\r\n          <th scope=\"col\">#</th>\r\n          <th scope=\"col\">File Name</th>\r\n          <th scope=\"col\">File Size</th>\r\n          <th scope=\"col\">Preview</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr *ngFor=\"let file of selectedFilesArray; let i = index; trackBy: trackFn\">\r\n          <th scope=\"row\">{{ i + 1 }}</th>\r\n          <td>{{ file.name }}</td>\r\n          <td>{{ file.size | formatBytes }}</td>\r\n          <td class=\"text-center\"><img class=\"icon-preview\"\r\n                 [src]=\"filePreviews.get(file.name) | async\" /></td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n    <button class=\"btn\"\r\n            (click)=\"uploadBackgrounds()\">Upload Backgrounds</button>\r\n  </ng-container>\r\n\r\n  <span *ngIf=\"loading\"\r\n        class=\"spinner\"></span>\r\n</div>\r\n\r\n<bd-notifications [items]=\"notifications$ | async\"></bd-notifications>\r\n","import { Component, ElementRef, OnDestroy, ViewChild } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { Subject, throwError } from 'rxjs';\r\nimport { catchError, finalize, tap } from 'rxjs/operators';\r\nimport { BackgroundService } from '../../../core/services/background.service';\r\n\r\nimport { NotificationService } from '../../../core/services/notification.service';\r\n\r\n@Component({\r\n  selector: 'bd-bg-bulk-upload',\r\n  templateUrl: './bg-bulk-upload.component.html',\r\n  styleUrls: ['./bg-bulk-upload.component.scss'],\r\n})\r\nexport class BgBulkUploadComponent implements OnDestroy {\r\n  @ViewChild('files') public filesEl: ElementRef<HTMLInputElement>;\r\n  public selectedFiles: FileList;\r\n  public filePreviews = new Map<string, Promise<string>>();\r\n  public get selectedFilesArray(): File[] {\r\n    return Array.from(this.selectedFiles || []);\r\n  }\r\n  public loading = false;\r\n  public notifications$ = this.notificationService.notificationsChanged;\r\n  private destroyed$ = new Subject<void>();\r\n\r\n  constructor(\r\n    private readonly backgroundService: BackgroundService,\r\n    private readonly domSanitizer: DomSanitizer,\r\n    private readonly notificationService: NotificationService\r\n  ) {}\r\n\r\n  public ngOnDestroy() {\r\n    this.destroyed$.next();\r\n    this.destroyed$.complete();\r\n  }\r\n\r\n  public selectFiles(event: any) {\r\n    this.selectedFiles = event.target.files || [];\r\n\r\n    this.selectedFilesArray.forEach((file) => {\r\n      this.filePreviews.set(\r\n        file.name,\r\n        new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.onload = () => {\r\n            resolve(this.domSanitizer.bypassSecurityTrustUrl(reader.result as string) as string);\r\n          };\r\n          reader.onerror = (e) => {\r\n            reject(e);\r\n          };\r\n\r\n          reader.readAsDataURL(file);\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  public uploadBackgrounds() {\r\n    if (!this.selectedFiles) {\r\n      return;\r\n    }\r\n\r\n    const formData = new FormData();\r\n    for (const file of this.selectedFilesArray) {\r\n      formData.append('files', file);\r\n    }\r\n\r\n    this.backgroundService\r\n      .uploadBackgrounds(formData)\r\n      .pipe(\r\n        tap(() => (this.loading = true)),\r\n        catchError((e) => throwError(e)),\r\n        finalize(() => {\r\n          this.addUploadNotification(this.selectedFilesArray.length);\r\n          this.loading = false;\r\n          this.filesEl.nativeElement.value = null;\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  public trackFn(_: number, item: File) {\r\n    return item.name;\r\n  }\r\n\r\n  private addUploadNotification(qty: number) {\r\n    this.notificationService.addNotification({\r\n      title: 'Backgrounds Bulk Upload',\r\n      createdAt: new Date(),\r\n      body: `${qty} backgrounds have been uploaded.`,\r\n    });\r\n  }\r\n}\r\n","<button class=\"btn btn-primary btn-add\"\r\n        (click)=\"isAddingCategory = true\">Add Category</button>\r\n\r\n<ng-container *ngIf=\"(categories$ | async)?.length && !loading\">\r\n  <table class=\"table\">\r\n    <thead>\r\n      <tr>\r\n        <th scope=\"col\">#</th>\r\n        <th scope=\"col\">Name</th>\r\n        <th scope=\"col\">Description</th>\r\n        <th scope=\"col\">Created At</th>\r\n        <th scope=\"col\">Updated At</th>\r\n        <th scope=\"col\"></th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      <ng-container *ngFor=\"let category of categoryForms; let i = index\">\r\n        <tr [formGroup]=\"category\">\r\n          <td scope=\"row\"\r\n              class=\"cell-id\"\r\n              (click)=\"copyId(category.get('id').value)\"><small title=\"Click to copy\">{{ category.get('id').value }}</small></td>\r\n          <td class=\"cell-name\">\r\n            <bd-text-input formControlName=\"name\"\r\n                           [cssClass]=\"getInputCss(category.get('name'))\"></bd-text-input>\r\n          </td>\r\n          <td>\r\n            <bd-text-input formControlName=\"description\"\r\n                           [cssClass]=\"getInputCss(category.get('description'))\"></bd-text-input>\r\n          </td>\r\n          <td>{{ category.get('createdAt').value | date:'short'}}</td>\r\n          <td>{{ (category.get('updatedAt').value | date:'short') || '-' }}</td>\r\n          <td class=\"cell-delete\">\r\n            <button class=\"btn btn-danger btn-icon icon-cross\"\r\n                    (click)=\"openDeleteModal(category.value)\"></button>\r\n          </td>\r\n        </tr>\r\n      </ng-container>\r\n    </tbody>\r\n  </table>\r\n</ng-container>\r\n\r\n<span *ngIf=\"loading\"\r\n      class=\"spinner\"></span>\r\n\r\n<bd-notifications [items]=\"notifications$ | async\"></bd-notifications>\r\n\r\n<bd-modal *ngIf=\"isAddingCategory\"\r\n          modalTitle=\"Add new category\"\r\n          (closed)=\"cancelAddingCategory()\"\r\n          (saved)=\"addCategory()\">\r\n  <form [formGroup]=\"newCategoryForm\">\r\n    <div class=\"form-group\">\r\n      <label for=\"name\">Name</label>\r\n      <bd-text-input inputId=\"name\"\r\n                     formControlName=\"name\"\r\n                     placeholder=\"Category name...\"\r\n                     [cssClass]=\"getInputCss(newCategoryForm.get('name'))\"></bd-text-input>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label for=\"description\">Description</label>\r\n      <bd-text-input inputId=\"description\"\r\n                     formControlName=\"description\"\r\n                     placeholder=\"Category description...\"\r\n                     [cssClass]=\"getInputCss(newCategoryForm.get('description'))\"></bd-text-input>\r\n    </div>\r\n  </form>\r\n</bd-modal>\r\n\r\n<bd-modal *ngIf=\"isDeleting\"\r\n          modalTitle=\"Delete existing category\"\r\n          (closed)=\"isDeleting = false\"\r\n          (saved)=\"deleteCategory()\">\r\n  <div class=\"container\">\r\n    <p>Are you sure you want to delete category \"{{deleteCategoryControl.value.name}}\"?</p>\r\n  </div>\r\n</bd-modal>","import { Component, OnDestroy } from '@angular/core';\r\nimport { AbstractControl, FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ClipboardService } from 'ngx-clipboard';\r\nimport { forkJoin, merge, of, Subject } from 'rxjs';\r\nimport { debounceTime, distinctUntilChanged, filter, finalize, map, mergeMap, takeUntil, tap } from 'rxjs/operators';\r\n\r\nimport { CategoryService } from '../../../core/services/category.service';\r\nimport { NotificationService } from '../../../core/services/notification.service';\r\nimport { CategoryDto } from '../../../models/dto/category-dto';\r\nimport { ArrayHelper } from '../../../shared/helpers/array.helper';\r\nimport { TextHelper } from '../../../shared/helpers/text.helper';\r\n\r\n@Component({\r\n  selector: 'bd-category-management',\r\n  templateUrl: './category-management.component.html',\r\n  styleUrls: ['./category-management.component.scss'],\r\n})\r\nexport class CategoryManagementComponent implements OnDestroy {\r\n  public loading = false;\r\n  public form = new FormArray([]);\r\n  public categories$ = this.fetchCategories();\r\n  public notifications$ = this.notificationService.notificationsChanged;\r\n  public get categoryForms() {\r\n    return this.form.controls as FormGroup[];\r\n  }\r\n  public isAddingCategory = false;\r\n  public isDeleting = false;\r\n  public newCategoryForm = this.fb.group({\r\n    name: [null, Validators.required],\r\n    description: [null],\r\n  });\r\n  public deleteCategoryControl = this.fb.control([null, Validators.required]);\r\n  private destroyed$ = new Subject<void>();\r\n  private readonly COMPONENT_TITLE = 'Category Management';\r\n\r\n  constructor(\r\n    private readonly categoryService: CategoryService,\r\n    private readonly notificationService: NotificationService,\r\n    private readonly fb: FormBuilder,\r\n    private readonly clipboardService: ClipboardService\r\n  ) {}\r\n\r\n  public ngOnDestroy() {\r\n    this.destroyed$.next();\r\n    this.destroyed$.complete();\r\n  }\r\n\r\n  public getInputCss(categoryFieldControl: AbstractControl) {\r\n    const cssClass = 'w-100 text-small';\r\n    return categoryFieldControl.invalid ? `${cssClass} is-invalid` : cssClass;\r\n  }\r\n\r\n  public cancelAddingCategory() {\r\n    this.isAddingCategory = false;\r\n    this.newCategoryForm.reset();\r\n  }\r\n\r\n  public addCategory() {\r\n    if (this.newCategoryForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.loading = true;\r\n    this.categoryService\r\n      .addCategory(this.newCategoryForm.value)\r\n      .pipe(\r\n        mergeMap(() => this.fetchCategories()),\r\n        tap(() => {\r\n          this.addNotification({ name: this.newCategoryForm.value.name }, 'added');\r\n          this.newCategoryForm.reset();\r\n        })\r\n      )\r\n      .subscribe();\r\n\r\n    this.isAddingCategory = false;\r\n  }\r\n\r\n  public openDeleteModal(category: CategoryDto) {\r\n    this.deleteCategoryControl.setValue(category);\r\n    this.isDeleting = true;\r\n  }\r\n\r\n  public deleteCategory() {\r\n    this.loading = true;\r\n    this.categoryService\r\n      .deleteCategory(this.deleteCategoryControl.value.id)\r\n      .pipe(\r\n        mergeMap(() => this.fetchCategories()),\r\n        tap(() => {\r\n          this.addNotification({ name: this.deleteCategoryControl.value.name }, 'deleted');\r\n          this.deleteCategoryControl.reset();\r\n        })\r\n      )\r\n      .subscribe();\r\n\r\n    this.isDeleting = false;\r\n  }\r\n\r\n  public copyId(id: string) {\r\n    this.clipboardService.copy(id);\r\n    this.notificationService.addNotification({\r\n      title: this.COMPONENT_TITLE,\r\n      body: `Id '${id}' has been copied to clipboard.`,\r\n    });\r\n  }\r\n\r\n  private fetchCategories() {\r\n    this.loading = true;\r\n\r\n    return this.categoryService.getCategories(true).pipe(\r\n      map((categories) => ArrayHelper.sortAlphaNumeric(categories, 'name')),\r\n      tap((categories) => this.createForm(categories)),\r\n      finalize(() => (this.loading = false))\r\n    );\r\n  }\r\n\r\n  private createForm(categories: CategoryDto[]) {\r\n    this.form.clear();\r\n\r\n    categories.forEach((i) => {\r\n      const group = this.fb.group({\r\n        id: [i.id, Validators.required],\r\n        name: [i.name, Validators.required],\r\n        description: [i.description, Validators.required],\r\n        createdAt: [i.createdAt, Validators.required],\r\n        updatedAt: [i.updatedAt],\r\n      });\r\n      merge(\r\n        group.get('name').valueChanges.pipe(map((val) => ({ name: val }))),\r\n        group.get('description').valueChanges.pipe(map((val) => ({ description: val })))\r\n      )\r\n        .pipe(\r\n          takeUntil(this.destroyed$),\r\n          filter(() => {\r\n            group.updateValueAndValidity();\r\n            return group.valid;\r\n          }),\r\n          debounceTime(TextHelper.DEFAULT_DEBOUNCE_TIME),\r\n          distinctUntilChanged((x, y) => {\r\n            const key = Object.keys(y)[0];\r\n            return (x as any)[key] === (y as any)[key];\r\n          }),\r\n          map((changes) => ({ id: i.id, ...changes } as Partial<CategoryDto>)),\r\n          mergeMap((category) => forkJoin([of(category), this.categoryService.patchCategory(category)])),\r\n          tap(([updatedCategory]) => {\r\n            const updatedCategoryFull = categories.find((item) => item.id === updatedCategory.id);\r\n            if (updatedCategoryFull) {\r\n              this.addNotification({ ...updatedCategoryFull, ...updatedCategory }, 'updated');\r\n            }\r\n\r\n            this.categories$ = this.fetchCategories();\r\n          })\r\n        )\r\n        .subscribe();\r\n\r\n      this.form.push(group);\r\n    });\r\n  }\r\n\r\n  private addNotification(category: Partial<CategoryDto>, action: 'added' | 'updated' | 'deleted') {\r\n    this.notificationService.addNotification({\r\n      title: this.COMPONENT_TITLE,\r\n      body: `Category '${category.name}' has been ${action}.`,\r\n    });\r\n  }\r\n}\r\n","<ng-container *ngIf=\"(icons$ | async)?.length && !loading\">\r\n  <table class=\"table\">\r\n    <thead>\r\n      <tr>\r\n        <th scope=\"col\">#</th>\r\n        <th scope=\"col\">Icon</th>\r\n        <th scope=\"col\">Name</th>\r\n        <th scope=\"col\">Tags <span>(split with \",\")</span></th>\r\n        <th scope=\"col\">URL</th>\r\n        <th scope=\"col\">Type</th>\r\n        <th scope=\"col\">Premium</th>\r\n        <th scope=\"col\">Categories</th>\r\n        <th scope=\"col\">Created At</th>\r\n        <th scope=\"col\">Updated At</th>\r\n        <th scope=\"col\"></th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      <ng-container *ngFor=\"let icon of iconForms; let i = index\">\r\n        <tr [formGroup]=\"icon\">\r\n          <td scope=\"row\"\r\n              class=\"cell-id\"\r\n              (click)=\"copyId(icon.get('id').value)\"><small title=\"Click to copy\">{{ icon.get('id').value }}</small></td>\r\n          <td><img class=\"icon-preview\"\r\n                 [src]=\"icon.get('url').value\"></td>\r\n          <td class=\"cell-name\">\r\n            <bd-text-input formControlName=\"name\"\r\n                           [cssClass]=\"getInputCss(icon.get('name'))\"></bd-text-input>\r\n          </td>\r\n          <td>\r\n            <textarea formControlName=\"tags\"></textarea>\r\n          </td>\r\n          <td>\r\n            <bd-text-input formControlName=\"url\"\r\n                           [cssClass]=\"getInputCss(icon.get('url'))\"></bd-text-input>\r\n          </td>\r\n          <td class=\"cell-type\">\r\n            <bd-dropdown formControlName=\"type\"\r\n                         [items]=\"iconTypes\"\r\n                         valueProp=\"id\"\r\n                         labelProp=\"name\"\r\n                         [cssClass]=\"getInputCss(icon.get('type'))\"></bd-dropdown>\r\n          </td>\r\n          <td>\r\n            <div class=\"d-flex justify-content-center align-items-center checkbox-wrapper\"\r\n                 *ngIf=\"icon.value.type === IconType.Vector\">\r\n              <input type=\"checkbox\"\r\n                     class=\"checkbox mr-2\"\r\n                     [value]=\"icon.value.isPremium\"\r\n                     [checked]=\"icon.value.isPremium\"\r\n                     formControlName=\"isPremium\">\r\n            </div>\r\n          </td>\r\n          <td>\r\n            <div class=\"d-flex align-items-center checkbox-wrapper\"\r\n                 *ngFor=\"let category of categories$ | async\">\r\n              <input type=\"checkbox\"\r\n                     class=\"checkbox mr-2\"\r\n                     [value]=\"category\"\r\n                     [checked]=\"hasCategory(icon.value, category)\"\r\n                     (change)=\"toggleCategory(icon.value, category, icon)\"\r\n                     id=\"category-checkbox-{{i}}-{{category.id}}\">\r\n              <label for=\"category-checkbox-{{i}}-{{category.id}}\">\r\n                {{category.name}}\r\n              </label>\r\n            </div>\r\n          </td>\r\n          <td><small>{{ icon.get('createdAt').value | date:'short'}}</small></td>\r\n          <td><small>{{ (icon.get('updatedAt').value | date:'short') || '-' }}</small></td>\r\n          <td class=\"cell-delete\">\r\n            <button class=\"btn btn-danger btn-icon icon-cross\"\r\n                    (click)=\"openDeleteModal(icon.value)\"></button>\r\n          </td>\r\n        </tr>\r\n      </ng-container>\r\n    </tbody>\r\n  </table>\r\n</ng-container>\r\n\r\n<span *ngIf=\"loading\"\r\n      class=\"spinner\"></span>\r\n\r\n<bd-notifications [items]=\"notifications$ | async\"></bd-notifications>\r\n\r\n<bd-modal *ngIf=\"isDeleting\"\r\n          modalTitle=\"Delete existing icon\"\r\n          (closed)=\"isDeleting = false\"\r\n          (saved)=\"deleteIcon()\">\r\n  <div class=\"container\">\r\n    <p>Are you sure you want to delete icon \"{{deleteIconControl.value.name}}\"?</p>\r\n  </div>\r\n</bd-modal>\r\n","import { Component, OnDestroy } from '@angular/core';\r\nimport { AbstractControl, FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ClipboardService } from 'ngx-clipboard';\r\nimport { forkJoin, merge, Observable, of, Subject } from 'rxjs';\r\nimport { debounceTime, distinctUntilChanged, filter, finalize, map, mergeMap, takeUntil, tap } from 'rxjs/operators';\r\n\r\nimport { CategoryService } from '../../../core/services/category.service';\r\nimport { IconService } from '../../../core/services/icon.service';\r\nimport { NotificationService } from '../../../core/services/notification.service';\r\nimport { CategoryDto } from '../../../models/dto/category-dto';\r\nimport { IconDto } from '../../../models/dto/icon-dto';\r\nimport { IconType } from '../../../models/enums/icon-type';\r\nimport { ArrayHelper } from '../../../shared/helpers/array.helper';\r\nimport { DataHelper } from '../../../shared/helpers/data.helper';\r\nimport { TextHelper } from '../../../shared/helpers/text.helper';\r\n\r\n@Component({\r\n  selector: 'bd-icon-management',\r\n  templateUrl: './icon-management.component.html',\r\n  styleUrls: ['./icon-management.component.scss'],\r\n})\r\nexport class IconManagementComponent implements OnDestroy {\r\n  public loading = false;\r\n  public form = new FormArray([]);\r\n  public icons$ = this.fetchIcons();\r\n  public IconType = IconType;\r\n  public iconTypes = Object.entries(IconType).map(([key, value]) => ({ id: value, name: key }));\r\n  public categories$ = this.categoryService.getCategories();\r\n  public notifications$ = this.notificationService.notificationsChanged;\r\n  public get iconForms() {\r\n    return this.form.controls as FormGroup[];\r\n  }\r\n  public isDeleting = false;\r\n  public deleteIconControl = this.fb.control([null, Validators.required]);\r\n  private destroyed$ = new Subject<void>();\r\n  private readonly COMPONENT_TITLE = 'Icon Management';\r\n\r\n  constructor(\r\n    private readonly iconService: IconService,\r\n    private readonly categoryService: CategoryService,\r\n    private readonly notificationService: NotificationService,\r\n    private readonly fb: FormBuilder,\r\n    private readonly clipboardService: ClipboardService\r\n  ) {}\r\n\r\n  public ngOnDestroy() {\r\n    this.destroyed$.next();\r\n    this.destroyed$.complete();\r\n  }\r\n\r\n  public getIconType(type: IconType) {\r\n    switch (type) {\r\n      case IconType.Raster:\r\n        return 'Raster';\r\n      case IconType.Vector:\r\n        return 'Vector';\r\n      default:\r\n        return '-';\r\n    }\r\n  }\r\n\r\n  public hasCategory(icon: IconDto, category: CategoryDto) {\r\n    return icon.categories?.some((cat) => cat.id === category.id);\r\n  }\r\n\r\n  public toggleCategory(icon: IconDto, category: CategoryDto, iconControl: FormGroup) {\r\n    let updatedIcon: Partial<IconDto>;\r\n    let obs$: Observable<any>;\r\n\r\n    if (this.hasCategory(icon, category)) {\r\n      updatedIcon = { id: icon.id, categories: icon.categories.filter((cat) => cat.id !== category.id) };\r\n      obs$ = this.iconService.deleteIconCategory(icon.id, category.id);\r\n    } else {\r\n      updatedIcon = { id: icon.id, categories: [...icon.categories, category] };\r\n      obs$ = this.iconService.addIconCategory(icon.id, category.id);\r\n    }\r\n\r\n    return obs$.pipe(tap(() => iconControl.get('categories').setValue(updatedIcon.categories))).subscribe();\r\n  }\r\n\r\n  public getInputCss(iconFieldControl: AbstractControl) {\r\n    const cssClass = 'w-100 text-small';\r\n    return iconFieldControl.invalid ? `${cssClass} is-invalid` : cssClass;\r\n  }\r\n\r\n  public openDeleteModal(icon: IconDto) {\r\n    this.deleteIconControl.setValue(icon);\r\n    this.isDeleting = true;\r\n  }\r\n\r\n  public deleteIcon() {\r\n    this.loading = true;\r\n    this.iconService\r\n      .deleteIcon(this.deleteIconControl.value.id)\r\n      .pipe(\r\n        mergeMap(() => this.icons$),\r\n        tap((icons) => {\r\n          this.localDelete(this.deleteIconControl.value.id, icons);\r\n          this.addNotification({ name: this.deleteIconControl.value.name }, 'deleted');\r\n          this.deleteIconControl.reset();\r\n        }),\r\n        finalize(() => (this.loading = false))\r\n      )\r\n      .subscribe();\r\n\r\n    this.isDeleting = false;\r\n  }\r\n\r\n  public copyId(id: string) {\r\n    this.clipboardService.copy(id);\r\n    this.notificationService.addNotification({\r\n      title: this.COMPONENT_TITLE,\r\n      body: `Id '${id}' has been copied to clipboard.`,\r\n    });\r\n  }\r\n\r\n  private fetchIcons() {\r\n    this.loading = true;\r\n\r\n    return this.iconService.getIcons({}, true).pipe(\r\n      map((icons) => ArrayHelper.sortAlphaNumeric(icons, 'name')),\r\n      tap((icons) => this.createForm(icons)),\r\n      finalize(() => (this.loading = false))\r\n    );\r\n  }\r\n\r\n  private createForm(icons: IconDto[]) {\r\n    this.form.clear();\r\n\r\n    icons.forEach((i) => {\r\n      const group = this.fb.group({\r\n        id: [i.id, Validators.required],\r\n        name: [i.name, Validators.required],\r\n        tags: [i.tags],\r\n        url: [i.url, Validators.required],\r\n        type: [i.type, Validators.required],\r\n        isPremium: [i.isPremium, Validators.required],\r\n        categories: [i.categories],\r\n        createdAt: [i.createdAt, Validators.required],\r\n        updatedAt: [i.updatedAt],\r\n      });\r\n      merge(\r\n        group.get('name').valueChanges.pipe(map((val) => ({ name: val }))),\r\n        group.get('tags').valueChanges.pipe(\r\n          map((val) => ({\r\n            tags: val\r\n              .split(',')\r\n              .map((tag: string) => tag.trim())\r\n              .filter((tag: string) => !!tag.length),\r\n          }))\r\n        ),\r\n        group.get('url').valueChanges.pipe(map((val) => ({ url: val }))),\r\n        group.get('type').valueChanges.pipe(map((val) => ({ type: val }))),\r\n        group.get('isPremium').valueChanges.pipe(map((val) => ({ isPremium: val })))\r\n      )\r\n        .pipe(\r\n          takeUntil(this.destroyed$),\r\n          filter(() => {\r\n            group.updateValueAndValidity();\r\n            return group.valid;\r\n          }),\r\n          debounceTime(TextHelper.DEFAULT_DEBOUNCE_TIME),\r\n          distinctUntilChanged((x, y) => {\r\n            const key = Object.keys(y)[0];\r\n            const oldVal = (x as any)[key];\r\n            const newVal = (y as any)[key];\r\n            const isArray = Array.isArray(oldVal);\r\n            return isArray ? DataHelper.isEqual(oldVal, newVal) : oldVal === newVal;\r\n          }),\r\n          map((changes) => ({ id: i.id, ...changes } as Partial<IconDto>)),\r\n          mergeMap((icon) => forkJoin([of(icon), this.iconService.patchIcon(icon)])),\r\n          tap(([updatedIcon]) => {\r\n            this.localUpdate(updatedIcon, icons);\r\n            const updatedIconFull = icons.find((item) => item.id === updatedIcon.id);\r\n            if (updatedIconFull) {\r\n              this.addNotification({ ...updatedIconFull, ...updatedIcon }, 'updated');\r\n            }\r\n          })\r\n        )\r\n        .subscribe();\r\n\r\n      group\r\n        .get('categories')\r\n        .valueChanges.pipe(map((val) => ({ categories: val })))\r\n        .pipe(\r\n          // TODO: reuse shared pipe elements\r\n          takeUntil(this.destroyed$),\r\n          map((changes) => ({ id: i.id, ...changes } as Partial<IconDto>)),\r\n          tap((updatedIcon) => {\r\n            this.localUpdate(updatedIcon, icons);\r\n            const updatedIconFull = icons.find((item) => item.id === updatedIcon.id);\r\n            if (updatedIconFull) {\r\n              this.addNotification({ ...updatedIconFull, ...updatedIcon }, 'updated');\r\n            }\r\n          })\r\n        )\r\n        .subscribe();\r\n\r\n      this.form.push(group);\r\n    });\r\n  }\r\n\r\n  private localUpdate(updatedIcon: Partial<IconDto>, icons: IconDto[]) {\r\n    const clonedIcons = [...icons];\r\n    const index = clonedIcons.findIndex((icon) => icon.id === updatedIcon.id);\r\n    clonedIcons[index] = { ...clonedIcons[index], ...updatedIcon };\r\n    this.icons$ = of(clonedIcons);\r\n  }\r\n\r\n  private localDelete(iconId: string, icons: IconDto[]) {\r\n    this.icons$ = of([...icons.filter((icon) => icon.id !== iconId)]).pipe(\r\n      tap(() => {\r\n        const controlIndex = this.form.controls.findIndex((c) => c.value.id === iconId);\r\n        if (controlIndex) {\r\n          this.form.removeAt(controlIndex);\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  private addNotification(icon: Partial<IconDto>, action: 'updated' | 'deleted') {\r\n    this.notificationService.addNotification({\r\n      title: this.COMPONENT_TITLE,\r\n      body: `Icon '${icon.name}' has been ${action}.`,\r\n    });\r\n  }\r\n}\r\n","<div class=\"d-flex flex-column\">\r\n  <input class=\"d-none\"\r\n         type=\"file\"\r\n         multiple\r\n         accept=\"image/*\"\r\n         #files\r\n         (change)=\"selectFiles($event)\" />\r\n  <button class=\"btn btn-menu btn-icon mb-2 icon-collection\"\r\n          (click)=\"files.click()\">Select Files</button>\r\n\r\n  <ng-container *ngIf=\"selectedFilesArray?.length && !loading\">\r\n    <table class=\"table\">\r\n      <thead>\r\n        <tr>\r\n          <th scope=\"col\">#</th>\r\n          <th scope=\"col\">File Name</th>\r\n          <th scope=\"col\">File Size</th>\r\n          <th scope=\"col\">Preview</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr *ngFor=\"let file of selectedFilesArray; let i = index; trackBy: trackFn\">\r\n          <th scope=\"row\">{{ i + 1 }}</th>\r\n          <td>{{ file.name }}</td>\r\n          <td>{{ file.size | formatBytes }}</td>\r\n          <td class=\"text-center\"><img class=\"icon-preview\"\r\n                 [src]=\"filePreviews.get(file.name) | async\" /></td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n    <button class=\"btn\"\r\n            (click)=\"uploadIcons()\">Upload Icons</button>\r\n  </ng-container>\r\n\r\n  <span *ngIf=\"loading\"\r\n        class=\"spinner\"></span>\r\n</div>\r\n\r\n<bd-notifications [items]=\"notifications$ | async\"></bd-notifications>","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { AdminGuard } from '../../core/guards/admin.guard';\r\nimport { AdminHomeComponent } from './admin-home/admin-home.component';\r\nimport { AdminComponent } from './admin.component';\r\nimport { BackgroundManagementComponent } from './background-management/background-management.component';\r\nimport { BgBulkUploadComponent } from './bg-bulk-upload/bg-bulk-upload.component';\r\nimport { CategoryManagementComponent } from './category-management/category-management.component';\r\nimport { IconManagementComponent } from './icon-management/icon-management.component';\r\nimport { IconsBulkUploadComponent } from './icons-bulk-upload/icons-bulk-upload.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: AdminComponent,\r\n    canActivate: [AdminGuard],\r\n    children: [\r\n      { path: '', component: AdminHomeComponent },\r\n      {\r\n        path: 'icons',\r\n        children: [\r\n          { path: 'upload', component: IconsBulkUploadComponent },\r\n          { path: '', component: IconManagementComponent },\r\n        ],\r\n      },\r\n      { path: 'categories', component: CategoryManagementComponent },\r\n      {\r\n        path: 'backgrounds',\r\n        children: [\r\n          { path: 'upload', component: BgBulkUploadComponent },\r\n          { path: '', component: BackgroundManagementComponent },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AdminRoutingModule {}\r\n","import { Component, ElementRef, OnDestroy, ViewChild } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { Subject, throwError } from 'rxjs';\r\nimport { catchError, finalize, tap } from 'rxjs/operators';\r\n\r\nimport { IconService } from '../../../core/services/icon.service';\r\nimport { NotificationService } from '../../../core/services/notification.service';\r\n\r\n@Component({\r\n  selector: 'bd-icons-bulk-upload',\r\n  templateUrl: './icons-bulk-upload.component.html',\r\n  styleUrls: ['./icons-bulk-upload.component.scss'],\r\n})\r\nexport class IconsBulkUploadComponent implements OnDestroy {\r\n  @ViewChild('files') public filesEl: ElementRef<HTMLInputElement>;\r\n  public selectedFiles: FileList;\r\n  public filePreviews = new Map<string, Promise<string>>();\r\n  public get selectedFilesArray(): File[] {\r\n    return Array.from(this.selectedFiles || []);\r\n  }\r\n  public loading = false;\r\n  public notifications$ = this.notificationService.notificationsChanged;\r\n  private destroyed$ = new Subject<void>();\r\n\r\n  constructor(\r\n    private readonly iconService: IconService,\r\n    private readonly domSanitizer: DomSanitizer,\r\n    private readonly notificationService: NotificationService\r\n  ) {}\r\n\r\n  public ngOnDestroy() {\r\n    this.destroyed$.next();\r\n    this.destroyed$.complete();\r\n  }\r\n\r\n  public selectFiles(event: any) {\r\n    this.selectedFiles = event.target.files || [];\r\n\r\n    this.selectedFilesArray.forEach((file) => {\r\n      this.filePreviews.set(\r\n        file.name,\r\n        new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.onload = () => {\r\n            resolve(this.domSanitizer.bypassSecurityTrustUrl(reader.result as string) as string);\r\n          };\r\n          reader.onerror = (e) => {\r\n            reject(e);\r\n          };\r\n\r\n          reader.readAsDataURL(file);\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  public uploadIcons() {\r\n    if (!this.selectedFiles) {\r\n      return;\r\n    }\r\n\r\n    const formData = new FormData();\r\n    for (const file of this.selectedFilesArray) {\r\n      formData.append('files', file);\r\n    }\r\n\r\n    this.iconService\r\n      .uploadIcons(formData)\r\n      .pipe(\r\n        tap(() => (this.loading = true)),\r\n        catchError((e) => throwError(e)),\r\n        finalize(() => {\r\n          this.addUploadNotification(this.selectedFilesArray.length);\r\n          this.loading = false;\r\n          this.filesEl.nativeElement.value = null;\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  public trackFn(_: number, item: File) {\r\n    return item.name;\r\n  }\r\n\r\n  private addUploadNotification(iconsQty: number) {\r\n    this.notificationService.addNotification({\r\n      title: 'Icons Bulk Upload',\r\n      createdAt: new Date(),\r\n      body: `${iconsQty} icons have been uploaded.`,\r\n    });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { AdminRoutingModule } from './admin-routing.module';\r\nimport { AdminComponent } from './admin.component';\r\nimport { SharedModule } from '../../shared/shared.module';\r\nimport { IconsBulkUploadComponent } from './icons-bulk-upload/icons-bulk-upload.component';\r\nimport { IconManagementComponent } from './icon-management/icon-management.component';\r\nimport { AdminHomeComponent } from './admin-home/admin-home.component';\r\nimport { CategoryManagementComponent } from './category-management/category-management.component';\r\nimport { BackgroundManagementComponent } from './background-management/background-management.component';\r\nimport { BgBulkUploadComponent } from './bg-bulk-upload/bg-bulk-upload.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AdminComponent,\r\n    IconsBulkUploadComponent,\r\n    BgBulkUploadComponent,\r\n    IconManagementComponent,\r\n    AdminHomeComponent,\r\n    CategoryManagementComponent,\r\n    BackgroundManagementComponent,\r\n  ],\r\n  imports: [CommonModule, AdminRoutingModule, SharedModule],\r\n})\r\nexport class AdminModule {}\r\n"]}